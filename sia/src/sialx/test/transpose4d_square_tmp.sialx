sial transpose_tmp
	predefined int norb
	special fill_block_cyclic wr
	special print_block r
	aoindex i = 1:1
	aoindex j = 1:1
	aoindex k = 1:1
	aoindex l = 1:1
	local a[i,j,k,l]
	local b[k,j,i,l]
	
	scalar esum1
	scalar esum2
	scalar esum3
	
	#create a
	#create b
	
	do i
		do j
			do k
				do l
	#pardo i, j, k, l
					allocate b[k,j,i,l]
					allocate a[i,j,k,l]
					execute fill_block_cyclic a[i,j,k,l] 1.0
					#print a[i,j,k,l]					
					b[k,j,i,l] = a[i,j,k,l]
					#print b[k,j,i,l]
					
					esum1 = a[i,j,k,l] * a[i,j,k,l]
					esum2 = b[k,j,i,l] * b[k,j,i,l]
					esum3 = a[i,j,k,l] * b[k,j,i,l]
					
					print esum1
					print esum2
	#endpardo i,j,k,l					
				enddo l
			enddo k
		enddo j
	enddo i
	println "end of transpose_tmp"
	
endsial transpose_tmp
