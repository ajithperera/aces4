import "mp2_uhf_defs.sialx"
# 
#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
      SIAL MBPT2_UHF
#
# Make index definitions 
#
      index kiter    = 1: cc_iter
      index jiter    = 1: cc_iter
      index   kptr1  = 1: 2
      index   kptr2  = 1: 2
      index   kone   = 1: 1
#
      aoindex mu     = 1: norb 
      aoindex nu     = 1: norb 
      aoindex lambda = 1: norb 
      aoindex sigma  = 1: norb 
#
      moaindex i = baocc: eaocc
      moaindex i1= baocc: eaocc
      moaindex i2= baocc: eaocc
      moaindex i3= baocc: eaocc
#
      moaindex a = bavirt: eavirt
      moaindex a1= bavirt: eavirt
      moaindex a2= bavirt: eavirt
      moaindex a3= bavirt: eavirt 
#
      mobindex j = bbocc: ebocc
      mobindex j1= bbocc: ebocc
      mobindex j2= bbocc: ebocc
      mobindex j3= bbocc: ebocc
#
      mobindex b = bbvirt: ebvirt
      mobindex b1= bbvirt: ebvirt
      mobindex b2= bbvirt: ebvirt
      mobindex b3= bbvirt: ebvirt 
#
      moaindex p = baocc: eavirt  
      moaindex p1= baocc: eavirt  
      moaindex p2= baocc: eavirt  
      moaindex p3= baocc: eavirt  
#
      mobindex q = bbocc: ebvirt  
      mobindex q1= bbocc: ebvirt  
      mobindex q2= bbocc: ebvirt  
      mobindex q3= bbocc: ebvirt  
#
# Declare distributed arrays which are used 
# 
      distributed Vxixi[mu,i1,nu,i] 
      distributed Vaiai[a,i1,a1,i] 
      distributed Vxjxj[mu,j1,nu,j] 
      distributed Vbjbj[b,j1,b1,j] 
      distributed Vxixj[mu,i,nu,j] 
      distributed Vaibj[a,i,b,j] 
      distributed Daoint[mu,nu,lambda,sigma]
#
# Declare Temporary arrays which are used 
# 
      temp Txxxi[mu,nu,lambda,i] 
      temp Txxxj[mu,nu,lambda,j] 
      temp Txiai[mu,i,a,i1] 
      temp T1xiai[mu,i,a,i1] 
      temp Txjbj[mu,j,b,j1] 
      temp T1xjbj[mu,j,b,j1] 
      temp Txibj[mu,i,b,j1] 
      temp T1xibj[mu,i,b,j1] 
      temp Txixi[mu,i,nu,i1] 
      temp T1xixi[mu,i,nu,i1] 
      temp Txjxj[mu,j,nu,j1] 
      temp T1xjxj[mu,j,nu,j1] 
      temp Txixj[mu,i,nu,j] 
      temp T1xixj[mu,i,nu,j] 
      temp Taiai[a,i,a1,i1] 
      temp T1aiai[a,i,a1,i1] 
      temp Tbjbj[b,j,b1,j1] 
      temp T1bjbj[b,j,b1,j1] 
      temp Taibj[a,i,b,j] 
      temp T1aibj[a,i,b,j] 
      temp V0xxxi[mu,nu,lambda,i] 
      temp V2xxxi[mu,nu,sigma,i] 
      temp V0xxxj[mu,nu,lambda,j] 
      temp V2xxxj[mu,nu,sigma,j] 
      temp Aoint[mu,nu,lambda,sigma]

#declare scalars 

      scalar one
      scalar two
      scalar five
      scalar six
      scalar seven
      scalar ncount1
      scalar ncount2
      scalar etemp 
      scalar esum 
      scalar esumaa  
      scalar esumab  
      scalar esumbb  
      scalar ecorraa 
      scalar ecorrbb 
      scalar ecorrab 
      scalar imax
      scalar zmax 
      scalar mp2_energy 
      scalar AAAA 
      scalar BBBB
      scalar ABAB

      PROC GET_2EL_INTS
#     -----------------

     PARDO mu, nu, lambda, sigma
           WHERE mu     < nu
           WHERE lambda < sigma
                 execute compute_ubatch6 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
                 PUT Daoint[mu,nu,lambda,sigma] = aoint[mu,nu,lambda,sigma]
     ENDPARDO mu, nu, lambda, sigma

     PARDO mu, nu, lambda, sigma
           WHERE mu     == nu
           WHERE lambda < sigma
                 execute compute_ubatch6 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
                 PUT Daoint[mu,nu,lambda,sigma] = aoint[mu,nu,lambda,sigma]
     ENDPARDO mu, nu, lambda, sigma

     PARDO mu, nu, lambda, sigma
           WHERE mu     < nu
           WHERE lambda == sigma
                 execute compute_ubatch6 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
                 PUT Daoint[mu,nu,lambda,sigma] = aoint[mu,nu,lambda,sigma]
     ENDPARDO mu, nu, lambda, sigma

     PARDO mu, nu, lambda, sigma
           WHERE mu     == nu
           WHERE lambda == sigma
                 execute compute_ubatch6 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
                 PUT Daoint[mu,nu,lambda,sigma] = aoint[mu,nu,lambda,sigma]
     ENDPARDO mu, nu, lambda, sigma

     sip_barrier

     ENDPROC GET_2EL_INTS
#    --------------------

     PROC TRAN_AAII  
#    --------------
#
     PARDO mu, nu, lambda, sigma  
#
           WHERE mu     < nu
           WHERE lambda < sigma
#
                 
           Get DAOINT[mu,nu,lambda,sigma]
           Do I
              V0xxxi[mu,nu,lambda,i] = DAOINT[mu,nu,lambda,sigma]*ca[sigma,i]
              V2xxxi[mu,nu,sigma,i]  = DAOINT[mu,nu,lambda,sigma]*ca[lambda,i]
#
              DO i1 
#
                 Txixi[mu,i1,lambda,i]      = V0xxxi[mu,nu,lambda,i]*ca[nu,i1]
                 put Vxixi[mu,i1,lambda,i] += Txixi[mu,i1,lambda,i]
#
                 T1xixi[mu,i1,sigma,i]      = V2xxxi[mu,nu,sigma,i]*ca[nu,i1]
                 put Vxixi[mu,i1,sigma,i]  += T1xixi[mu,i1,sigma,i]
#
              ENDDO i1  
#
              DO i1
#
                 Txixi[nu,i1,lambda,i]      = V0xxxi[mu,nu,lambda,i]*ca[mu,i1]
                 put Vxixi[nu,i1,lambda,i] += Txixi[nu,i1,lambda,i]
#
                 T1xixi[nu,i1,sigma,i]      = V2xxxi[mu,nu,sigma,i]*ca[mu,i1]
                 put Vxixi[nu,i1,sigma,i]  += T1xixi[nu,i1,sigma,i]
#
              ENDDO i1
#
           Enddo I
#
     ENDPARDO mu, nu, lambda, sigma  
#
     PARDO mu, nu, lambda, sigma  
#
           WHERE mu     == nu
           WHERE lambda < sigma

           Get DAOINT[mu,nu,lambda,sigma]
           Do I
#
               V0xxxi[mu,nu,lambda,i] = DAOINT[mu,nu,lambda,sigma]*ca[sigma,i]
               V2xxxi[mu,nu,sigma,i]  = DAOINT[mu,nu,lambda,sigma]*ca[lambda,i]
#
               DO i1 
#
                  Txixi[mu,i1,lambda,i]      = V0xxxi[mu,nu,lambda,i]*ca[nu,i1]
                  put Vxixi[mu,i1,lambda,i] += Txixi[mu,i1,lambda,i]
#
                  T1xixi[mu,i1,sigma,i]      = V2xxxi[mu,nu,sigma,i]*ca[nu,i1]
                  put Vxixi[mu,i1,sigma,i]  += T1xixi[mu,i1,sigma,i]
#
               ENDDO i1  

           Enddo I
#
     ENDPARDO mu, nu, lambda, sigma  
#
     PARDO mu, nu, lambda, sigma  
#
           WHERE mu     < nu
           WHERE lambda == sigma
#
           Get DAOINT[mu,nu,lambda,sigma]
           Do I

              V0xxxi[mu,nu,lambda,i] = DAOINT[mu,nu,lambda,sigma]*ca[sigma,i]
#
              DO i1 
#
                 Txixi[mu,i1,lambda,i]      = V0xxxi[mu,nu,lambda,i]*ca[nu,i1]
                 put Vxixi[mu,i1,lambda,i] += Txixi[mu,i1,lambda,i]
#
                 T1xixi[nu,i1,lambda,i]     = V0xxxi[mu,nu,lambda,i]*ca[mu,i1]
                 put Vxixi[nu,i1,lambda,i] += T1xixi[nu,i1,lambda,i]
#
              ENDDO i1

           Enddo I
#
     ENDPARDO mu, nu, lambda, sigma  
#
     PARDO mu, nu, lambda, sigma  
#
           WHERE mu     == nu
           WHERE lambda == sigma
#
           Get DAOINT[mu,nu,lambda,sigma]
           Do I

             V0xxxi[mu,nu,lambda,i] = DAOINT[mu,nu,lambda,sigma]*ca[sigma,i]
#
             DO i1 
#
                Txixi[mu,i1,lambda,i]      = V0xxxi[mu,nu,lambda,i]*ca[nu,i1]
                put Vxixi[mu,i1,lambda,i] += Txixi[mu,i1,lambda,i]
#
             ENDDO i1  

           Enddo I
#
     ENDPARDO mu, nu, lambda, sigma  
#       
     sip_barrier 
#
     PARDO a1, mu, i1  

           Do I
#
           Txiai[mu,i1,a1,i] = 0.0 
#
           DO lambda  
#
              get                  Vxixi[mu,i1,lambda,i]
              T1xiai[mu,i1,a1,i] = Vxixi[mu,i1,lambda,i]*ca[lambda,a1]  
              Txiai[mu,i1,a1,i] += T1xiai[mu,i1,a1,i] 
#
           ENDDO lambda  
#
           DO a 
#
              Taiai[a,i1,a1,i]      = Txiai[mu,i1,a1,i]*ca[mu,a] 
              put Vaiai[a,i1,a1,i] += Taiai[a,i1,a1,i]  
#
           ENDDO a 
           ENDDO I
#
     ENDPARDO a1, mu, i1  
#
     sip_barrier 
#
     PARDO a, a1, i1   

           Do I
#
              get                        Vaiai[a,i1,a1,i]  
              get                        Vaiai[a1,i1,a,i]  

              Taiai[a,i1,a1,i]         = Vaiai[a,i1,a1,i]
              T1aiai[a,i1,a1,i]        = Vaiai[a1,i1,a,i]
              Taiai[a,i1,a1,i]        -= T1aiai[a,i1,a1,i]  
              Taiai[a,i1,a1,i]        *= 0.5  

              execute energy_denominator Taiai[a,i1,a1,i] fock_a fock_a AAAA
              etemp                    = Taiai[a,i1,a1,i]*Vaiai[a,i1,a1,i] 
              esumaa                  += etemp 

           Enddo I
#
        ENDPARDO a, a1, i1   

        sip_barrier 
#
     ENDPROC TRAN_AAII  
#    -----------------
# 
     PROC TRAN_BBJJ  
#    --------------

     PARDO mu, nu, lambda, sigma  
#
           WHERE mu     < nu
           WHERE lambda < sigma

           Get DAOINT[mu,nu,lambda,sigma]
           Do J
  
              V0xxxj[mu,nu,lambda,j] = DAOINT[mu,nu,lambda,sigma]*cb[sigma,j]
              V2xxxj[mu,nu,sigma,j]  = DAOINT[mu,nu,lambda,sigma]*cb[lambda,j]
#
              DO j1 
#
                 Txjxj[mu,j1,lambda,j]      = V0xxxj[mu,nu,lambda,j]*cb[nu,j1]
                 put Vxjxj[mu,j1,lambda,j] += Txjxj[mu,j1,lambda,j]
#
                 T1xjxj[mu,j1,sigma,j]      = V2xxxj[mu,nu,sigma,j]*cb[nu,j1]
                 put Vxjxj[mu,j1,sigma,j]  += T1xjxj[mu,j1,sigma,j]
#
              ENDDO j1  
#
              DO j1
#
                 Txjxj[nu,j1,lambda,j]      = V0xxxj[mu,nu,lambda,j]*cb[mu,j1]
                 put Vxjxj[nu,j1,lambda,j] += Txjxj[nu,j1,lambda,j]
#
                 T1xjxj[nu,j1,sigma,j]      = V2xxxj[mu,nu,sigma,j]*cb[mu,j1]
                 put Vxjxj[nu,j1,sigma,j]  += T1xjxj[nu,j1,sigma,j]
#
              ENDDO j1

           Enddo J
#
     ENDPARDO mu, nu, lambda, sigma  
#
     PARDO mu, nu, lambda, sigma  
#
           WHERE mu     == nu
           WHERE lambda < sigma

           Get DAOINT[mu,nu,lambda,sigma]
           Do J
#
              V0xxxj[mu,nu,lambda,j] = DAOINT[mu,nu,lambda,sigma]*cb[sigma,j]
              V2xxxj[mu,nu,sigma,j]  = DAOINT[mu,nu,lambda,sigma]*cb[lambda,j]
#
              DO j1 
#
                 Txjxj[mu,j1,lambda,j]      = V0xxxj[mu,nu,lambda,j]*cb[nu,j1]
                 put Vxjxj[mu,j1,lambda,j] += Txjxj[mu,j1,lambda,j]
#
                 T1xjxj[mu,j1,sigma,j]      = V2xxxj[mu,nu,sigma,j]*cb[nu,j1]
                 put Vxjxj[mu,j1,sigma,j]  += T1xjxj[mu,j1,sigma,j]
#
              ENDDO j1  
           Enddo J
#
     ENDPARDO mu, nu, lambda, sigma  
#
     PARDO mu, nu, lambda, sigma  
#
           WHERE mu     < nu
           WHERE lambda == sigma

           Get DAOINT[mu,nu,lambda,sigma]
           Do J
#
              V0xxxj[mu,nu,lambda,j] = DAOINT[mu,nu,lambda,sigma]*cb[sigma,j]
#
              DO j1 
#
                 Txjxj[mu,j1,lambda,j]      = V0xxxj[mu,nu,lambda,j]*cb[nu,j1]
                 put Vxjxj[mu,j1,lambda,j] += Txjxj[mu,j1,lambda,j]
#
                 T1xjxj[nu,j1,lambda,j]     = V0xxxj[mu,nu,lambda,j]*cb[mu,j1]
                 put Vxjxj[nu,j1,lambda,j] += T1xjxj[nu,j1,lambda,j]
#
               ENDDO j1
           ENDDo J
#
     ENDPARDO mu, nu, lambda, sigma  
#
     PARDO mu, nu, lambda, sigma  
#
           WHERE mu     == nu
           WHERE lambda == sigma

           Get DAOINT[mu,nu,lambda,sigma]
           Do J
#
              V0xxxj[mu,nu,lambda,j] = DAOINT[mu,nu,lambda,sigma]*cb[sigma,j]
#
              DO j1 
#
                 Txjxj[mu,j1,lambda,j]      = V0xxxj[mu,nu,lambda,j]*cb[nu,j1]
                 put Vxjxj[mu,j1,lambda,j] += Txjxj[mu,j1,lambda,j]
#
               ENDDO j1  
           Enddo J
#
     ENDPARDO mu, nu, lambda, sigma  
#       
     sip_barrier 
#
     PARDO b1, mu, j1  
#
           Do J

           Txjbj[mu,j1,b1,j] = 0.0 
#
           DO lambda  
#
              get                  Vxjxj[mu,j1,lambda,j]
              T1xjbj[mu,j1,b1,j] = Vxjxj[mu,j1,lambda,j]*cb[lambda,b1]  
              Txjbj[mu,j1,b1,j] += T1xjbj[mu,j1,b1,j] 
#
           ENDDO lambda  
#
           DO b 
#
              Tbjbj[b,j1,b1,j]      = Txjbj[mu,j1,b1,j]*cb[mu,b] 
              put Vbjbj[b,j1,b1,j] += Tbjbj[b,j1,b1,j]  
#
           ENDDO b 
           ENDDO j
#
     ENDPARDO b1, mu, j1  
#
     sip_barrier 
#
     PARDO b, b1, j1   

           Do J
#
              get                        Vbjbj[b,j1,b1,j]  
              get                        Vbjbj[b1,j1,b,j]  

              Tbjbj[b,j1,b1,j]         = Vbjbj[b,j1,b1,j]
              T1bjbj[b,j1,b1,j]        = Vbjbj[b1,j1,b,j]
              Tbjbj[b,j1,b1,j]        -= T1bjbj[b,j1,b1,j]  

              Tbjbj[b,j1,b1,j]        *= 0.5  
              execute energy_denominator Tbjbj[b,j1,b1,j] fock_b fock_b BBBB
              etemp                    = Tbjbj[b,j1,b1,j]*Vbjbj[b,j1,b1,j] 
              esumbb                  += etemp 

            Enddo J
#
     ENDPARDO b, b1, j1   
#
     sip_barrier 

#
     ENDPROC TRAN_BBJJ  
#    -----------------

     PROC TRAN_ABIJ  
#    --------------
#
     PARDO mu, nu, lambda, sigma  
#
           WHERE mu     < nu
           WHERE lambda < sigma

           Get DAOINT[mu,nu,lambda,sigma]
           Do J
#
              V0xxxj[mu,nu,lambda,j] = DAOINT[mu,nu,lambda,sigma]*cb[sigma,j]
              V2xxxj[mu,nu,sigma,j]  = DAOINT[mu,nu,lambda,sigma]*cb[lambda,j]
#
              DO i1 
#
                 Txixj[mu,i1,lambda,j]      = V0xxxj[mu,nu,lambda,j]*ca[nu,i1]
                 put Vxixj[mu,i1,lambda,j] += Txixj[mu,i1,lambda,j]
#
                 T1xixj[mu,i1,sigma,j]      = V2xxxj[mu,nu,sigma,j]*ca[nu,i1]
                 put Vxixj[mu,i1,sigma,j]  += T1xixj[mu,i1,sigma,j]
#
              ENDDO i1  
#
              DO i1
#
                 Txixj[nu,i1,lambda,j]      = V0xxxj[mu,nu,lambda,j]*ca[mu,i1]
                 put Vxixj[nu,i1,lambda,j] += Txixj[nu,i1,lambda,j]
#
                 T1xixj[nu,i1,sigma,j]      = V2xxxj[mu,nu,sigma,j]*ca[mu,i1]
                 put Vxixj[nu,i1,sigma,j]  += T1xixj[nu,i1,sigma,j]
#
               ENDDO i1
            Enddo j
#
     ENDPARDO mu, nu, lambda, sigma  
#
     PARDO mu, nu, lambda, sigma  
#
           WHERE mu     == nu
           WHERE lambda < sigma
#
           Get DAOINT[mu,nu,lambda,sigma]
           Do J

              V0xxxj[mu,nu,lambda,j] = DAOINT[mu,nu,lambda,sigma]*cb[sigma,j]
              V2xxxj[mu,nu,sigma,j]  = DAOINT[mu,nu,lambda,sigma]*cb[lambda,j]
#
              DO i1 
#
                 Txixj[mu,i1,lambda,j]      = V0xxxj[mu,nu,lambda,j]*ca[nu,i1]
                 put Vxixj[mu,i1,lambda,j] += Txixj[mu,i1,lambda,j]
#
                 T1xixj[mu,i1,sigma,j]      = V2xxxj[mu,nu,sigma,j]*ca[nu,i1]
                 put Vxixj[mu,i1,sigma,j]  += T1xixj[mu,i1,sigma,j]

              ENDDO i1  
           Enddo J
#
     ENDPARDO mu, nu, lambda, sigma  
#
     PARDO mu, nu, lambda, sigma  
#
           WHERE mu     < nu
           WHERE lambda == sigma

           Get DAOINT[mu,nu,lambda,sigma]
           Do J

              V0xxxj[mu,nu,lambda,j] = DAOINT[mu,nu,lambda,sigma]*cb[sigma,j]
#
              DO i1 
#
                 Txixj[mu,i1,lambda,j]      = V0xxxj[mu,nu,lambda,j]*ca[nu,i1]
                 put Vxixj[mu,i1,lambda,j] += Txixj[mu,i1,lambda,j]
#
                 T1xixj[nu,i1,lambda,j]     = V0xxxj[mu,nu,lambda,j]*ca[mu,i1]
                 put Vxixj[nu,i1,lambda,j] += T1xixj[nu,i1,lambda,j]
#
              ENDDO i1
           ENDDo J
#
     ENDPARDO mu, nu, lambda, sigma  
#
     PARDO mu, nu, lambda, sigma  
#
           WHERE mu     == nu
           WHERE lambda == sigma

           Get DAOINT[mu,nu,lambda,sigma]
           Do J
#
              V0xxxj[mu,nu,lambda,j] = DAOINT[mu,nu,lambda,sigma]*cb[sigma,j]
#
              DO i1 
#
                 Txixj[mu,i1,lambda,j]      = V0xxxj[mu,nu,lambda,j]*ca[nu,i1]
                 put Vxixj[mu,i1,lambda,j] += Txixj[mu,i1,lambda,j]
#
               ENDDO i1  
            Enddo J
#
     ENDPARDO mu, nu, lambda, sigma  
#       
     sip_barrier 
#
     PARDO b1, mu, i1  
#
           Do J

           Txibj[mu,i1,b1,j] = 0.0 
#
           DO lambda  
#
              get                  Vxixj[mu,i1,lambda,j]
              T1xibj[mu,i1,b1,j] = Vxixj[mu,i1,lambda,j]*cb[lambda,b1]  
              Txibj[mu,i1,b1,j] += T1xibj[mu,i1,b1,j] 
#
           ENDDO lambda  
#
           DO a 
#
              Taibj[a,i1,b1,j]      = Txibj[mu,i1,b1,j]*ca[mu,a] 
              put Vaibj[a,i1,b1,j] += Taibj[a,i1,b1,j]  
#
           ENDDO a 

           Enddo J
#
        ENDPARDO b1, mu, i1  
#
        sip_barrier 
#
        PARDO a, b1, i1   
              Do J

              get                        Vaibj[a,i1,b1,j]  
              Taibj[a,i1,b1,j]         = Vaibj[a,i1,b1,j]

              execute energy_denominator Taibj[a,i1,b1,j] fock_a fock_b ABAB
              etemp                    = Taibj[a,i1,b1,j]*Vaibj[a,i1,b1,j] 
              esumab                  += etemp 

              ENDDo J
#
        ENDPARDO a, b1, i1   
#
        sip_barrier 
#
     ENDPROC TRAN_ABIJ  
#    -----------------
#    
# 
     PROC MP2_UHF
#    ------------
#  The main program of UHF-MBPT(2) energies
# 
     ecorraa = 0.0
     ecorrbb = 0.0
     ecorrab = 0.0
     sip_barrier

     collective ecorraa += esumaa  
     collective ecorrbb += esumbb  
     collective ecorrab += esumab  
     sip_barrier

#bgn_dbg
    print "aa, bb, ab MBPT(2) correlation energy contributions"
    print ecorraa 
    print ecorrbb 
    print ecorrab 
#end_dbg
#
     mp2_energy  = ecorraa 
     mp2_energy += ecorrbb 
     mp2_energy += ecorrab 
     totenerg   = mp2_energy + scf_energy

#bgn_dbg
    print ""
    print "Total MBOPT(2) orrelation energy and total energy"
    print mp2_energy
    print totenerg
 
#end_dbg

     mp2_energy  = ecorraa 
     mp2_energy += ecorrbb 
     mp2_energy += ecorrab 
     totenerg    = mp2_energy + scf_energy

     ENDPROC MP2_UHF 
#    ---------------    
#
# ************************************************************************* 
#
#    Main program which performs a two-electron transformation and then
#    a second-order energy calculation. 
#
# ************************************************************************* 
# 
     esumaa = 0.
     esumbb = 0.
     esumab = 0.
     zmax   = 0.0
     imax   = 0.0

     execute compute_int_scratchmem oed_ovl zmax imax

#bgn_debug
      print "reference, the zmax and imax"
      print reference
#end_debug

      sip_barrier
      Restore_persistent ca "ca"
      Restore_persistent cb "cb"
      restore_persistent Fock_a "fock_a"
      restore_persistent Fock_b "fock_b"
      restore_persistent scf_energy "scf_energy"
      sip_barrier
#
# Initialize the 3 scalar varibles to identify the spin combinations. These
# variable are passed into the SIPs to identiy the spin-combinations. This 
# something that will eventually go away when we develop call to identify 
# data type within the SIP. 

      AAAA = 1.0
      BBBB = 2.0
      ABAB = 3.0

      CALL GET_2EL_INTS 
      CALL TRAN_AAII 
      CALL TRAN_BBJJ  
      CALL TRAN_ABIJ  
#
      CALL MP2_UHF
 
      print " "
      print scf_energy
      print mp2_energy
      print totenerg
#
      set_persistent ca "ca"
      set_persistent cb "cb"
      set_persistent Fock_a "fock_a"
      set_persistent Fock_b "fock_b"
      set_persistent scf_energy "scf_energy"
      set_persistent totenerg "totenerg"
      sip_barrier 

# 
     ENDSIAL MBPT2_UHF
#----------------------------------------------------------------------------
