import "mcpt2_defs.sialx" 
import "mcpt2_vars.sialx"
import "tran_frag.sialx"
import "mcpt2_singles.sialx"
import "mcpt2_doubles.sialx"
import "mcpt2_util.sialx"
#
                           SIAL FRAG_2ORDER_CORR 
# 
# -----------------------------------------------------------------------------
# 
PROC FORM_JFRAG_HBAR
    server_barrier

#do ifrag
#where ifrag == 1

    PARDO ifrag, jfrag, i, i1, b, j "Frag{NR1ij}{oo}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwOccA_frag[(index)i] == ifrag
    where (int)SwOccA_frag[(index)i1] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag
	get Viaii[j,b,i,i1]
	get t1old[b,j]

	tpp[i,i1] = t1old[b,j]*Viaii[j,b,i,i1]
 	#tpp[i,i1] *= -1.0

	put HBAR_ii[i,i1] += tpp[i,i1]

    ENDPARDO ifrag, jfrag, i, i1, b, j

    PARDO ifrag, jfrag, i, i1, b, j "Frag{NR1ij}{oo}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwOccA_frag[(index)i] == ifrag
    where (int)SwOccA_frag[(index)i1] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag
	do a1
	    where (int)SwVirtA_frag[(index)a1] == ifrag

	    get Vaibj[a1,i1,b,j]
	    get T2old[a1,i,b,j]
	    tpp[i,i1] = T2old[a1,i,b,j]*Vaibj[a1,i1,b,j]
	    #tpp[i,i1] *= -1.0
	    put HBAR_ii[i,i1] += tpp[i,i1]

	enddo a1

    ENDPARDO ifrag, jfrag, i, i1, b, j

    PARDO ifrag, jfrag, a, a1, b, j "Frag{NR1ij}{vv}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwVirtA_frag[(index)a] == ifrag
    where (int)SwVirtA_frag[(index)a1] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag
	get Vaaai[a,a1,b,j]
	get t1old[b,j]
	tpp[a,a1] = Vaaai[a,a1,b,j]*t1old[b,j]
	    #tpp[a,a1] *= -1.0
	put HBAR_aa[a,a1] += tpp[a,a1]

    ENDPARDO ifrag, jfrag, a, a1, b, j

    PARDO ifrag, jfrag, a, a1, b, j "Frag{NR1ij}{vv}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwVirtA_frag[(index)a] == ifrag
    where (int)SwVirtA_frag[(index)a1] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag
	do i
	where (int)SwOccA_frag[(index)i] == ifrag

	    get Vaibj[a1,i,b,j]
	    get T2old[a,i,b,j]

	    tpp[a,a1] = T2old[a,i,b,j]*Vaibj[a1,i,b,j] 
	    #tpp[a,a1] *= -1.0
            
	    put HBAR_aa[a,a1] += tpp[a,a1]

	enddo i

    ENDPARDO ifrag, jfrag, a, a1, b, j

    PARDO ifrag, jfrag, a, i, b, j "Frag{NR1ij}{vo}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwVirtA_frag[(index)a] == ifrag
    where (int)SwOccA_frag[(index)i] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag
	get Vaibj[a,i,b,j]
	get t1old[b,j]

	tpp[i,a] = Vaibj[a,i,b,j]*t1old[b,j]
	put HBAR_ia[i,a] += tpp[i,a]

    ENDPARDO ifrag, jfrag, a, i, b, j

    PARDO ifrag, jfrag, a, i, b, j "Frag{NR1ij}{vo}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwVirtA_frag[(index)a] == ifrag
    where (int)SwOccA_frag[(index)i] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag

	get Vaibj[a,i,b,j]

	do a1
	where (int)SwVirtA_frag[(index)a1] == ifrag
	do i1
	where (int)SwOccA_frag[(index)i1] == ifrag
	    get T2old[a1,i1,b,j]

	    Tppqq[i1,a1,a,i] = T2old[a1,i1,b,j]*Vaibj[a,i,b,j]

	    put HBAR_AJIB[i1,a1,a,i] += Tppqq[i1,a1,a,i]

	enddo i1
	enddo a1

    ENDPARDO ifrag, jfrag, a, i, b, j

    PARDO ifrag, jfrag, a, i, b, j "Frag{NR1ij}{vo}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwVirtA_frag[(index)a] == ifrag
    where (int)SwOccA_frag[(index)i] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag
	get T2old[a,i,b,j]

	do i1
	where (int)SwOccA_frag[(index)i1] == ifrag
	do i2
	where (int)SwOccA_frag[(index)i2] == ifrag

	get Viaii[j,b,i1,i2]
	T1ppqq[i1,i2,b,j] = Viaii[j,b,i1,i2]

	Tppqq[i1,i2,a,i] = T1ppqq[i1,i2,b,j]*T2old[a,i,b,j]
#	Tppqq[i1,i2,a,i] += -1.0

	put HBAR_IAJK[i1,i2,a,i] += Tppqq[i1,i2,a,i]

	enddo i2
	enddo i1

    ENDPARDO ifrag, jfrag, a, i, b, j

    PARDO ifrag, jfrag, a, i, b, j "Frag{NR1ij}{vo}{vo}"
    where ifrag == 1
    where jfrag > 1
    where (int)rcut_dist[ifrag,jfrag] == ifrag
    where (int)SwVirtA_frag[(index)a] == ifrag
    where (int)SwOccA_frag[(index)i] == ifrag
    where (int)SwVirtA_frag[(index)b] == jfrag
    where (int)SwOccA_frag[(index)j] == jfrag
	get T2old[a,i,b,j]

	do a1
	where (int)SwVirtA_frag[(index)a1] == ifrag
	do a2
	where (int)SwVirtA_frag[(index)a2] == ifrag

	get Vaaai[a1,a2,b,j]

	Tppqq[a1,a2,a,i] = Vaaai[a1,a2,b,j]*T2old[a,i,b,j]

	put HBAR_ABCI[a1,a2,a,i] += Tppqq[a1,a2,a,i]

	enddo a2
	enddo a1

    ENDPARDO ifrag, jfrag, a, i, b, j

###
#enddo ifrag

    server_barrier
ENDPROC FORM_JFRAG_HBAR
#
      PROC IGUESS   
#     ----------- 
#
#     Get memory requirements from integral calculation 
#     ------------------------------------------------- 
      print "Starting scratch memory calculation" 
      imax = 0.0  
      zmax = 0.0  
      execute compute_int_scratchmem_lowmem zmax imax 
      sip_barrier 
      print "Done computing scratch memory" 
#
      sip_barrier 
      allocate contiguous scr_1[1:max_aoseg,1:max_aoseg]
      allocate contiguous scr_2[1:max_aoseg,1:max_aoseg]
      allocate contiguous scr_3[1:max_aoseg,1:max_aoseg]
      allocate contiguous scr_4[1:max_aoseg,1:max_aoseg]
      allocate contiguous scr_5[1:max_aoseg,1:max_aoseg]
      sip_barrier 

    PARDO katom  
	icount = (scalar)katom

#	print icount # etemp 

	print "Starting computing fragment scf" 
	execute scf_atom_lowmem icount scr_1[1:max_aoseg,1:max_aoseg] scr_2[1:max_aoseg,1:max_aoseg] scr_3[1:max_aoseg,1:max_aoseg] scr_4[1:max_aoseg,1:max_aoseg]
	print "Done computing fragment scf" 
#
# Nowput the coefficients and fock matrices into the full distributed arrays 

	stype = 1.0 # HF coefficients  
	DO mu
	where (int)SwAO_frag[(index)mu] == katom
	    DO a
	    where (int)SwVirtA_frag[(index)a] == katom
		txp[mu,a]      = 0.0  
		execute place_scratch txp[mu,a]  scr_1[1:max_aoseg,1:max_aoseg] stype icount 
		PUT DCa[mu,a] += txp[mu,a]
	    ENDDO a
	    DO i
	    where (int)SwOccA_frag[(index)i] == katom
		txp[mu,i]      = 0.0  
		execute place_scratch txp[mu,i]  scr_1[1:max_aoseg,1:max_aoseg] stype icount  
		PUT DCa[mu,i] += txp[mu,i]
	    ENDDO i
	ENDDO mu
	print "Done placing coefficients"

	stype = 2.0 # Fock matrix  
	DO a   
	where (int)SwVirtA_frag[(index)a] == katom
	    DO a1
	    where (int)SwVirtA_frag[(index)a1] == katom
		tpp[a,a1]          = 0.0  
		execute place_scratch tpp[a,a1]  scr_3[1:max_aoseg,1:max_aoseg] stype icount 
		PUT Dfock_a[a,a1] += tpp[a,a1] 
	    ENDDO a1
	    DO i1
	    where (int)SwOccA_frag[(index)i1] == katom
		tpp[a,i1]          = 0.0  
		execute place_scratch tpp[a,i1]  scr_3[1:max_aoseg,1:max_aoseg] stype icount 
		PUT Dfock_a[a,i1] += tpp[a,i1] 
	    ENDDO i1
	ENDDO a   

	DO i   
	where (int)SwOccA_frag[(index)i] == katom
	    DO i1
	    where (int)SwOccA_frag[(index)i1] == katom
		tpp[i,i1]          = 0.0  
		execute place_scratch tpp[i,i1]  scr_3[1:max_aoseg,1:max_aoseg] stype icount 
		PUT Dfock_a[i,i1] += tpp[i,i1]
	    ENDDO i1
	    DO a1
	    where (int)SwVirtA_frag[(index)a1] == katom
		tpp[i,a1]          = 0.0  
		execute place_scratch tpp[i,a1]  scr_3[1:max_aoseg,1:max_aoseg] stype icount 
		PUT Dfock_a[i,a1] += tpp[i,a1]
	    ENDDO a1
	ENDDO i

	print "Done placing fock_matrix"

    ENDPARDO katom   
      sip_barrier 
      deallocate contiguous scr_1[1:max_aoseg,1:max_aoseg]
      deallocate contiguous scr_2[1:max_aoseg,1:max_aoseg]
      deallocate contiguous scr_3[1:max_aoseg,1:max_aoseg]
      deallocate contiguous scr_4[1:max_aoseg,1:max_aoseg]
      deallocate contiguous scr_5[1:max_aoseg,1:max_aoseg]
      sip_barrier 

      print "Placing HF coefficients on nodes"
      DO p 
         Sx3[p] = 1.0 
      ENDDO p  

      DO p 
         t3[p] = 0.0 
      DO p1 
         if p == p1 
            GET Dfock_a[p,p1] 
#        execute print_block Dfock_a(p,p1)  
            t3_1[p] = Dfock_a[p,p1]*Sx3[p1] 
            t3[p] += t3_1[p] 
         endif 
      ENDDO p1 
         fock_a[p] = t3[p] 
      ENDDO p 

      DO p 
         t3[p] = fock_a[p] 
      ENDDO p 

      DO ifrag

         DO mu
         where (int)SwAO_frag[(index)mu] == ifrag
            DO a 
            where (int)SwVirtA_frag[(index)a] == ifrag
                  GET        Dca[mu,a] 
                  ca[mu,a] = Dca[mu,a] 
            ENDDO a 
            DO i 
            where (int)SwOccA_frag[(index)i] == ifrag
                  GET        Dca[mu,i] 
                  ca[mu,i] = Dca[mu,i] 
            ENDDO i 
         ENDDO mu  

      ENDDO ifrag

      sip_barrier
#
      ENDPROC IGUESS   

#
# ---------------------------------------------------------------------------- 
#
#
# -----------------------------------------------------------------------------
# 
#     START OF MAIN PROGRAM  
#
# -----------------------------------------------------------------------------

print " "
print "-- Second-Order Molecular Cluster Perturbation Theory"
print "-- J. Comp. Chem. 2001, 22, 1574-1589"
print "-- Written by Victor Lotrich and Jason N. Byrd"
print " "

# 
#     Set fragment parameters   
#     ----------------------- 
#
# Restore the persistent arrays. 
     #create DCa 
     #create DFock_a
     #execute enable_all_rank_print
      sip_barrier
#      restore_persistent Dca "ca" 
#      set_persistent Dca "ca" 
#      restore_persistent DFock_a "fock_a"
#      set_persistent DFock_a "fock_a"
      rmaster = 0
      allocate sp[*] 
      zero = 0.0 
      one  = 1.0 
      print r_thresh 
      print elst_thresh 
      mone = -1.0 
      print cc_conv 
      sip_barrier
#
      CALL SET_FRAG_PARMS   
      sip_barrier 
      print "Done setting fragment parameters" 
      print "Performing monomer SCF"
      call IGUESS
      sip_barrier 


#     Compute the NN repusion between fragments  
#     ----------------------------------------- 
      nn_rep = 0.0 
      execute compute_nn_repulsion nn_rep
      print nn_rep 
#
#     Perform 2-el integral transformation and calculate second order energies   
#     ------------------------------------------------------------------------ 
#
      sip_barrier 
      CALL FRAG_TRAN 
      sip_barrier 
      print "Done two-electron integral transformation" 
#
#     Form the electrostatic potential(complete) of all fragments  
#     ----------------------------------------------------------- 
#
      CALL REFORM_WC
      CALL FORM_ELSTPOT 
      sip_barrier 
      print "Done forming electrostatic potential" 
# Now we will compute the Hartree-Fock exchange energy 
# Compute the exchange and polarization energies 
      CALL OVERLAP_TRANS 
      print "Done transforming overlap" 
#
#     Form the density based exchange energy  
#     -------------------------------------- 
#
      CALL EXCHANGE_ALT
      print "Done forming density based exchange energy" 
#
#     Compute the CCPT(2) dimer_doubles amplitudes for Fragment 1.  
#     ------------------------------------------------------ 
#
      CALL FORM_T10
      sip_barrier 
      CALL FORM_T1
      sip_barrier 
      print "Completely Done singles formation" 
      print e1x_at 
      print e10pol_at 
      print eps1_pol  
      print singles  
      sip_barrier 
#
#     Compute the CCPT(2) dimer_doubles amplitudes for Fragment 1.  
#     ------------------------------------------------------ 
      CALL FORM_T2_0GUESS 
      sip_barrier 
      print "Done forming T2_0guess" 
#
# Start macro-iterations 
      DO jiter 
         sip_barrier 
	 print "Macro iteration"
	 print jiter

         PARDO ifrag 
           GET                   e20c[ifrag] 
           PUT e2_macro[ifrag] = e20c[ifrag] 
         ENDPARDO ifrag  

         sip_barrier 
         CALL FORM_T2_GUESS 
         sip_barrier 
	 print "Entering FORM_T2_FRAGMENT_ITERS"
         CALL FORM_T2_FRAGMENT_ITERS 
         sip_barrier 
	 print "Entering FORM_T2_DIMER_ITERS"
         CALL FORM_T2_DIMER_ITERS 
         print "Done forming T2 Dimer calculation" 
         esum = 0.0 
         sip_barrier 
# Print out energies after each macroiteration  
         execute get_my_rank rank
         if rank == 0.0
         print "MCPT(2) monomer macro-iteration energies"
	 fragment_doubles = 0.0
         DO ifrag
            allocate contiguous macro_e20[ifrag:ifrag]
            GET                 e20c[ifrag] 
            macro_e20[ifrag:ifrag]  = e20c[ifrag] 
            print macro_e20[ifrag:ifrag] 
            etemp = e20c[ifrag] 
            fragment_doubles += etemp 
            deallocate contiguous macro_e20[ifrag:ifrag]
         ENDDO ifrag   

         print "MCPT(2) dimer macro-iteration energies"
	 do ifrag
	 do jfrag
	     WHERE jfrag > ifrag 
	     where (int)rcut_dist[ifrag,jfrag] == ifrag
	     icount = (scalar)ifrag
	     jcount = (scalar)jfrag

		 allocate contiguous macro_d20[ifrag:ifrag,jfrag:jfrag]
		 get d20c[ifrag,jfrag]
		 macro_d20[ifrag:ifrag,jfrag:jfrag] = d20c[ifrag,jfrag]
		 print macro_d20[ifrag:ifrag,jfrag:jfrag]
		 deallocate contiguous macro_d20[ifrag:ifrag,jfrag:jfrag]
	 enddo jfrag
	 enddo ifrag
         endif
         sip_barrier 

# Determine if full macro convergence is met 
         do_iter = 0.0 
         DO ifrag 
           GET          e20c[ifrag] 
           GET          e2_macro[ifrag] 
           tp[ifrag]  = e20c[ifrag]  
           tp[ifrag] -= e2_macro[ifrag]  
           execute return_sval tp[ifrag] etemp  
           if etemp < zero 
              etemp *= -1.0 
           endif 
           IF etemp > cc_conv 
              do_iter = 2.0 
           ENDIF 
         ENDDO ifrag 
         print etemp 
         sip_barrier 
         if do_iter < 1.0 
            exit 
         endif 
#
      ENDDO jiter 
      sip_barrier
#
      CALL FORM_T2_MONOMER  
      sip_barrier
#
      eint_tot  = 0.0 
      eint_tot += e1x_at  
      eint_tot += e10pol_at  
      eint_tot += eps1_pol   
      eint_tot += singles  
      eint_tot += dimer_doubles  
      eint_tot += fragment_doubles  
      eint_tot += mono_lccd   

      print e1x_at 
      print e10pol_at 
      print eps1_pol  
      print singles  
      print dimer_doubles  
      print fragment_doubles  
      print mono_lccd  

      print eint_tot 

##
## Form the new energy
##
#
#print "starting additional transformations"
#call ADDITIONAL_FRAG_TRAN
#print "Finished additional transformations"
#print "Forming HBAR elements"
#call FORM_JFRAG_HBAR
#print "done forming HBAR elements"
#
#server_barrier
#do ifrag
#where ifrag == 1
#
#    pardo fa, fi
#        get t1old[fa,fi]
#	get wC[fa,fi]
#
#	tai[fa,fi] = t1old[fa,fi]
#	t1ai[fa,fi] = wC[fa,fi]
#
#	put FT1old[fa,fi] = tai[fa,fi]
#	put FwC[fa,fi] = t1ai[fa,fi]
#
#    endpardo fa, fi
#
#    pardo fa, fi, fa1, fi1
#
#        get T2old[fa,fi,fa1,fi1]
#
#	t1ppqq[fa,fi,fa1,fi1] = T2old[fa,fi,fa1,fi1]
#
#	put FT2old[fa,fi,fa1,fi1] = t1ppqq[fa,fi,fa1,fi1]
#	
#    endpardo fa, fi, fa1, fi1
#
#    pardo fmu, fi
#    print  ca[fmu,fi]
#       put Fca_o[fmu,fi] = ca[fmu,fi]
#    endpardo fmu, fi
#
#    pardo fmu, fa
#    print ca[fmu,fa]
#       put Fca_v[fmu,fa] = ca[fmu,fa]
#    endpardo fmu, fa
#
#    pardo fi, fi1
#        get Dfock_a[fi,fi1]
##	GET         wC[fi,fi1]
#	Tpp[fi,fi1] = Dfock_a[fi,fi1]
##	Tpp[fi,fi1] += wC[fi,fi1]
#        put FFock_oo[fi,fi1] = Tpp[fi,fi1]
#    endpardo fi, fi1
#
#    pardo fa, fa1
#        get Dfock_a[fa,fa1]
##	GET         wC[fa,fa1]
#	Tpp[fa,fa1] = Dfock_a[fa,fa1]
##	Tpp[fa,fa1] += wC[fa,fa1]
#        put FFock_vv[fa,fa1] = Tpp[fa,fa1]
#    endpardo fa, fa1
#
#esum1 = 0.0
#esum2 = 0.0
#    server_barrier
#
#      PARDO fa, fi, fa1, fi1 
#
#               GET                T2old[fa,fi,fa1,fi1]
#               GET                Vaibj[fa,fi,fa1,fi1]
#               GET                Vaibj[fa,fi1,fa1,fi]
#
#               t1ppqq[fa,fi,fa1,fi1] = Vaibj[fa,fi,fa1,fi1]
#               t3ppqq[fa,fi1,fa1,fi] = Vaibj[fa,fi1,fa1,fi]
#               t2ppqq[fa,fi,fa1,fi1] = t3ppqq[fa,fi1,fa1,fi]
#               t1ppqq[fa,fi,fa1,fi1]*= 2.0
#               t1ppqq[fa,fi,fa1,fi1]-= t2ppqq[fa,fi,fa1,fi1]
#
#               etemp = T2old[fa,fi,fa1,fi1]*t1ppqq[fa,fi,fa1,fi1]
#
#               esum2 += etemp
#
#      ENDPARDO fa, fi, fa1, fi1
#
#      PARDO fa, fi
#
#               GET        FT1old[fa,fi] 
#               GET        FwC[fa,fi] 
#               tai[fa,fi] = FT1old[fa,fi] 
#
#               etemp = tai[fa,fi]*FwC[fa,fi]  
#               etemp*= 2.0  
#
#	       esum1 += etemp
#
#      ENDPARDO fa, fi
#
#server_barrier
#e1new = 0.0
#e2new = 0.0
#collective e1new += esum1
#collective e2new += esum2
#print ifrag
#print e1new
#print e2new
#
#enddo ifrag
#
#server_barrier
#set_persistent FwC "MOI_wC"
#set_persistent FT1old "MOI_T1"
#set_persistent FT2old "MOI_T2ab"
#set_persistent FFock_oo "MOI_Fock_oo"
#set_persistent FFock_vv "MOI_Fock_vv"
#set_persistent Fca_o "MOI_Ca_o"
#set_persistent Fca_v "MOI_Ca_v"
#set_persistent HBAR_ii "MOI_HBAR_ii"
#set_persistent HBAR_aa "MOI_HBAR_aa"
#set_persistent HBAR_ia "MOI_HBAR_ia"
#set_persistent HBAR_AJIB "MOI_HBAR_ajib"
#set_persistent HBAR_IAJK "MOI_HBAR_iajk"
#set_persistent HBAR_ABCI "MOI_HBAR_abci"

         sip_barrier 
                           ENDSIAL FRAG_2ORDER_CORR 
##
################################################################################
