import "ccsdgrad_uhf_defs.sialx"
import "ccsd_2grad_uhf_vars.sialx"
#
#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                    SIAL CCSD_2GRAD_UHF
#                   -------------------
#
# This SIAL program computes the one and two particle density 
# matrices. It is functional and debugged. This code backtransforms 
# the two particle density matrix so that only it need be stored.   
#
      PROC READ_2EL
#     -------------

     restore_persistent  ca "ca"
     restore_persistent  cb "cb"
     restore_persistent  fock_a "fock_a"
     restore_persistent  fock_b "fock_b"
     restore_persistent  t1a_old  "t1a_old"
     restore_persistent  t1b_old  "t1b_old"
     restore_persistent  T2old_aa "T2old_aa"
     restore_persistent  T2old_ab "T2old_ab"
     restore_persistent  T2old_bb "T2old_bb"
     restore_persistent  l1a_old  "l1a_old"
     restore_persistent  l1b_old  "l1b_old"
     restore_persistent  L2old_aa "L2old_aa"
     restore_persistent  L2old_ab "L2old_ab"
     restore_persistent  L2old_bb "L2old_bb"
     restore_persistent  Doldai_a "Doldai_a"
     restore_persistent  Doldai_b "Doldai_b"
     restore_persistent  D_gradient "D_gradient"
     server_barrier

     ENDPROC READ_2EL
#    ----------------

      PROC TAUAA
#     ----------
#
      PARDO a, i, a1, i1
#
            REQUEST T2old_aa[a,i,a1,i1] 
#
            GET t1a_old[a1,i1]
            GET t1a_old[a1,i]
            GET t1a_old[a,i1]
            GET t1a_old[a,i]
#
            tai[a1,i1] = t1a_old[a1,i1]
            tmp1_aiai[a,i,a1,i1]  = t1a_old[a,i]^tai[a1,i1]
            tai[a1,i] = t1a_old[a1,i]
            tmp2_aiai[a,i,a1,i1]  = t1a_old[a,i1]^tai[a1,i]
#
            tmp1_aiai[a,i,a1,i1] += T2old_aa[a,i,a1,i1]
            tmp1_aiai[a,i,a1,i1] -= tmp2_aiai[a,i,a1,i1]
            PREPARE Tau_aa[a,i,a1,i1] = tmp1_aiai[a,i,a1,i1]
#
      ENDPARDO a, i, a1, i1
#
      ENDPROC TAUAA
#
      PROC TAUBB
#     ----------
#
      PARDO b, j, b1, j1
#
            REQUEST T2old_bb[b,j,b1,j1] 
            GET t1b_old[b1,j1]
            GET t1b_old[b1,j]
            GET t1b_old[b,j1]
            GET t1b_old[b,j]
#
            tbj[b1,j1] = t1b_old[b1,j1]
            tmp1_bjbj[b,j,b1,j1]  = t1b_old[b,j]^tbj[b1,j1]
            tbj[b1,j] = t1b_old[b1,j]
            tmp2_bjbj[b,j,b1,j1]  = t1b_old[b,j1]^tbj[b1,j]
#
            tmp1_bjbj[b,j,b1,j1] += T2old_bb[b,j,b1,j1]
            tmp1_bjbj[b,j,b1,j1] -= tmp2_bjbj[b,j,b1,j1]
            PREPARE Tau_bb[b,j,b1,j1] = tmp1_bjbj[b,j,b1,j1]
#
      ENDPARDO b, j, b1, j1
#
      ENDPROC TAUBB
#
      PROC TAUAB
#     ----------
#
      PARDO a, i, b, j
#
            REQUEST T2old_ab[a,i,b,j] 
            GET t1a_old[a,i]
            GET t1b_old[b,j]
#
            tmp1_aibj[a,i,b,j]  = t1a_old[a,i]^t1b_old[b,j]
#
            tmp1_aibj[a,i,b,j] += T2old_ab[a,i,b,j]
            PREPARE Tau_ab[a,i,b,j] = tmp1_aibj[a,i,b,j]
#
      ENDPARDO a, i, b, j
#
      ENDPROC TAUAB
#
      PROC TAU
#     --------
#
           CALL TAUAA
           CALL TAUBB
           CALL TAUAB
#
      ENDPROC TAU
#     -----------
#
      PROC GAEA
#     ---------
#
      PARDO a, a1
#
            Taa[a,a1] = 0.0
#
            DO i1
            DO i
            DO a2
#
               REQUEST T2old_aa[a1,i1,a2,i] 
               REQUEST L2old_aa[i1,a,i,a2] 
#
               T1aa[a,a1] = L2old_aa[i1,a,i,a2]*T2old_aa[a1,i1,a2,i]
               T1aa[a,a1] *= 0.5
               Taa[a,a1] -= T1aa[a,a1]
#
            ENDDO a2
            ENDDO i
            ENDDO i1
#
            DO i
            DO j
            DO b
#
               REQUEST T2old_ab[a1,i,b,j]  
               REQUEST L2old_ab[i,a,j,b]   
#
               T1aa[a,a1] = L2old_ab[i,a,j,b]*T2old_ab[a1,i,b,j]
               Taa[a,a1] -= T1aa[a,a1]
#
            ENDDO b
            ENDDO j
            ENDDO i
#
            PUT Gae_a[a,a1] += Taa[a,a1]
#
      ENDPARDO a, a1
#
      ENDPROC GAEA
#     ------------
#
      PROC GAEB
#     ---------
#
      PARDO b, b1
#
            Tbb[b,b1] = 0.0
#
            DO j
            DO j1
            DO b2
#
               REQUEST T2old_bb[b1,j,b2,j1] 
               REQUEST L2old_bb[j,b,j1,b2]   
#
               T1bb[b,b1] = L2old_bb[j,b,j1,b2]*T2old_bb[b1,j,b2,j1]
               T1bb[b,b1] *= 0.5
               Tbb[b,b1] -= T1bb[b,b1]
#
            ENDDO b2
            ENDDO j1
            ENDDO j
#
#
            DO j
            DO i
            DO a
#
               REQUEST T2old_ab[a,i,b1,j] 
               REQUEST L2old_ab[i,a,j,b]   
#
               T1bb[b,b1] = L2old_ab[i,a,j,b]*T2old_ab[a,i,b1,j]
               Tbb[b,b1] -= T1bb[b,b1]
#
            ENDDO a
            ENDDO i
            ENDDO j
#
            PUT Gae_b[b,b1] += Tbb[b,b1]
#
      ENDPARDO b, b1
#
      ENDPROC GAEB
#     ------------
#
      PROC GAE
#     --------
         CALL GAEA
         CALL GAEB
      ENDPROC GAE
#     -----------
#
      PROC GMIA
#     ---------
#
      PARDO i1, i
#
            Gmi_a[i1,i] = 0.0
#
      ENDPARDO i1, i
      sip_barrier 
#
      PARDO a, a1, i, i1
#
            DO i2
#
               REQUEST T2old_aa[a,i1,a1,i2] 
               REQUEST L2old_aa[i,a,i2,a1]   
#
               Tii[i1,i]  = T2old_aa[a,i1,a1,i2]*L2old_aa[i,a,i2,a1]
               Tii[i1,i] *= 0.5
               PUT Gmi_a[i1,i] += Tii[i1,i]
#
            ENDDO i2
#
      ENDPARDO a, a1, i, i1
#
      PARDO a, b, i, j
#
            DO i1
#
               REQUEST T2old_ab[a,i1,b,j]  
               REQUEST L2old_ab[i,a,j,b]   
#
               Tii[i1,i] = T2old_ab[a,i1,b,j]*L2old_ab[i,a,j,b]
               PUT Gmi_a[i1,i] += Tii[i1,i]
#
            ENDDO i1
#
      ENDPARDO a, b, i, j
#
      ENDPROC GMIA
#     ------------
#
      PROC GMIB
#     ---------
#
      PARDO j1, j
#
            Gmi_b[j1,j] = 0.0
#
      ENDPARDO j1, j
      sip_barrier 
#
      PARDO b, b1, j, j1
#
            DO j2
#
               REQUEST T2old_bb[b,j1,b1,j2]  
               REQUEST L2old_bb[j,b,j2,b1]  
#
               Tjj[j1,j]  = T2old_bb[b,j1,b1,j2]*L2old_bb[j,b,j2,b1]
               Tjj[j1,j] *= 0.5
               PUT Gmi_b[j1,j] += Tjj[j1,j]
#
            ENDDO j2
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            DO j1
#
               REQUEST T2old_ab[a,i,b,j1] 
               REQUEST L2old_ab[i,a,j,b]  
#
               Tjj[j1,j] = T2old_ab[a,i,b,j1]*L2old_ab[i,a,j,b]
               PUT Gmi_b[j1,j] += Tjj[j1,j]
#
            ENDDO j1
#
      ENDPARDO b, a, j, i
#
      ENDPROC GMIB
#     ------------
#
      PROC GMI
#     --------
         CALL GMIA
         CALL GMIB
      ENDPROC GMI
#     -----------
#
# --------------------------------------------------------------------------- 
#
# In this PROCEDURE the D^{ij}_{ab} block of the two-particle 
# density matrix is formed. Only the AA spin case is considered.  
#
# --------------------------------------------------------------------------- 
#
      PROC DIJABAA 
#     ------------- 
#
# First form one-particle intermediates 
#
# --------------------------------------------------------------------------- 
#
# Dim(i,m) = Gmi_a(i,m) + l1a_old(m,e)*t1a_old(e,i)  
#
# Dea(e,a) = Gae_a(e,a) - l1a_old(m,e)*t1a_old(a,m) 
#
# --------------------------------------------------------------------------- 
#
# Dii 
# ---  
#
      PARDO i, i1 
#
            GET Gmi_a[i,i1] 
            PUT Dii[i,i1] += Gmi_a[i,i1] 
#
      ENDPARDO i, i1 
#
      PARDO i, i1, a       
#
            GET l1a_old[i1,a] 
            GET t1a_old[a,i] 
            Tii[i,i1]      = l1a_old[i1,a]*t1a_old[a,i] 
            PUT Dii[i,i1] += Tii[i,i1] 
#
      ENDPARDO i, i1, a       
#
# Daa 
# --- 
#
      PARDO a1, a 
#
            GET Gae_a[a1,a] 
            PUT Daa[a1,a] += Gae_a[a1,a] 
#
      ENDPARDO a1, a 
#
      PARDO a1, a, i 
#
            GET l1a_old[i,a1] 
            GET t1a_old[a,i] 
            Taa[a1,a]      = t1a_old[a,i]*l1a_old[i,a1] 
            Taa[a1,a]     *= -1.0  
            PUT Daa[a1,a] += Taa[a1,a] 
#
      ENDPARDO a1, a, i  
#
      sip_barrier   
#
# Done one-particle intermediates 
# ------------------------------- 
#
# Terms 1-5 in Eq. 33 
# ------------------- 
#
      PARDO a, a1, i, i1 
#
            REQUEST Tau_aa[a,i,a1,i1]   
            REQUEST L2old_aa[i,a,i1,a1]   
#
            Tiiaa[i,i1,a,a1]  = Tau_aa[a,i,a1,i1] 
            T1iiaa[i,i1,a,a1] = L2old_aa[i,a,i1,a1] 
            Tiiaa[i,i1,a,a1] += T1iiaa[i,i1,a,a1] 
            Tiiaa[i,i1,a,a1] *= 0.125  
#
            DO i2 
#
               REQUEST Tau_aa[a,i2,a1,i]  
               REQUEST Tau_aa[a,i2,a1,i1]   
               GET Dii[i1,i2] 
               GET Dii[i,i2] 
#
               T1iiaa[i,i1,a,a1] = Tau_aa[a,i2,a1,i]*Dii[i1,i2] 
               T1iiaa[i,i1,a,a1]*= 0.125 
               Tiiaa[i,i1,a,a1] += T1iiaa[i,i1,a,a1] 
#
               T1iiaa[i,i1,a,a1] = Tau_aa[a,i2,a1,i1]*Dii[i,i2] 
               T1iiaa[i,i1,a,a1]*= -0.125 
               Tiiaa[i,i1,a,a1] += T1iiaa[i,i1,a,a1] 
#
               DO i3 
#
                  REQUEST Tau_aa[a,i2,a1,i3]    
                  REQUEST Vijmn_aaaa[i,i1,i2,i3] 
                  T2iiaa[i2,i3,a,a1]  = Tau_aa[a,i2,a1,i3]
#
                  T1iiaa[i,i1,a,a1]  = Vijmn_aaaa[i,i1,i2,i3]*T2iiaa[i2,i3,a,a1]
                  T1iiaa[i,i1,a,a1] *= 0.0625
                  Tiiaa[i,i1,a,a1]  += T1iiaa[i,i1,a,a1]
#
               ENDDO i3 
#
            ENDDO i2 
#            
            DO a2 
#
               REQUEST Tau_aa[a2,i,a1,i1] 
               REQUEST Tau_aa[a2,i,a,i1]  
               GET Daa[a2,a] 
               GET Daa[a2,a1] 
#
               T1iiaa[i,i1,a,a1] = Tau_aa[a2,i,a1,i1]*Daa[a2,a] 
               T1iiaa[i,i1,a,a1]*= 0.125 
               Tiiaa[i,i1,a,a1] += T1iiaa[i,i1,a,a1] 
#
               T1iiaa[i,i1,a,a1] = Tau_aa[a2,i,a,i1]*Daa[a2,a1] 
               T1iiaa[i,i1,a,a1]*= -0.125 
               Tiiaa[i,i1,a,a1] += T1iiaa[i,i1,a,a1] 
#
            ENDDO a2 
#            
            PREPARE Dijab_aa[i,i1,a,a1] += Tiiaa[i,i1,a,a1] 
#
      ENDPARDO a, a1, i, i1 
#
# Final term in Eq. 33 
# -------------------- 
#
      pardo a1,a2
            put L1aa[a1,a2] = 0.0
      endpardo a1,a2
      sip_barrier 
#
      PARDO a1, a2, i   
#
            GET l1a_old[i,a2] 
            GET t1a_old[a1,i] 
            Taa[a1,a2]  = t1a_old[a1,i]*l1a_old[i,a2] 
            PUT L1aa[a1,a2] += Taa[a1,a2]
#
      ENDPARDO a1, a2, i  

      PARDO a1, a2, i      
#
            GET t1a_old[a2,i] 
            GET L1aa[a1,a2] 
            Tai[a1,i]  = L1aa[a1,a2]*t1a_old[a2,i] 
            PUT L1ai[a1,i] += Tai[a1,i] 
#
      ENDPARDO a1, a2, i    
      sip_barrier 
#
      PARDO a, a1, i, i1  
#
            GET t1a_old[a,i] 
            GET L1ai[a1,i1] 
#
            Tiiaa[i,i1,a,a1]         = t1a_old[a,i]^L1ai[a1,i1] 
            Tiiaa[i,i1,a,a1]        *= 0.375 
            PREPARE Dijab_aa[i,i1,a,a1] += Tiiaa[i,i1,a,a1] 
# 
            T1iiaa[i,i1,a1,a]        = Tiiaa[i,i1,a,a1] 
            T1iiaa[i,i1,a1,a]       *= -1.0  
            PREPARE Dijab_aa[i,i1,a1,a] += T1iiaa[i,i1,a1,a] 
# 
            T1iiaa[i1,i,a,a1]        = Tiiaa[i,i1,a,a1] 
            T1iiaa[i1,i,a,a1]       *= -1.0  
            PREPARE Dijab_aa[i1,i,a,a1] += T1iiaa[i1,i,a,a1] 
# 
            T1iiaa[i1,i,a1,a]        = Tiiaa[i,i1,a,a1] 
            PREPARE Dijab_aa[i1,i,a1,a] += T1iiaa[i1,i,a1,a] 
#
      ENDPARDO a, a1, i, i1  
#
      server_barrier 
#
# Sixth-term in Eq. 33 
# -------------------- 
#
      PARDO i2, a2, a1, i1 
#
            GET l1a_old[i2,a2] 
            GET t1a_old[a1,i1] 
            Liaai[i2,a2,a1,i1]  = l1a_old[i2,a2]^t1a_old[a1,i1] 
            Liaai[i2,a2,a1,i1] *= 2.0  
#
            DO i3 
            DO a3 
#
               REQUEST T2old_aa[a3,i3,a1,i1] 
               REQUEST L2old_aa[i2,a2,i3,a3] 
               Tiaai[i2,a2,a1,i1]  = L2old_aa[i2,a2,i3,a3]*T2old_aa[a3,i3,a1,i1] 
               Liaai[i2,a2,a1,i1] += Tiaai[i2,a2,a1,i1]  
#
            ENDDO a3 
            ENDDO i3 
#
            DO j 
            DO b 
#
               REQUEST T2old_ab[a1,i1,b,j] 
               REQUEST L2old_ab[i2,a2,j,b]  
               Tiaai[i2,a2,a1,i1]  = L2old_ab[i2,a2,j,b]*T2old_ab[a1,i1,b,j] 
               Liaai[i2,a2,a1,i1] += Tiaai[i2,a2,a1,i1]  
#
            ENDDO b 
            ENDDO j 
#
            DO i
#
               GET t1a_old[a2,i]
               tai[a2,i] = t1a_old[a2,i]
#
               DO a
#
                  REQUEST T2old_aa[a,i2,a2,i]  
                  GET t1a_old[a,i2]
#
                  Tiaia[i,a,i2,a2]         = t1a_old[a,i2]^tai[a2,i]
                  Tiaia[i,a,i2,a2]        *= 2.0
                  T1iaia[i,a,i2,a2]        = T2old_aa[a,i2,a2,i]
                  Tiaia[i,a,i2,a2]        += T1iaia[i,a,i2,a2]
#
#                 Tiiaa(i,i1,a,a1)         = Laiai(a,i2,a2,i)*Liaai(i2,a2,a1,i1)
#
                  Tiaai[i,a,a1,i1]         = Tiaia[i,a,i2,a2]*Liaai[i2,a2,a1,i1]
                  Tiiaa[i,i1,a,a1]         = Tiaai[i,a,a1,i1]
#
                  Tiiaa[i,i1,a,a1]        *= -0.0625 #-0.125
                  PREPARE Dijab_aa[i,i1,a,a1] += Tiiaa[i,i1,a,a1]
#
                  T1iiaa[i,i1,a1,a]        = Tiiaa[i,i1,a,a1]
                  T1iiaa[i,i1,a1,a]       *= -1.0
                  PREPARE Dijab_aa[i,i1,a1,a] += T1iiaa[i,i1,a1,a]
#
                  T1iiaa[i1,i,a,a1]        = Tiiaa[i,i1,a,a1]
                  T1iiaa[i1,i,a,a1]       *= -1.0
                  PREPARE Dijab_aa[i1,i,a,a1] += T1iiaa[i1,i,a,a1]
#
                  T1iiaa[i1,i,a1,a]        = Tiiaa[i,i1,a,a1]
                  PREPARE Dijab_aa[i1,i,a1,a] += T1iiaa[i1,i,a1,a]
#
               ENDDO a
#
            ENDDO i 
#
      ENDPARDO i2, a2, a1, i1 
#
# Odd spin combination 
# -------------------- 
#
      PARDO j, b, a1, i1 
#
            GET l1b_old[j,b] 
            GET t1a_old[a1,i1] 
            Ljbai[j,b,a1,i1]  = l1b_old[j,b]^t1a_old[a1,i1] 
            ljbai[j,b,a1,i1] *= 2.0 
#
            DO i3 
            DO a3 
#
               REQUEST T2old_aa[a3,i3,a1,i1] 
               REQUEST L2old_ab[i3,a3,j,b]    
               Tjbai[j,b,a1,i1]  = L2old_ab[i3,a3,j,b]*T2old_aa[a3,i3,a1,i1] 
               Ljbai[j,b,a1,i1] += Tjbai[j,b,a1,i1]  
#
            ENDDO a3 
            ENDDO i3 
#
            DO j1 
            DO b1 
#
               REQUEST T2old_ab[a1,i1,b1,j1]   
               REQUEST L2old_bb[j1,b1,j,b]    
               Tjbai[j,b,a1,i1]  = L2old_bb[j1,b1,j,b]*T2old_ab[a1,i1,b1,j1] 
               Ljbai[j,b,a1,i1] += Tjbai[j,b,a1,i1]  
#
            ENDDO b1 
            ENDDO j1 
#
            DO i 
            DO a 
#
               REQUEST T2old_ab[a,i,b,j] 
#
               Taiai[a1,i1,a,i]         = Ljbai[j,b,a1,i1]*T2old_ab[a,i,b,j]
               Tiiaa[i,i1,a,a1]         = Taiai[a1,i1,a,i]
               Tiiaa[i,i1,a,a1]        *= 0.0625
               PREPARE Dijab_aa[i,i1,a,a1] += Tiiaa[i,i1,a,a1]
# 
               T1iiaa[i,i1,a1,a]        = Tiiaa[i,i1,a,a1] 
               T1iiaa[i,i1,a1,a]       *= -1.0  
               PREPARE Dijab_aa[i,i1,a1,a] += T1iiaa[i,i1,a1,a] 
# 
               T1iiaa[i1,i,a,a1]        = Tiiaa[i,i1,a,a1] 
               T1iiaa[i1,i,a,a1]       *= -1.0  
               PREPARE Dijab_aa[i1,i,a,a1] += T1iiaa[i1,i,a,a1] 
# 
               T1iiaa[i1,i,a1,a]        = Tiiaa[i,i1,a,a1] 
               PREPARE Dijab_aa[i1,i,a1,a] += T1iiaa[i1,i,a1,a] 
#
            ENDDO a 
            ENDDO i 
#
      ENDPARDO j, b, a1, i1 
#
      server_barrier 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#     PARDO a, a1, i, i1 
#
#           GET Dijab_aa(i,i1,a,a1) 
#           Tiiaa(i,i1,a,a1) = 4.0*Dijab_aa(i,i1,a,a1)
#           PUT Dijab_aa(i,i1,a,a1) = Tiiaa(i,i1,a,a1) 
#
#     ENDPARDO a, a1, i, i1 
#     sip_barrier 
#
# Backtransform to the AO basis 
# ----------------------------- 
#
      PARDO sigma, a, i, i1 
#
            Tiiax[i,i1,a,sigma] = 0.0  
#
            DO a1 
#
               REQUEST Dijab_aa[i,i1,a,a1] 
#
               T1iiax[i,i1,a,sigma] = Dijab_aa[i,i1,a,a1]*ca[sigma,a1] 
               Tiiax[i,i1,a,sigma] += T1iiax[i,i1,a,sigma]  
#
            ENDDO a1  
#
            PREPARE Diiax[i,i1,a,sigma] = Tiiax[i,i1,a,sigma] 
#
      ENDPARDO sigma, a, i, i1 
      server_barrier 
#
      PARDO lambda, sigma, i, i1 
#
            Tiixx[i,i1,lambda,sigma] = 0.0  
#
            DO a  
#
               REQUEST Diiax[i,i1,a,sigma] 
#
               T1iixx[i,i1,lambda,sigma] = Diiax[i,i1,a,sigma]*ca[lambda,a] 
               Tiixx[i,i1,lambda,sigma]  += T1iixx[i,i1,lambda,sigma]  
#
            ENDDO a 
#
            Tiixx[i,i1,lambda,sigma]         *= 4.0  
            PREPARE Diixx[i,i1,lambda,sigma] += Tiixx[i,i1,lambda,sigma] 
#
      ENDPARDO lambda, sigma, i, i1 
      server_barrier 
#
# Done backtransformation 
# ----------------------- 
#
      ENDPROC DIJABAA 
#
# --------------------------------------------------------------------------- 
#
# In this PROCEDURE the D^{ij}_{ab} clock of the two-particle 
# density matrix is formed.  
#
# --------------------------------------------------------------------------- 
#
# First form one-particle intermediates 
#
# --------------------------------------------------------------------------- 
#
# Dim(i,m) = Gmi_a(i,m) + l1a_old(m,e)*t1a_old(e,i)  
#
# Dea(e,a) = Gae_a(e,a) - l1a_old(m,e)*t1a_old(a,m) 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJABAB 
#     ------------- 
#
# One-particle intermediates computed in AA/BB blocks  
# ---------------------------------------------------  
#
# Terms 1-5 in Eq. 33 
# ------------------- 
#
      PARDO a, b, i, j 
#
            REQUEST Tau_ab[a,i,b,j]   
            REQUEST L2old_ab[i,a,j,b]   
#
            Tijab[i,j,a,b]  = Tau_ab[a,i,b,j] 
            T1ijab[i,j,a,b] = L2old_ab[i,a,j,b] 
            Tijab[i,j,a,b] += T1ijab[i,j,a,b]  
            Tijab[i,j,a,b] *= 0.125  
#
            DO i1 
#
               REQUEST Tau_ab[a,i1,b,j]   
               GET Dii[i,i1] 
#
               T1ijab[i,j,a,b] = Tau_ab[a,i1,b,j]*Dii[i,i1] 
               T1ijab[i,j,a,b]*= -0.125 
               Tijab[i,j,a,b] += T1ijab[i,j,a,b] 
#
               DO j1 
#
                  REQUEST Tau_ab[a,i1,b,j1]      
                  REQUEST Vijmn_abab[i,j,i1,j1]  
                  T2ijab[i1,j1,a,b]= Tau_ab[a,i1,b,j1]
#
                  T1ijab[i,j,a,b]  = Vijmn_abab[i,j,i1,j1]*T2ijab[i1,j1,a,b]
                  T1ijab[i,j,a,b] *= 0.125
                  Tijab[i,j,a,b]  += T1ijab[i,j,a,b]
#
               ENDDO j1 
#
            ENDDO i1 
#
            DO j1 
#
               REQUEST Tau_ab[a,i,b,j1] 
               GET Djj[j,j1] 
#
               T1ijab[i,j,a,b] = Tau_ab[a,i,b,j1]*Djj[j,j1] 
               T1ijab[i,j,a,b]*= -0.125 
               Tijab[i,j,a,b] += T1ijab[i,j,a,b] 
#
            ENDDO j1 
#            
            DO a1 
#
               REQUEST Tau_ab[a1,i,b,j]   
               GET Daa[a1,a] 
#
               T1ijab[i,j,a,b] = Tau_ab[a1,i,b,j]*Daa[a1,a] 
               T1ijab[i,j,a,b]*= 0.125 
               Tijab[i,j,a,b] += T1ijab[i,j,a,b] 
#
            ENDDO a1 
#            
            DO b1 
#
               REQUEST Tau_ab[a,i,b1,j]   
               GET Dbb[b1,b] 
#
               T1ijab[i,j,a,b] = Tau_ab[a,i,b1,j]*Dbb[b1,b] 
               T1ijab[i,j,a,b]*= 0.125 
               Tijab[i,j,a,b] += T1ijab[i,j,a,b] 
#
            ENDDO b1 
#            
            PREPARE Dijab_ab[i,j,a,b] += Tijab[i,j,a,b] 
#
      ENDPARDO a, b, i, j 
#
# Final term in Eq. 33 
# -------------------- 
#
      PARDO a, b 
#
            allocate Lbb[b,*] 
#
            DO j 
            DO b1 
#
               GET l1b_old[j,b1] 
               GET t1b_old[b,j] 
               Tbb[b,b1]  = t1b_old[b,j]*l1b_old[j,b1] 
               Lbb[b,b1] += Tbb[b,b1]
#
            ENDDO b1 
            ENDDO j 
#
            allocate Lbj[b,*] 
#
            DO b1 
            DO j 
#
               GET t1b_old[b1,j] 
               Tbj[b,j]  = Lbb[b,b1]*t1b_old[b1,j] 
               Lbj[b,j] += Tbj[b,j] 
#
            ENDDO j 
            ENDDO b1 
#
            deallocate Lbb[b,*] 
#            
            DO i 
#
               GET t1a_old[a,i] 
#
               DO j 
#
                  Tijab[i,j,a,b]  = t1a_old[a,i]^Lbj[b,j] 
                  Tijab[i,j,a,b] *= 0.375  
                  PREPARE Dijab_ab[i,j,a,b] += Tijab[i,j,a,b] 
# 
               ENDDO j 
# 
            ENDDO i 
#
            deallocate Lbj[b,*] 
#
      ENDPARDO a, b 
#
      PARDO a, b 
#
            allocate Laa[a,*] 
#
            DO i 
#
               GET t1a_old[a,i] 
#
               DO a1 
#
                  GET l1a_old[i,a1] 
                  Taa[a,a1]  = t1a_old[a,i]*l1a_old[i,a1] 
                  Laa[a,a1] += Taa[a,a1]
#
               ENDDO a1 
#
            ENDDO i 
#
            allocate Lai[a,*] 
#
            DO a1 
            DO i 
#
               GET t1a_old[a1,i] 
               Tai[a,i]  = Laa[a,a1]*t1a_old[a1,i] 
               Lai[a,i] += Tai[a,i] 
#
            ENDDO i 
            ENDDO a1 
#
            deallocate Laa[a,*] 
#            
            DO j 
#
               GET t1b_old[b,j] 
#
               DO i 
#
                  Tijab[i,j,a,b]  = t1b_old[b,j]^Lai[a,i] 
                  Tijab[i,j,a,b] *= 0.375  
                  PREPARE Dijab_ab[i,j,a,b] += Tijab[i,j,a,b] 
# 
               ENDDO i 
# 
            ENDDO j 
#
            deallocate Lai[a,*] 
#
      ENDPARDO a, b 
#
# Sixth-term in Eq. 33 
# -------------------- 
#
      PARDO i1, a1, b, j
#
            GET l1a_old[i1,a1]
            GET t1b_old[b,j]
            Liabj[i1,a1,b,j]  = l1a_old[i1,a1]^t1b_old[b,j]
            Liabj[i1,a1,b,j] *= 2.0  
#
            DO j1 
            DO b1  
#
               REQUEST T2old_bb[b,j,b1,j1]   
               REQUEST L2old_ab[i1,a1,j1,b1]  
               Tiabj[i1,a1,b,j]  = L2old_ab[i1,a1,j1,b1]*T2old_bb[b,j,b1,j1]
               Liabj[i1,a1,b,j] += Tiabj[i1,a1,b,j]
#
            ENDDO b1  
            ENDDO j1 
#
            DO i 
            DO a  
#
               REQUEST T2old_ab[a,i,b,j]   
               REQUEST L2old_aa[i1,a1,i,a]  
               Tiabj[i1,a1,b,j]  = L2old_aa[i1,a1,i,a]*T2old_ab[a,i,b,j]
               Liabj[i1,a1,b,j] += Tiabj[i1,a1,b,j]
#
            ENDDO a  
            ENDDO i 
#
            DO i 
#
               GET t1a_old[a1,i] 
#
               DO a 
#
                  REQUEST T2old_aa[a,i1,a1,i]  
                  GET t1a_old[a,i1]
#
                  tai[a1,i]              = t1a_old[a1,i]
                  Tiaia[i,a,i1,a1]       = t1a_old[a,i1]^tai[a1,i]
                  Tiaia[i,a,i1,a1]      *= 2.0
                  T1iaia[i,a,i1,a1]      = T2old_aa[a,i1,a1,i]
                  Tiaia[i,a,i1,a1]      += T1iaia[i,a,i1,a1]
#
#                 Tijab(i,j,a,b)         = Laiai(a,i1,a1,i)*Liabj(i1,a1,b,j)
#
                  Tiabj[i,a,b,j]         = Tiaia[i,a,i1,a1]*Liabj[i1,a1,b,j]
                  Tijab[i,j,a,b]         = Tiabj[i,a,b,j]
                  Tijab[i,j,a,b]        *= -0.0625
                  PREPARE Dijab_ab[i,j,a,b] += Tijab[i,j,a,b]
# 
               ENDDO a 
#
            ENDDO i 
#
      ENDPARDO i1, a1, b, j 
#
      PARDO j2, b2, b, j
#
            GET l1b_old[j2,b2]
            GET t1b_old[b,j]
            Ljbbj[j2,b2,b,j]  = l1b_old[j2,b2]^t1b_old[b,j]
            Ljbbj[j2,b2,b,j] *= 2.0  
#
            DO j1 
            DO b1  
#
               REQUEST T2old_bb[b,j,b1,j1]   
               REQUEST L2old_bb[j2,b2,j1,b1]  
               Tjbbj[j2,b2,b,j]  = L2old_bb[j2,b2,j1,b1]*T2old_bb[b,j,b1,j1]
               Ljbbj[j2,b2,b,j] += Tjbbj[j2,b2,b,j]
#
            ENDDO b1  
            ENDDO j1 
#
            DO i 
            DO a  
#
               REQUEST T2old_ab[a,i,b,j]     
               REQUEST L2old_ab[i,a,j2,b2]  
               Tjbbj[j2,b2,b,j]  = L2old_ab[i,a,j2,b2]*T2old_ab[a,i,b,j]
               Ljbbj[j2,b2,b,j] += Tjbbj[j2,b2,b,j]
#
            ENDDO a  
            ENDDO i 
#
            Tbjbj[b2,j2,b,j] = Ljbbj[j2,b2,b,j]
#
            DO i 
            DO a 

               REQUEST T2old_ab[a,i,b2,j2] 

               Taibj[a,i,b,j]         = T2old_ab[a,i,b2,j2]*Tbjbj[b2,j2,b,j]
               Tijab[i,j,a,b]         = Taibj[a,i,b,j]
               Tijab[i,j,a,b]        *= 0.0625 #-0.125
               PREPARE Dijab_ab[i,j,a,b] += Tijab[i,j,a,b]
# 
            ENDDO a 
            ENDDO i 
#
      ENDPARDO j2, b2, b, j 
#
      PARDO j1, b1, a, i
#
            GET l1b_old[j1,b1]
            GET t1a_old[a,i]
            Ljbai[j1,b1,a,i]  = l1b_old[j1,b1]^t1a_old[a,i]
            Ljbai[j1,b1,a,i] *= 2.0  
#
            DO i1 
            DO a1  
#
               REQUEST T2old_aa[a,i,a1,i1]     
               REQUEST L2old_ab[i1,a1,j1,b1]  
               Tjbai[j1,b1,a,i]  = L2old_ab[i1,a1,j1,b1]*T2old_aa[a,i,a1,i1]
               Ljbai[j1,b1,a,i] += Tjbai[j1,b1,a,i]
#
            ENDDO a1  
            ENDDO i1 
#
            DO j 
            DO b  
#
               REQUEST T2old_ab[a,i,b,j]     
               REQUEST L2old_bb[j,b,j1,b1]  
               Tjbai[j1,b1,a,i]  = L2old_bb[j,b,j1,b1]*T2old_ab[a,i,b,j]
               Ljbai[j1,b1,a,i] += Tjbai[j1,b1,a,i]
#
            ENDDO b  
            ENDDO j 
#
            DO j 
#
               GET t1b_old[b1,j] 
               tbj[b1,j] = t1b_old[b1,j] 
#
               DO b 
#
                  REQUEST T2old_bb[b,j1,b1,j] 
                  GET t1b_old[b,j1]
#
                  Tjbjb[j,b,j1,b1]       = t1b_old[b,j1]^tbj[b1,j]
                  Tjbjb[j,b,j1,b1]      *= 2.0
                  T1jbjb[j,b,j1,b1]      = T2old_bb[b,j1,b1,j]
                  Tjbjb[j,b,j1,b1]      += T1jbjb[j,b,j1,b1]
#
#                 Tijab(i,j,a,b)         = Lbjbj(b,j1,b1,j)*Ljbai(j1,b1,a,i)
#
                  Tjbai[j,b,a,i]         = Tjbjb[j,b,j1,b1]*Ljbai[j1,b1,a,i]
                  Tijab[i,j,a,b]         = Tjbai[j,b,a,i]
#
                  Tijab[i,j,a,b]        *= -0.0625 #-0.125
                  PREPARE Dijab_ab[i,j,a,b] += Tijab[i,j,a,b]
# 
               ENDDO b 
# 
            ENDDO j 
#
      ENDPARDO j1, b1, a, i 
#
      PARDO i2, a2, a, i
#
            GET l1a_old[i2,a2]
            GET t1a_old[a,i]
            Liaai[i2,a2,a,i]  = l1a_old[i2,a2]^t1a_old[a,i]
            Liaai[i2,a2,a,i] *= 2.0  
#
            DO i1 
            DO a1  
#
               REQUEST T2old_aa[a,i,a1,i1]   
               REQUEST L2old_aa[i2,a2,i1,a1]  
               Tiaai[i2,a2,a,i]  = L2old_aa[i2,a2,i1,a1]*T2old_aa[a,i,a1,i1]
               Liaai[i2,a2,a,i] += Tiaai[i2,a2,a,i]
#
            ENDDO a1  
            ENDDO i1 
#
            DO j 
            DO b  
#
               REQUEST T2old_ab[a,i,b,j]     
               REQUEST L2old_ab[i2,a2,j,b]  
               Tiaai[i2,a2,a,i]  = L2old_ab[i2,a2,j,b]*T2old_ab[a,i,b,j]
               Liaai[i2,a2,a,i] += Tiaai[i2,a2,a,i]
#
            ENDDO b  
            ENDDO j 
#
            Taiai[a,i,a2,i2] = Liaai[i2,a2,a,i]
#
            DO j 
            DO b 
#
               REQUEST T2old_ab[a2,i2,b,j]  
#
#              Tijab(i,j,a,b)      = T2old_ab(a2,i2,b,j)*Liaai(i2,a2,a,i)
#
               Taibj[a,i,b,j]      = Taiai[a,i,a2,i2]*T2old_ab[a2,i2,b,j]
               Tijab[i,j,a,b]      = Taibj[a,i,b,j]
               Tijab[i,j,a,b]     *= 0.0625 
               PREPARE Dijab_ab[i,j,a,b] += Tijab[i,j,a,b]
# 
            ENDDO b 
            ENDDO j 
#
      ENDPARDO i2, a2, a, i 
#
      PARDO b, b1, i1, i 
#
            Tbibi[b,i,b1,i1] = 0.0
#
            DO j
            DO a
#
               REQUEST T2old_ab[a,i,b,j]    
               REQUEST L2old_ab[i1,a,j,b1]  
#
#              Tbibi(b,i1,b1,i)  = T2old_ab(a,i,b,j)*L2old_ab(i1,a,j,b1)
#
               Tbiaj[b,i,a,j]    = T2old_ab[a,i,b,j]
               Tajbi[a,j,b1,i1]  = L2old_ab[i1,a,j,b1]
               T1bibi[b,i,b1,i1] = Tbiaj[b,i,a,j]*Tajbi[a,j,b1,i1]
               Tbibi[b,i,b1,i1] += T1bibi[b,i,b1,i1]
#
            ENDDO a
            ENDDO j 
#
            Lbibi[b,i1,b1,i] = Tbibi[b,i,b1,i1]   
# 
            DO a 
#
               GET t1a_old[a,i1] 
#
               DO j 
#
                  REQUEST T2old_ab[a,i1,b1,j]   
                  GET t1b_old[b1,j] 
#
                  Taibj[a,i1,b1,j]      = t1a_old[a,i1]^t1b_old[b1,j] 
                  Taibj[a,i1,b1,j]      *= 2.0  
                  Taibj[a,i1,b1,j]      += T2old_ab[a,i1,b1,j] 
#
                  Tijab[i,j,a,b]         = Taibj[a,i1,b1,j]*Lbibi[b,i1,b1,i] 
                  Tijab[i,j,a,b]        *= 0.0625   
                  PREPARE Dijab_ab[i,j,a,b] += Tijab[i,j,a,b] 
# 
               ENDDO j 
# 
            ENDDO a 
#
      ENDPARDO b, b1, i1, i 
#
      PARDO a, a1, j1, j 
#
            Lajaj[a,j1,a1,j] = 0.0  
# 
            DO i 
            DO b 
#
               REQUEST T2old_ab[a,i,b,j]     
               REQUEST L2old_ab[i,a1,j1,b]   
#
               Tajaj[a,j1,a1,j]  = T2old_ab[a,i,b,j]*L2old_ab[i,a1,j1,b] 
               Lajaj[a,j1,a1,j] += Tajaj[a,j1,a1,j] 
#
            ENDDO b 
            ENDDO i 
# 
            DO b 
# 
               GET t1b_old[b,j1] 
# 
               DO i 
#
                  REQUEST T2old_ab[a1,i,b,j1]   
                  GET t1a_old[a1,i] 
#
                  Taibj[a1,i,b,j1]       = t1a_old[a1,i]^t1b_old[b,j1] 
                  Taibj[a1,i,b,j1]      *= 2.0  
                  Taibj[a1,i,b,j1]      += T2old_ab[a1,i,b,j1] 
#
                  Tijab[i,j,a,b]         = Taibj[a1,i,b,j1]*Lajaj[a,j1,a1,j] 
                  Tijab[i,j,a,b]        *= 0.0625  
                  PREPARE Dijab_ab[i,j,a,b] += Tijab[i,j,a,b] 
# 
               ENDDO i 
# 
            ENDDO b 
#
      ENDPARDO a, a1, j1, j 
#
      server_barrier 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#     PARDO b, a, j, i 
#
#           GET Dijab_ab(i,j,a,b) 
#           Tijab(i,j,a,b) = 4.0*Dijab_ab(i,j,a,b)
#           PUT Dijab_ab(i,j,a,b) = Tijab(i,j,a,b) 
#
#     ENDPARDO b, a, j, i 
#
# Backtransform to the AO basis 
# ----------------------------- 
#
      PARDO a, sigma, i, j1 
#
            Tijax[i,j1,a,sigma] = 0.0  
#
            DO b1  
#
               REQUEST Dijab_ab[i,j1,a,b1] 
#
               T1ijax[i,j1,a,sigma] = Dijab_ab[i,j1,a,b1]*cb[sigma,b1] 
               Tijax[i,j1,a,sigma] += T1ijax[i,j1,a,sigma]  
#
            ENDDO b1  
#
            PREPARE Dijax[i,j1,a,sigma] = Tijax[i,j1,a,sigma] 
#
      ENDPARDO a, sigma, i, j1 
      server_barrier 
#
      PARDO lambda, sigma, i, j1 
#
            Tijxx[i,j1,lambda,sigma] = 0.0  
#
            DO a  
#
               REQUEST Dijax[i,j1,a,sigma] 
#
               T1ijxx[i,j1,lambda,sigma]  = Dijax[i,j1,a,sigma]*ca[lambda,a] 
               Tijxx[i,j1,lambda,sigma]  += T1ijxx[i,j1,lambda,sigma]  
#
            ENDDO a 
#
            Tijxx[i,j1,lambda,sigma]         *= 8.0  
            PREPARE Dijxx[i,j1,lambda,sigma] += Tijxx[i,j1,lambda,sigma] 
#
      ENDPARDO lambda, sigma, i, j1 
      server_barrier 
#
# Done backtransformation 
# ----------------------- 
#
# --------------------------------------------------------------------------- 
#
      ENDPROC DIJABAB 
#
# --------------------------------------------------------------------------- 
#
#
# --------------------------------------------------------------------------- 
#
# In this PROCEDURE the D^{ij}_{ab} block of the two-particle 
# density matrix is formed. Only the BB spin case is considered.  
#
# --------------------------------------------------------------------------- 
#
# First form one-particle intermediates 
#
# --------------------------------------------------------------------------- 
#
# Dim(i,m) = Gmi_b(i,m) + l1b_old(m,e)*t1b_old(e,i)  
#
# Dea(e,a) = Gae_b(e,a) - l1b_old(m,e)*t1b_old(a,m) 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJABBB 
#     ------------- 
#
# Djj 
# ---  
#
      PARDO j, j1 
#
            GET Gmi_b[j,j1] 
            PUT Djj[j,j1] += Gmi_b[j,j1] 
#
      ENDPARDO j, j1 
#
      PARDO j, j1, b       
#
            GET l1b_old[j1,b] 
            GET t1b_old[b,j] 
            Tjj[j,j1]      = l1b_old[j1,b]*t1b_old[b,j]  
            PUT Djj[j,j1] += Tjj[j,j1] 
#
      ENDPARDO j, j1, b       
#
# Dbb 
# --- 
#
      PARDO b1, b 
#
            GET Gae_b[b1,b] 
            PUT Dbb[b1,b] += Gae_b[b1,b] 
#
      ENDPARDO b1, b 
#
      PARDO b1, b, j 
#
            GET l1b_old[j,b1] 
            GET t1b_old[b,j] 
            Tbb[b1,b]      = t1b_old[b,j]*l1b_old[j,b1] 
            Tbb[b1,b]     *= -1.0  
            PUT Dbb[b1,b] += Tbb[b1,b] 
#
      ENDPARDO b1, b, j  
#
      sip_barrier  
#
# Done one-particle intermediates 
# ------------------------------- 
#
# Terms 1-5 in Eq. 33 
# ------------------- 
#
      PARDO b, b1, j, j1 
#
            REQUEST Tau_bb[b,j,b1,j1]   
            REQUEST L2old_bb[j,b,j1,b1]   
#
            Tjjbb[j,j1,b,b1]  = Tau_bb[b,j,b1,j1] 
            T1jjbb[j,j1,b,b1] = L2old_bb[j,b,j1,b1] 
            Tjjbb[j,j1,b,b1] += T1jjbb[j,j1,b,b1]  
            Tjjbb[j,j1,b,b1] *= 0.125  
#
            DO j2  
#
               REQUEST Tau_bb[b,j2,b1,j1] 
               GET Djj[j,j2] 
#
               T1jjbb[j,j1,b,b1] = Tau_bb[b,j2,b1,j1]*Djj[j,j2] 
               T1jjbb[j,j1,b,b1]*= -0.125 
               Tjjbb[j,j1,b,b1] += T1jjbb[j,j1,b,b1] 
#
               DO j3 
#
                  REQUEST Tau_bb[b,j2,b1,j3]     
                  REQUEST Vijmn_bbbb[j,j1,j2,j3] 
                  T2jjbb[j2,j3,b,b1] = Tau_bb[b,j2,b1,j3]
#
                  T1jjbb[j,j1,b,b1]  = Vijmn_bbbb[j,j1,j2,j3]*T2jjbb[j2,j3,b,b1]
                  T1jjbb[j,j1,b,b1] *= 0.0625
                  Tjjbb[j,j1,b,b1]  += T1jjbb[j,j1,b,b1]
#
               ENDDO j3 
#
            ENDDO j2 
#
            DO j2 
#
               REQUEST Tau_bb[b,j2,b1,j] 
               GET Djj[j1,j2] 
#
               T1jjbb[j,j1,b,b1] = Tau_bb[b,j2,b1,j]*Djj[j1,j2] 
               T1jjbb[j,j1,b,b1]*= 0.125 
               Tjjbb[j,j1,b,b1] += T1jjbb[j,j1,b,b1] 
#
            ENDDO j2 
#            
            DO b2 
#
               REQUEST Tau_bb[b2,j,b1,j1] 
               GET Dbb[b2,b] 
#
               T1jjbb[j,j1,b,b1] = Tau_bb[b2,j,b1,j1]*Dbb[b2,b] 
               T1jjbb[j,j1,b,b1]*= 0.125 
               Tjjbb[j,j1,b,b1] += T1jjbb[j,j1,b,b1] 
#
            ENDDO b2 
#            
            DO b2 
#
               REQUEST Tau_bb[b2,j,b,j1]   
               GET Dbb[b2,b1] 
#
               T1jjbb[j,j1,b,b1] = Tau_bb[b2,j,b,j1]*Dbb[b2,b1] 
               T1jjbb[j,j1,b,b1]*= -0.125 
               Tjjbb[j,j1,b,b1] += T1jjbb[j,j1,b,b1] 
#
            ENDDO b2 
#            
            PREPARE Dijab_bb[j,j1,b,b1] += Tjjbb[j,j1,b,b1] 
#
      ENDPARDO b, b1, j, j1 
#
# Final term in Eq. 33 
# -------------------- 
#
      PARDO b, b1 
#
            allocate L1bb[b1,*] 
#
            DO j 
            DO b2 
#
               GET l1b_old[j,b2] 
               GET t1b_old[b1,j] 
               Tbb[b1,b2]   = t1b_old[b1,j]*l1b_old[j,b2] 
               L1bb[b1,b2] += Tbb[b1,b2]
#
            ENDDO b2 
            ENDDO j 
#
            allocate L1bj[b1,*] 
#
            DO j 
            DO b2 
#
               GET t1b_old[b2,j] 
               Tbj[b1,j]   = L1bb[b1,b2]*t1b_old[b2,j] 
               L1bj[b1,j] += Tbj[b1,j] 
#
            ENDDO b2 
            ENDDO j 
#
            deallocate L1bb[b1,*] 
#            
            DO j 
#
               GET t1b_old[b,j] 
#
               DO j1 
#
                  Tjjbb[j,j1,b,b1]         = t1b_old[b,j]^L1bj[b1,j1] 
                  Tjjbb[j,j1,b,b1]        *= 0.375 
                  PREPARE Dijab_bb[j,j1,b,b1] += Tjjbb[j,j1,b,b1] 
# 
                  T1jjbb[j,j1,b1,b]        = Tjjbb[j,j1,b,b1] 
                  T1jjbb[j,j1,b1,b]       *= -1.0  
                  PREPARE Dijab_bb[j,j1,b1,b] += T1jjbb[j,j1,b1,b] 
# 
                  T1jjbb[j1,j,b,b1]        = Tjjbb[j,j1,b,b1] 
                  T1jjbb[j1,j,b,b1]       *= -1.0  
                  PREPARE Dijab_bb[j1,j,b,b1] += T1jjbb[j1,j,b,b1] 
# 
                  T1jjbb[j1,j,b1,b]        = Tjjbb[j,j1,b,b1] 
                  PREPARE Dijab_bb[j1,j,b1,b] += T1jjbb[j1,j,b1,b] 
#            
               ENDDO j1 
#            
            ENDDO j 
#
            deallocate L1bj[b1,*] 
#
      ENDPARDO b, b1 
#
# Sixth-term in Eq. 33 
# -------------------- 
#
      PARDO j2, b2, b1, j1 
#
            GET l1b_old[j2,b2] 
            GET t1b_old[b1,j1] 
            Ljbbj[j2,b2,b1,j1]  = l1b_old[j2,b2]^t1b_old[b1,j1] 
            Ljbbj[j2,b2,b1,j1] *= 2.0  
#
            DO j3 
            DO b3 
#
               REQUEST T2old_bb[b3,j3,b1,j1]  
               REQUEST L2old_bb[j2,b2,j3,b3]   
               Tjbbj[j2,b2,b1,j1]  = L2old_bb[j2,b2,j3,b3]*T2old_bb[b3,j3,b1,j1] 
               Ljbbj[j2,b2,b1,j1] += Tjbbj[j2,b2,b1,j1]  
#
            ENDDO b3 
            ENDDO j3 
#
            DO i 
            DO a 
#
               REQUEST T2old_ab[a,i,b1,j1]   
               REQUEST L2old_ab[i,a,j2,b2]   
               Tjbbj[j2,b2,b1,j1]  = L2old_ab[i,a,j2,b2]*T2old_ab[a,i,b1,j1]  
               Ljbbj[j2,b2,b1,j1] += Tjbbj[j2,b2,b1,j1]  
#
            ENDDO a 
            ENDDO i 
#
            DO j 
#
               GET t1b_old[b2,j] 
               tbj[b2,j] = t1b_old[b2,j] 
#
               DO b 
#
                  REQUEST T2old_bb[b,j2,b2,j]  
                  GET t1b_old[b,j2]
#
                  Tjbjb[j,b,j2,b2]         = t1b_old[b,j2]^tbj[b2,j]
                  Tjbjb[j,b,j2,b2]        *= 2.0
                  T1jbjb[j,b,j2,b2]        = T2old_bb[b,j2,b2,j]
                  Tjbjb[j,b,j2,b2]        += T1jbjb[j,b,j2,b2]
#
#                 Tjjbb(j,j1,b,b1)         = Lbjbj(b,j2,b2,j)*Ljbbj(j2,b2,b1,j1)
#
                  Tjbbj[j,b,b1,j1]         = Tjbjb[j,b,j2,b2]*Ljbbj[j2,b2,b1,j1]
                  Tjjbb[j,j1,b,b1]         = Tjbbj[j,b,b1,j1]
#
                  Tjjbb[j,j1,b,b1]        *= -0.0625
                  PREPARE Dijab_bb[j,j1,b,b1] += Tjjbb[j,j1,b,b1]
#
                  T1jjbb[j,j1,b1,b]        = Tjjbb[j,j1,b,b1]
                  T1jjbb[j,j1,b1,b]       *= -1.0
                  PREPARE Dijab_bb[j,j1,b1,b] += T1jjbb[j,j1,b1,b]
#
                  T1jjbb[j1,j,b,b1]        = Tjjbb[j,j1,b,b1]
                  T1jjbb[j1,j,b,b1]       *= -1.0
                  PREPARE Dijab_bb[j1,j,b,b1] += T1jjbb[j1,j,b,b1]
#
                  T1jjbb[j1,j,b1,b]        = Tjjbb[j,j1,b,b1]
                  PREPARE Dijab_bb[j1,j,b1,b] += T1jjbb[j1,j,b1,b]
#
               ENDDO b 
#
            ENDDO j 
#
      ENDPARDO j2, b2, b1, j1 
#
# Odd spin combination
# --------------------
#
      PARDO i, a, b1, j1
#
            GET l1a_old[i,a]
            GET t1b_old[b1,j1]
            Liabj[i,a,b1,j1]  = l1a_old[i,a]^t1b_old[b1,j1]
            Liabj[i,a,b1,j1] *= 2.0  
#
            DO j3
            DO b3
#
               REQUEST T2old_bb[b3,j3,b1,j1] 
               REQUEST L2old_ab[i,a,j3,b3]    
               Tiabj[i,a,b1,j1]  = L2old_ab[i,a,j3,b3]*T2old_bb[b3,j3,b1,j1]
               Liabj[i,a,b1,j1] += Tiabj[i,a,b1,j1]
#
            ENDDO b3
            ENDDO j3
#
            DO i1
            DO a1
#
               REQUEST T2old_ab[a1,i1,b1,j1]  
               REQUEST L2old_aa[i1,a1,i,a]    
               Tiabj[i,a,b1,j1]  = L2old_aa[i1,a1,i,a]*T2old_ab[a1,i1,b1,j1]
               Liabj[i,a,b1,j1] += Tiabj[i,a,b1,j1]
#
            ENDDO a1
            ENDDO i1
#
            Tbjai[b1,j1,a,i] = Liabj[i,a,b1,j1]
#
            DO j
            DO b
#
               REQUEST T2old_ab[a,i,b,j]  
#
#              Tjjbb(j,j1,b,b1)      = T2old_ab(a,i,b,j)*Liabj(i,a,b1,j1)
#
               Tbjbj[b1,j1,b,j]      = Tbjai[b1,j1,a,i]*T2old_ab[a,i,b,j]
               Tjjbb[j,j1,b,b1]      = Tbjbj[b1,j1,b,j]
#
               Tjjbb[j,j1,b,b1]     *= 0.0625
               PREPARE Dijab_bb[j,j1,b,b1] += Tjjbb[j,j1,b,b1]
#
               T1jjbb[j,j1,b1,b]     = Tjjbb[j,j1,b,b1]
               T1jjbb[j,j1,b1,b]    *= -1.0
               PREPARE Dijab_bb[j,j1,b1,b] += T1jjbb[j,j1,b1,b]
#
               T1jjbb[j1,j,b,b1]     = Tjjbb[j,j1,b,b1]
               T1jjbb[j1,j,b,b1]    *= -1.0
               PREPARE Dijab_bb[j1,j,b,b1] += T1jjbb[j1,j,b,b1]
#
               T1jjbb[j1,j,b1,b]     = Tjjbb[j,j1,b,b1]
               PREPARE Dijab_bb[j1,j,b1,b] += T1jjbb[j1,j,b1,b]
#
            ENDDO b
            ENDDO j
#
      ENDPARDO i, a, b1, j1
#
      server_barrier 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#     PARDO b, b1, j, j1 
#
#           GET Dijab_bb(j,j1,b,b1) 
#           Tjjbb(j,j1,b,b1) = 4.0*Dijab_bb(j,j1,b,b1)
#           PUT Dijab_bb(j,j1,b,b1) = Tjjbb(j,j1,b,b1) 
#
#     ENDPARDO b, b1, j, j1 
#
# Backtransform to the AO basis 
# ----------------------------- 
#
      PARDO b, sigma, j, j1 
#
            Tjjbx[j,j1,b,sigma] = 0.0  
#
            DO b1 
#
               REQUEST Dijab_bb[j,j1,b,b1]
#
               T1jjbx[j,j1,b,sigma] = Dijab_bb[j,j1,b,b1]*cb[sigma,b1] 
               Tjjbx[j,j1,b,sigma] += T1jjbx[j,j1,b,sigma]  
#
            ENDDO b1 
#
            PREPARE Djjbx[j,j1,b,sigma] = Tjjbx[j,j1,b,sigma] 
#
      ENDPARDO b, sigma, j, j1 
      server_barrier 
#
      PARDO lambda, sigma, j, j1 
#
            Tjjxx[j,j1,lambda,sigma] = 0.0  
#
            DO b  
#
               REQUEST Djjbx[j,j1,b,sigma]   
#
               T1jjxx[j,j1,lambda,sigma]  = Djjbx[j,j1,b,sigma]*cb[lambda,b] 
               Tjjxx[j,j1,lambda,sigma]  += T1jjxx[j,j1,lambda,sigma]    
#
            ENDDO b 
#
            Tjjxx[j,j1,lambda,sigma]         *= 4.0  
            PREPARE Djjxx[j,j1,lambda,sigma] += Tjjxx[j,j1,lambda,sigma] 
#
      ENDPARDO lambda, sigma, j, j1 
      server_barrier 
#
# Done backtransformation 
# ----------------------- 
#
# --------------------------------------------------------------------------- 
#
      ENDPROC DIJABBB 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJAB 
#     ----------- 
#
# Create gamma arrays and one-particle intermediates 
# Note that Dii and Daa are computed in DIJABAA and 
# Djj and Dbb are computed in DIJABBB. 
# -------------------------------------------------- 
#
           pardo i,i1
                 put Dii[i,i1] = 0.0
           endpardo i,i1
           pardo j,j1
                 put Djj[j,j1] = 0.0
           endpardo j,j1
           pardo a,a1
                 put Daa[a,a1] = 0.0
           endpardo a,a1
           pardo b,b1
                 put Dbb[b,b1] = 0.0
           endpardo b,b1
           sip_barrier 

           CALL DIJABAA 
           CALL DIJABBB 
           CALL DIJABAB 

           sip_barrier 
#
      ENDPROC DIJAB 
#     ------------- 
#
# --------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
# Expression programmed: 
#
# D^{ij}_{kl} = 1/16 P_+(ij,kl) \lambda^{ij}_{ef} \tau^{ef}_{kl} 
# Note that 4* result is kept to be consistent with aces. 
#
# Equivalent to gamma3 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKLAAAA 
#     -------------- 
#
      PARDO a, a1, i, i1  
#
            REQUEST L2old_aa[i,a,i1,a1] 
            Tiiaa[i,i1,a,a1] = L2old_aa[i,a,i1,a1] 
#
            DO i2 
            DO i3 
#
               REQUEST Tau_aa[a,i2,a1,i3] 
               Taaii[a,a1,i2,i3] = Tau_aa[a,i2,a1,i3]
#
#              Tiiii(i,i1,i2,i3)           = L2old_aa(i,a,i1,a1)*Tau_aa(a,i2,a1,i3)
               Tiiii[i,i1,i2,i3]           = Tiiaa[i,i1,a,a1]*Taaii[a,a1,i2,i3]
               Tiiii[i,i1,i2,i3]          *= 0.25
               T1iiii[i2,i3,i,i1]          = Tiiii[i,i1,i2,i3]
               PREPARE Dijkl_aa[i,i1,i2,i3]   += Tiiii[i,i1,i2,i3]
               PREPARE Dijkl_aa[i2,i3,i,i1]   += T1iiii[i2,i3,i,i1]
               T1iiii[i2,i3,i,i1]         *= 2.0
               PREPARE Vijmn_aaaa[i2,i3,i,i1] += T1iiii[i2,i3,i,i1]
#
            ENDDO i3 
            ENDDO i2 
#
      ENDPARDO a, a1, i, i1  
#
      server_barrier 
#
# Perform backtransformation to AO representation 
# ----------------------------------------------- 
#
      PARDO mu, i1, i2, i3  
#
            Txiii[mu,i1,i2,i3] = 0.0  
#
            DO i  
#
               REQUEST Dijkl_aa[i,i1,i2,i3] 
               REQUEST Dijkl_aa[i,i1,i3,i2] 
#
               Tiiii[i,i1,i2,i3]   = Dijkl_aa[i,i1,i2,i3] 
               T1iiii[i,i1,i2,i3]  = Dijkl_aa[i,i1,i3,i2]  
               Tiiii[i,i1,i2,i3]  -= T1iiii[i,i1,i2,i3] 
#
               T1xiii[mu,i1,i2,i3] = Tiiii[i,i1,i2,i3]*ca[mu,i] 
               Txiii[mu,i1,i2,i3] += T1xiii[mu,i1,i2,i3]  
#
            ENDDO i  
#
            PREPARE Dxiii[mu,i1,i2,i3] = Txiii[mu,i1,i2,i3] 
#
      ENDPARDO mu, i1, i2, i3  
#
      server_barrier 
      PARDO nu, i2, i3, mu  
#
            Tiixx[i2,i3,mu,nu] = 0.0  
#
            DO i1  
#
               REQUEST Dxiii[mu,i1,i2,i3] 
#
               T1iixx[i2,i3,mu,nu]  = Dxiii[mu,i1,i2,i3]*ca[nu,i1] 
               Tiixx[i2,i3,mu,nu]  += T1iixx[i2,i3,mu,nu]  
#
            ENDDO i1  
#
            Tiixx[i2,i3,mu,nu]         *= 0.25  
            PREPARE Diixx[i2,i3,mu,nu] += Tiixx[i2,i3,mu,nu] 
#
      ENDPARDO nu, i2, i3, mu 
      server_barrier 
#
# Done backtransformation 
# ----------------------- 
#
      ENDPROC DIJKLAAAA 
#     ----------------- 
#
# ---------------------------------------------------------------------------- 
#
# Expression programmed: 
#
# D^{IJ}_{KL} = 1/16 P_+(IJ,KL) \lambda^{IJ}_{EF} \tau^{EF}_{KL} 
# Note that 4* result is kept to be consistent with aces. 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKLBBBB 
#     -------------- 
#
      PARDO b, b1, j, j1   
#
            REQUEST L2old_bb[j,b,j1,b1] 
            Tjjbb[j,j1,b,b1] = L2old_bb[j,b,j1,b1]
#
            DO j2
            DO j3
#
               REQUEST Tau_bb[b,j2,b1,j3] 
               Tbbjj[b,b1,j2,j3] = Tau_bb[b,j2,b1,j3]
#
#              Tjjjj(j,j1,j2,j3)           = L2old_bb(j,b,j1,b1)*Tau_bb(b,j2,b1,j3)
#
               Tjjjj[j,j1,j2,j3]           = Tjjbb[j,j1,b,b1]*Tbbjj[b,b1,j2,j3]
#
               Tjjjj[j,j1,j2,j3]          *= 0.25
               T1jjjj[j2,j3,j,j1]          = Tjjjj[j,j1,j2,j3]
               PREPARE Dijkl_bb[j,j1,j2,j3]   += Tjjjj[j,j1,j2,j3]
               PREPARE Dijkl_bb[j2,j3,j,j1]   += T1jjjj[j2,j3,j,j1]
               T1jjjj[j2,j3,j,j1]         *= 2.0
               PREPARE Vijmn_bbbb[j2,j3,j,j1] += T1jjjj[j2,j3,j,j1]
#
            ENDDO j3
            ENDDO j2
#
      ENDPARDO b, b1, j, j1  
#
# Perform backtransformation to AO representation 
# ----------------------------------------------- 
#
      server_barrier 
#
      PARDO mu, j1, j2, j3  
#
            Txjjj[mu,j1,j2,j3] = 0.0  
#
            DO j 
#
               REQUEST Dijkl_bb[j,j1,j2,j3] 
               REQUEST Dijkl_bb[j,j1,j3,j2] 
#
               Tjjjj[j,j1,j2,j3]   = Dijkl_bb[j,j1,j2,j3]
               T1jjjj[j,j1,j2,j3]  = Dijkl_bb[j,j1,j3,j2] 
               Tjjjj[j,j1,j2,j3]  -= T1jjjj[j,j1,j2,j3]  
#
               T1xjjj[mu,j1,j2,j3] = Tjjjj[j,j1,j2,j3]*cb[mu,j] 
               Txjjj[mu,j1,j2,j3] += T1xjjj[mu,j1,j2,j3]  
#
            ENDDO j 
#
            PREPARE Dxjjj[mu,j1,j2,j3] = Txjjj[mu,j1,j2,j3] 
#
      ENDPARDO mu, j1, j2, j3  
      server_barrier 
#
      PARDO nu, j2, j3, mu  
#
            Tjjxx[j2,j3,mu,nu] = 0.0  
#
            DO j1  
#
               REQUEST Dxjjj[mu,j1,j2,j3] 
#
               T1jjxx[j2,j3,mu,nu]  = Dxjjj[mu,j1,j2,j3]*cb[nu,j1] 
               Tjjxx[j2,j3,mu,nu]  += T1jjxx[j2,j3,mu,nu]  
#
            ENDDO j1  
#
            Tjjxx[j2,j3,mu,nu]         *= 0.25  
            PREPARE Djjxx[j2,j3,mu,nu] += Tjjxx[j2,j3,mu,nu] 
#
      ENDPARDO nu, j2, j3, mu 
      server_barrier 
#
# Done backtransformation 
# ----------------------- 
#
      ENDPROC DIJKLBBBB 
#     ----------------- 
#
# ---------------------------------------------------------------------------- 
#
# Expression programmed: 
#
# D^{iJ}_{kL} = 1/8 P_+(iJ,kL) \lambda^{iJ}_{eF} \tau^{eF}_{kL} 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKLABAB 
#     -------------- 
#
      PARDO a, b,i, j 
#
            REQUEST L2old_ab[i,a,j,b] 
            Tijab[i,j,a,b] = L2old_ab[i,a,j,b]
#
            DO i1
            DO j1
#
               REQUEST Tau_ab[a,i1,b,j1] 
               Tabij[a,b,i1,j1] = Tau_ab[a,i1,b,j1]
#
               Tijij[i,j,i1,j1]           = Tijab[i,j,a,b]*Tabij[a,b,i1,j1]
#
               Tijij[i,j,i1,j1]          *= 0.5
               T1ijij[i1,j1,i,j]          = Tijij[i,j,i1,j1]
               PREPARE Dijkl_ab[i,j,i1,j1]   += Tijij[i,j,i1,j1]
               PREPARE Dijkl_ab[i1,j1,i,j]   += T1ijij[i1,j1,i,j]
               T1ijij[i1,j1,i,j]         *= 2.0
               PREPARE Vijmn_abab[i1,j1,i,j] += T1ijij[i1,j1,i,j]
#
            ENDDO j1
            ENDDO i1
#
      ENDPARDO a, b, i, j  
#
      server_barrier 
#
# Perform backtransformation to AO representation 
# ----------------------------------------------- 
#
      PARDO mu, i1, j, j1  
#
            Txjij[mu,j,i1,j1] = 0.0  
#
            DO i 
#
               REQUEST Dijkl_ab[i,j,i1,j1] 
#
               T1xjij[mu,j,i1,j1] = Dijkl_ab[i,j,i1,j1]*ca[mu,i] 
               Txjij[mu,j,i1,j1] += T1xjij[mu,j,i1,j1]   
#
            ENDDO i 
#
            PREPARE Dxjij[mu,j,i1,j1] = Txjij[mu,j,i1,j1] 
#
      ENDPARDO mu, i1, j, j1  
      server_barrier 
#
      PARDO i1, nu, j1, mu  
#
            Tijxx[i1,j1,mu,nu] = 0.0  
#
            DO j 
#
               REQUEST Dxjij[mu,j,i1,j1] 
#
               T1ijxx[i1,j1,mu,nu] = Dxjij[mu,j,i1,j1]*cb[nu,j] 
               Tijxx[i1,j1,mu,nu] += T1ijxx[i1,j1,mu,nu]  
#
            ENDDO j 
#
            PREPARE Dijxx[i1,j1,mu,nu] += Tijxx[i1,j1,mu,nu] 
#
      ENDPARDO i1, nu, j1, mu 
      server_barrier 
#
# Done backtransformation 
# ----------------------- 
#
      ENDPROC DIJKLABAB 
#     ----------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKL 
#     ---------- 
#
           CALL DIJKLAAAA 
           CALL DIJKLABAB 
           CALL DIJKLBBBB 
#
      ENDPROC DIJKL 
#     ------------- 
#
# ---------------------------------------------------------------------------- 
#
# Equivalent to gamma4*4 --> factor of 4 to match aces  
#
# ----------------------------------------------------------------------------
#
      PROC DIBJAAAAA 
#     -------------- 
#
      PARDO a, a1, i, i1 
#
            Tiaia[i,a1,i1,a]  = 0.0 
            TAiaia[i1,a,i,a1] = 0.0 
#
            GET t1a_old[a,i] 
            GET l1a_old[i1,a1] 
# 
            T1iaia[i,a1,i1,a]  = t1a_old[a,i]^l1a_old[i1,a1]    
            T1iaia[i,a1,i1,a] *= 0.125     
            Tiaia[i,a1,i1,a]  += T1iaia[i,a1,i1,a]  
#
            T2iaia[i1,a,i,a1]  = T1iaia[i,a1,i1,a]  
            TAiaia[i1,a,i,a1] += T2iaia[i1,a,i,a1]  
#
            DO i2  
#
               GET t1a_old[a,i2] 
#
               DO a2 
#
                  REQUEST T2old_aa[a,i,a2,i2]   
                  REQUEST L2old_aa[i1,a1,i2,a2]   
                  GET t1a_old[a2,i] 
#
                  Tiaai[i2,a2,a,i]           = T2old_aa[a,i,a2,i2] 
                  T1iaai[i1,a1,a,i]          = L2old_aa[i1,a1,i2,a2]*Tiaai[i2,a2,a,i]  
                  T1iaia[i,a1,i1,a]          = T1iaai[i1,a1,a,i]  
                  T1iaia[i,a1,i1,a]         *= 0.5   
                  PREPARE Vibja_aaaa[i,a1,i1,a] += T1iaia[i,a1,i1,a] 
#
                  T1iaia[i,a1,i1,a]         *= 0.25  
                  Tiaia[i,a1,i1,a]          += T1iaia[i,a1,i1,a]  
#
                  T2iaia[i1,a,i,a1]          = T1iaia[i,a1,i1,a]  
                  TAiaia[i1,a,i,a1]         += T2iaia[i1,a,i,a1]  
#
                  tai[a,i2]                  = t1a_old[a,i2]
                  T3iaia[i2,a2,i,a]          = t1a_old[a2,i]^tai[a,i2]
                  T2iaia[i1,a1,i,a]          = L2old_aa[i1,a1,i2,a2]*T3iaia[i2,a2,i,a]
                  T1iaia[i,a1,i1,a]          = T2iaia[i1,a1,i,a]
                  T1iaia[i,a1,i1,a]         *= -0.125
                  Tiaia[i,a1,i1,a]          += T1iaia[i,a1,i1,a]
#
                  T2iaia[i1,a,i,a1]          = T1iaia[i,a1,i1,a]  
                  TAiaia[i1,a,i,a1]         += T2iaia[i1,a,i,a1]  
#
               ENDDO a2 
#
            ENDDO i2 
#
            DO j 
            DO b 
#
               REQUEST T2old_ab[a,i,b,j]     
               REQUEST L2old_ab[i1,a1,j,b]    
#
               Tjbia[j,b,i,a]             = T2old_ab[a,i,b,j] 
               T2iaia[i1,a1,i,a]          = L2old_ab[i1,a1,j,b]*Tjbia[j,b,i,a]  
               T1iaia[i,a1,i1,a]          = T2iaia[i1,a1,i,a] 
               T1iaia[i,a1,i1,a]         *= 0.5   
               PREPARE Vibja_aaaa[i,a1,i1,a] += T1iaia[i,a1,i1,a] 
#
               T1iaia[i,a1,i1,a]         *= 0.25   
               Tiaia[i,a1,i1,a]          += T1iaia[i,a1,i1,a]  
#
               T2iaia[i1,a,i,a1]          = T1iaia[i,a1,i1,a]  
               TAiaia[i1,a,i,a1]         += T2iaia[i1,a,i,a1]  
#
            ENDDO b 
            ENDDO j 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tiaia(i,a1,i1,a)  *= 4.0 
#           TAiaia(i1,a,i,a1) *= 4.0 
#
            PREPARE Dibja_aaaa[i,a1,i1,a] += Tiaia[i,a1,i1,a]  
            PREPARE Dibja_aaaa[i1,a,i,a1] += TAiaia[i1,a,i,a1]  
#
      ENDPARDO a, a1, i, i1 
#
      server_barrier 
#
# Backtransform to AO representation 
# ---------------------------------- 
#
      PARDO sigma, a1, i, i1 
#
            Tiaix[i,a1,i1,sigma] = 0.0  
#
            DO a 
#
               REQUEST Dibja_aaaa[i,a1,i1,a] 
#
               T1iaix[i,a1,i1,sigma]  = Dibja_aaaa[i,a1,i1,a]*ca[sigma,a] 
               Tiaix[i,a1,i1,sigma]  += T1iaix[i,a1,i1,sigma]   
#
            ENDDO a 
#
            PREPARE Diaix[i,a1,i1,sigma] = Tiaix[i,a1,i1,sigma] 
#
      ENDPARDO sigma, a1, i, i1 
      server_barrier 
#
      PARDO sigma, nu, i, i1 
#
            Txiix[nu,i,i1,sigma] = 0.0  
            Tixix[i,nu,i1,sigma] = 0.0  
#
            DO a1  
#
               REQUEST Diaix[i,a1,i1,sigma] 
#
               T1ixix[i,nu,i1,sigma] = Diaix[i,a1,i1,sigma]*ca[nu,a1]  
               T1xiix[nu,i,i1,sigma] = T1ixix[i,nu,i1,sigma]  
#
               Tixix[i,nu,i1,sigma] += T1ixix[i,nu,i1,sigma]  
               Txiix[nu,i,i1,sigma] += T1xiix[nu,i,i1,sigma]  
#
            ENDDO a1 
#
            Txiix[nu,i,i1,sigma] *=  4.0  
            Tixix[i,nu,i1,sigma] *= -4.0  
#
            PREPARE Dixix[i,nu,i1,sigma] += Tixix[i,nu,i1,sigma] 
            PREPARE Dxiix[nu,i,i1,sigma] += Txiix[nu,i,i1,sigma] 
#
      ENDPARDO sigma, nu, i, i1 
      server_barrier 
#
# Done backtransformation 
# -----------------------
#
      ENDPROC DIBJAAAAA 
#     ------------------ 
#
# The D(iB,jA) block of the two-particle density matrix is calculated. 
#
      PROC DIBJAABAB 
#     -------------- 
#
      PARDO b1, b, i, i1 
#
            Tibib[i1,b1,i,b]  = 0.0 
            TAibib[i,b,i1,b1] = 0.0 
#
            DO j 
#
               GET t1b_old[b1,j] 
#
               DO a 
#
                  REQUEST T2old_ab[a,i,b1,j]  
                  REQUEST L2old_ab[i1,a,j,b] 
                  GET t1a_old[a,i] 
#
                  T1ibib[i1,b1,i,b]          = L2old_ab[i1,a,j,b]*T2old_ab[a,i,b1,j] 
                  T1ibib[i1,b1,i,b]         *= 0.125   
                  Tibib[i1,b1,i,b]          += T1ibib[i1,b1,i,b]  
#
                  T2ibib[i,b,i1,b1]          = T1ibib[i1,b1,i,b]  
                  TAibib[i,b,i1,b1]         += T2ibib[i,b,i1,b1]  
#
                  T2ibib[i,b,i1,b1]         *= 4.0  
                  PREPARE Vibja_abab[i,b,i1,b1] += T2ibib[i,b,i1,b1] 
#
                  Taibj[a,i,b1,j]            = t1a_old[a,i]^t1b_old[b1,j]
                  T1ibib[i1,b1,i,b]          = L2old_ab[i1,a,j,b]*Taibj[a,i,b1,j] 
                  T1ibib[i1,b1,i,b]         *= 0.125   
                  Tibib[i1,b1,i,b]          += T1ibib[i1,b1,i,b]  
#
                  T2ibib[i,b,i1,b1]          = T1ibib[i1,b1,i,b]  
                  TAibib[i,b,i1,b1]         += T2ibib[i,b,i1,b1]  
#
               ENDDO a 
#
            ENDDO j 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tibib(i1,b1,i,b)  *= 4.0 
#           TAibib(i,b,i1,b1) *= 4.0 
#
            PREPARE Dibja_abab[i1,b1,i,b] += Tibib[i1,b1,i,b] 
            PREPARE Dibja_abab[i,b,i1,b1] += TAibib[i,b,i1,b1] 
#
      ENDPARDO b1, b, i, i1 
#
      server_barrier 
#
# Backtransform to AO representation 
# ---------------------------------- 
#
      PARDO sigma, b1, i, i1 
#
            Tibix[i,b1,i1,sigma] = 0.0  
#
            DO b 
#
               REQUEST Dibja_abab[i,b1,i1,b] 
#
               T1ibix[i,b1,i1,sigma] = Dibja_abab[i,b1,i1,b]*cb[sigma,b] 
               Tibix[i,b1,i1,sigma] += T1ibix[i,b1,i1,sigma]  
#
            ENDDO b 
#
            PREPARE Dibix[i,b1,i1,sigma] = Tibix[i,b1,i1,sigma] 
#
      ENDPARDO sigma, b1, i, i1 
      server_barrier 
#
      PARDO sigma, nu, i, i1 
#
            Tixix[i,nu,i1,sigma] = 0.0  
#
            DO b1  
#
               REQUEST Dibix[i,b1,i1,sigma]   
#
               T1ixix[i,nu,i1,sigma] = Dibix[i,b1,i1,sigma]*cb[nu,b1]  
               Tixix[i,nu,i1,sigma] += T1ixix[i,nu,i1,sigma]  
#
            ENDDO b1 
#
            Tixix[i,nu,i1,sigma]         *= -4.0  
            PREPARE Dixix[i,nu,i1,sigma] += Tixix[i,nu,i1,sigma] 
#
      ENDPARDO sigma, nu, i, i1 
      server_barrier 
#
# Done backtransformation 
# -----------------------
#
      ENDPROC DIBJAABAB 
#     ------------------ 
#
# The D(Ib,Ja) block of the two-particle density matrix is calculated. 
#
      PROC DIBJABABA 
#     --------------  
#
      PARDO a, a1, j1, j 
#
            Tjaja[j,a,j1,a1] = 0.0 
            TAjaja[j1,a1,j,a] = 0.0 
#
            DO i 
#
               GET t1a_old[a,i] 
#
               DO b 
#
                  REQUEST T2old_ab[a,i,b,j1]  
                  REQUEST L2old_ab[i,a1,j,b]  
                  GET t1b_old[b,j1]
#
#                 T1jaja(j,a,j1,a1)          = L2old_ab(i,a1,j,b)*T2old_ab(a,i,b,j1)

                  Tjaib[j,a1,i,b]            = L2old_ab[i,a1,j,b]
                  Tibaj[i,b,a,j1]            = T2old_ab[a,i,b,j1]
                  Tjaaj[j,a1,a,j1]           = Tjaib[j,a1,i,b]*Tibaj[i,b,a,j1]
                  T1jaja[j,a,j1,a1]          = Tjaaj[j,a1,a,j1]
#
                  T1jaja[j,a,j1,a1]         *= 0.125
                  Tjaja[j,a,j1,a1]          += T1jaja[j,a,j1,a1]
#
                  T2jaja[j1,a1,j,a]          = T1jaja[j,a,j1,a1]
                  TAjaja[j1,a1,j,a]         += T2jaja[j1,a1,j,a]
#
                  T2jaja[j1,a1,j,a]         *= 4.0
                  PREPARE Vibja_baba[j1,a1,j,a] += T2jaja[j1,a1,j,a]
#
                  Tbjai[b,j1,a,i]            = t1b_old[b,j1]^t1a_old[a,i]
                  T1jaja[j,a,j1,a1]          = L2old_ab[i,a1,j,b]*Tbjai[b,j1,a,i]
                  T1jaja[j,a,j1,a1]         *= 0.125
                  Tjaja[j,a,j1,a1]          += T1jaja[j,a,j1,a1]
#
                  T2jaja[j1,a1,j,a]          = T1jaja[j,a,j1,a1]
                  TAjaja[j1,a1,j,a]         += T2jaja[j1,a1,j,a]
#
               ENDDO b 
#
            ENDDO i 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tjaja(j,a,j1,a1)  *= 4.0 
#           TAjaja(j1,a1,j,a) *= 4.0 
#
            PREPARE Dibja_baba[j,a,j1,a1] += Tjaja[j,a,j1,a1] 
            PREPARE Dibja_baba[j1,a1,j,a] += TAjaja[j1,a1,j,a]  
#
      ENDPARDO a, a1, j1, j 
#
      server_barrier 
#
# Backtransform to AO representation 
# ---------------------------------- 
#
      PARDO sigma, a1, j, j1 
#
            Tjajx[j,a1,j1,sigma] = 0.0  
#
            DO a 
#
               REQUEST Dibja_baba[j,a1,j1,a] 
#
               T1jajx[j,a1,j1,sigma] = Dibja_baba[j,a1,j1,a]*ca[sigma,a] 
               Tjajx[j,a1,j1,sigma] += T1jajx[j,a1,j1,sigma]  
#
            ENDDO a 
#
            PREPARE Djajx[j,a1,j1,sigma] = Tjajx[j,a1,j1,sigma] 
#
      ENDPARDO sigma, a1, j, j1 
      server_barrier 
#
      PARDO sigma, nu, j, j1 
#
            Tjxjx[j,nu,j1,sigma] = 0.0  
#
            DO a1 
#
               REQUEST Djajx[j,a1,j1,sigma] 
#
               T1jxjx[j,nu,j1,sigma] = Djajx[j,a1,j1,sigma]*ca[nu,a1]  
               Tjxjx[j,nu,j1,sigma] += T1jxjx[j,nu,j1,sigma]  
#
            ENDDO a1 
#
            Tjxjx[j,nu,j1,sigma]         *= -4.0  
            PREPARE Djxjx[j,nu,j1,sigma] += Tjxjx[j,nu,j1,sigma] 
#
      ENDPARDO sigma, nu, j, j1 
      server_barrier 
#
# Done backtransformation 
# -----------------------
#
      ENDPROC DIBJABABA 
#     ------------------ 
#
      PROC DIBJABBBB 
#     --------------- 
#
      PARDO b, b1, j, j1
#
            Tjbjb[j,b1,j1,b]  = 0.0
            TAjbjb[j1,b,j,b1] = 0.0
#
            GET t1b_old[b,j]
            GET l1b_old[j1,b1]
#
            T1jbjb[j,b1,j1,b]  = t1b_old[b,j]^l1b_old[j1,b1]
            T1jbjb[j,b1,j1,b] *= 0.125
            Tjbjb[j,b1,j1,b]  += T1jbjb[j,b1,j1,b]
#
            T2jbjb[j1,b,j,b1]  = T1jbjb[j,b1,j1,b]
            TAjbjb[j1,b,j,b1] += T2jbjb[j1,b,j,b1]
#
            DO j2
#
               GET t1b_old[b,j2]
#
               DO b2
#
                  REQUEST T2old_bb[b,j,b2,j2]  
                  REQUEST L2old_bb[j1,b1,j2,b2] 
                  GET t1b_old[b2,j]
#
                  T3jbjb[j2,b2,j,b]          = T2old_bb[b,j,b2,j2]
                  T2jbjb[j1,b1,j,b]          = L2old_bb[j1,b1,j2,b2]*T3jbjb[j2,b2,j,b]
                  T1jbjb[j,b1,j1,b]          = T2jbjb[j1,b1,j,b]
                  T1jbjb[j,b1,j1,b]         *= 0.5
                  PREPARE Vibja_bbbb[j,b1,j1,b] += T1jbjb[j,b1,j1,b]
#
                  T1jbjb[j,b1,j1,b]         *= 0.25
                  Tjbjb[j,b1,j1,b]          += T1jbjb[j,b1,j1,b]
#
                  T2jbjb[j1,b,j,b1]          = T1jbjb[j,b1,j1,b]
                  TAjbjb[j1,b,j,b1]         += T2jbjb[j1,b,j,b1]
#
                  tbj[b,j2]                 = t1b_old[b,j2]
                  Tjbbj[j2,b2,b,j]          = t1b_old[b2,j]^tbj[b,j2]

                  T1jbbj[j1,b1,b,j]         = L2old_bb[j1,b1,j2,b2]*Tjbbj[j2,b2,b,j]
                  T1jbjb[j,b1,j1,b]         = T1jbbj[j1,b1,b,j]
                  T1jbjb[j,b1,j1,b]        *= -0.125
                  Tjbjb[j,b1,j1,b]         += T1jbjb[j,b1,j1,b]
#
                  T2jbjb[j1,b,j,b1]         = T1jbjb[j,b1,j1,b]
                  TAjbjb[j1,b,j,b1]        += T2jbjb[j1,b,j,b1] 
#
               ENDDO b2
#
            ENDDO j2
#
            DO i
            DO a
#
               REQUEST T2old_ab[a,i,b,j]   
               REQUEST L2old_ab[i,a,j1,b1]  
#
               Tjbia[j,b,i,a]             = T2old_ab[a,i,b,j]  
               T2jbjb[j,b,j1,b1]          = Tjbia[j,b,i,a]*L2old_ab[i,a,j1,b1]  
               T1jbjb[j,b1,j1,b]          = T2jbjb[j,b,j1,b1] 
               T1jbjb[j,b1,j1,b]         *= 0.5 
               PREPARE Vibja_bbbb[j,b1,j1,b] += T1jbjb[j,b1,j1,b]
#
               T1jbjb[j,b1,j1,b]         *= 0.25
               Tjbjb[j,b1,j1,b]          += T1jbjb[j,b1,j1,b]
#
               T2jbjb[j1,b,j,b1]          = T1jbjb[j,b1,j1,b]
               TAjbjb[j1,b,j,b1]         += T2jbjb[j1,b,j,b1]
#
            ENDDO a
            ENDDO i
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tjbjb(j,b1,j1,b)  *= 4.0 
#           TAjbjb(j1,b,j,b1) *= 4.0 
#
            PREPARE Dibja_bbbb[j,b1,j1,b] += Tjbjb[j,b1,j1,b]
            PREPARE Dibja_bbbb[j1,b,j,b1] += TAjbjb[j1,b,j,b1]
#
      ENDPARDO b, b1, j, j1
#
      server_barrier 
#
# Backtransform to AO representation 
# ---------------------------------- 
#
      PARDO sigma, b1, j, j1 
#
            Tjbjx[j,b1,j1,sigma] = 0.0  
#
            DO b 
#
               REQUEST Dibja_bbbb[j,b1,j1,b] 
#
               T1jbjx[j,b1,j1,sigma] = Dibja_bbbb[j,b1,j1,b]*cb[sigma,b] 
               Tjbjx[j,b1,j1,sigma] += T1jbjx[j,b1,j1,sigma]  
#
            ENDDO b 
#
            PREPARE Djbjx[j,b1,j1,sigma] = Tjbjx[j,b1,j1,sigma] 
#
      ENDPARDO sigma, b1, j, j1 
      server_barrier 
#
      PARDO sigma, nu, j, j1 
#
            Txjjx[nu,j,j1,sigma] = 0.0  
            Tjxjx[j,nu,j1,sigma] = 0.0  
#
            DO b1 
#
               REQUEST Djbjx[j,b1,j1,sigma] 
#
               T1jxjx[j,nu,j1,sigma]      = Djbjx[j,b1,j1,sigma]*cb[nu,b1]  
               T1xjjx[nu,j,j1,sigma]      = T1jxjx[j,nu,j1,sigma]  
#
               Tjxjx[j,nu,j1,sigma]      += T1jxjx[j,nu,j1,sigma]  
               Txjjx[nu,j,j1,sigma]      += T1xjjx[nu,j,j1,sigma]  
#
            ENDDO b1 
#
            Txjjx[nu,j,j1,sigma]         *=  4.0  
            Tjxjx[j,nu,j1,sigma]         *= -4.0  
#
            PREPARE Djxjx[j,nu,j1,sigma] += Tjxjx[j,nu,j1,sigma] 
            PREPARE Dxjjx[nu,j,j1,sigma] += Txjjx[nu,j,j1,sigma] 
#
      ENDPARDO sigma, nu, j, j1 
      server_barrier 
#
# Done backtransformation 
# -----------------------
#
      ENDPROC DIBJABBBB 
#     ------------------ 
#
      PROC DIBJAABBA 
#     --------------- 
#
      PARDO i, a, b, j 
#
            Tiajb[i,a,j,b] = 0.0  
#
            GET l1b_old[j,b] 
            GET t1a_old[a,i] 
#
            GET l1a_old[i,a] 
            GET t1b_old[b,j] 
#
            T1iajb[i,a,j,b]  = t1a_old[a,i]^l1b_old[j,b] 
            T1iajb[i,a,j,b] *= 0.125  
            Tiajb[i,a,j,b]  += T1iajb[i,a,j,b] 
#
            T1iajb[i,a,j,b]  = l1a_old[i,a]^t1b_old[b,j] 
            T1iajb[i,a,j,b] *= 0.125  
            Tiajb[i,a,j,b]  += T1iajb[i,a,j,b] 
#
            DO i1 
#
               GET t1a_old[a,i1] 
               tai[a,i1]                   = t1a_old[a,i1] 
#
               DO a1 
#
                  REQUEST T2old_aa[a,i,a1,i1] 
                  REQUEST L2old_ab[i1,a1,j,b]  
                  REQUEST T2old_ab[a1,i1,b,j]  
                  REQUEST L2old_aa[i1,a1,i,a]  
                  GET t1a_old[a1,i]
#
                  T1iajb[i,a,j,b]          = T2old_aa[a,i,a1,i1]*L2old_ab[i1,a1,j,b]
                  T1iajb[i,a,j,b]         *= 0.125
                  Tiajb[i,a,j,b]          += T1iajb[i,a,j,b]
#
                  Tibja[i,b,j,a]           = T1iajb[i,a,j,b]
                  Tibja[i,b,j,a]          *= 4.0
                  PREPARE Vibja_abba[i,b,j,a] += Tibja[i,b,j,a]
#
#                 T1iajb(i,a,j,b)          = T2old_ab(a1,i1,b,j)*L2old_aa(i1,a1,i,a)
#
                  Tiaia[i,a,i1,a1]         = L2old_aa[i1,a1,i,a]
                  T2iajb[i1,a1,j,b]        = T2old_ab[a1,i1,b,j]
                  T1iajb[i,a,j,b]          = Tiaia[i,a,i1,a1]*T2iajb[i1,a1,j,b]
#
                  T1iajb[i,a,j,b]         *= 0.125
                  Tiajb[i,a,j,b]          += T1iajb[i,a,j,b]
#
                  Tiaia[i,a,i1,a1]         = t1a_old[a1,i]^tai[a,i1]
                  T1iajb[i,a,j,b]          = Tiaia[i,a,i1,a1]*L2old_ab[i1,a1,j,b]
                  T1iajb[i,a,j,b]         *= -0.125
                  Tiajb[i,a,j,b]          += T1iajb[i,a,j,b]
#
               ENDDO a1 
#
            ENDDO i1 
#
            DO j1 
#
               GET t1b_old[b,j1] 
               tbj[b,j1]               = t1b_old[b,j1] 
#
               DO b1 
#
                  REQUEST T2old_ab[a,i,b1,j1]  
                  REQUEST L2old_bb[j1,b1,j,b]  
                  REQUEST T2old_bb[b,j,b1,j1]  
                  REQUEST L2old_ab[i,a,j1,b1]  
                  GET t1b_old[b1,j]
#
                  T1iajb[i,a,j,b]          = T2old_ab[a,i,b1,j1]*L2old_bb[j1,b1,j,b]
                  T1iajb[i,a,j,b]         *= 0.125
                  Tiajb[i,a,j,b]          += T1iajb[i,a,j,b]
#
                  Tibja[i,b,j,a]           = T1iajb[i,a,j,b]
                  Tibja[i,b,j,a]          *= 4.0
                  PREPARE Vibja_abba[i,b,j,a] += Tibja[i,b,j,a]
#
#                 T1iajb(i,a,j,b)          = T2old_bb(b,j,b1,j1)*L2old_ab(i,a,j1,b1)
#
                  Tjbjb[j1,b1,j,b]         = T2old_bb[b,j,b1,j1]
                  T1iajb[i,a,j,b]          = L2old_ab[i,a,j1,b1]*Tjbjb[j1,b1,j,b]
                  T1iajb[i,a,j,b]         *= 0.125
                  Tiajb[i,a,j,b]          += T1iajb[i,a,j,b]
#
                  Tjbjb[j,b,j1,b1]         = t1b_old[b1,j]^tbj[b,j1]
                  T1iajb[i,a,j,b]          = Tjbjb[j,b,j1,b1]*L2old_ab[i,a,j1,b1]
                  T1iajb[i,a,j,b]         *= -0.125
                  Tiajb[i,a,j,b]          += T1iajb[i,a,j,b]
#
               ENDDO b1 
#
            ENDDO j1 
#
# Multiply by 4(VFL) to match aces: Note the 'switched' storage pattern  
# ---------------------------------------------------------------------  
#
#           Tiajb(i,a,j,b)          *= 4.0 
            Tibja[i,b,j,a]           = Tiajb[i,a,j,b] 
            PREPARE Dibja_abba[i,b,j,a] += Tibja[i,b,j,a]  
#
      ENDPARDO i, a, b, j 
#
      server_barrier 
#
# Backtransform to AO representation 
# ---------------------------------- 
#
      PARDO sigma, b1, i, j1 
#
            Tibjx[i,b1,j1,sigma] = 0.0  
#
            DO a 
#
               REQUEST Dibja_abba[i,b1,j1,a] 
#
               T1ibjx[i,b1,j1,sigma] = Dibja_abba[i,b1,j1,a]*ca[sigma,a] 
               Tibjx[i,b1,j1,sigma] += T1ibjx[i,b1,j1,sigma]  
#
            ENDDO a 
#
            PREPARE Dibjx[i,b1,j1,sigma] = Tibjx[i,b1,j1,sigma] 
#
      ENDPARDO sigma, b1, i, j1 
      server_barrier 
#
      PARDO sigma, nu, i, j1 
#
            Tixxj[i,nu,sigma,j1] = 0.0  
#
            DO b1 
#
               REQUEST Dibjx[i,b1,j1,sigma] 
#
               T1ixxj[i,nu,sigma,j1] = Dibjx[i,b1,j1,sigma]*cb[nu,b1]  
               Tixxj[i,nu,sigma,j1] += T1ixxj[i,nu,sigma,j1]  
#
            ENDDO b1 
#
            Tixxj[i,nu,sigma,j1]         *= 4.0  
            PREPARE Dixxj[i,nu,sigma,j1] += Tixxj[i,nu,sigma,j1] 
#
      ENDPARDO sigma, nu, i, j1 
      server_barrier 
#
# Done backtransformation 
# -----------------------
#
      ENDPROC DIBJAABBA 
#     ------------------ 
# 
      PROC DIBJABAAB 
#     --------------- 
#
      PARDO j, b, a, i 
#
            Tjbia[j,b,i,a] = 0.0  
#
            GET t1a_old[a,i] 
            GET l1b_old[j,b] 
            GET t1b_old[b,j] 
            GET l1a_old[i,a] 
#
            T1jbia[j,b,i,a]  = l1b_old[j,b]^t1a_old[a,i] 
            T1jbia[j,b,i,a] *= 0.125  
            Tjbia[j,b,i,a]  += T1jbia[j,b,i,a] 
#
            T1jbia[j,b,i,a]  = l1a_old[i,a]^t1b_old[b,j] 
            T1jbia[j,b,i,a] *= 0.125  
            Tjbia[j,b,i,a]  += T1jbia[j,b,i,a] 
#
            DO i1 
#
               GET t1a_old[a,i1] 
               tai[a,i1]                   = t1a_old[a,i1] 
#
               DO a1 
#
                  REQUEST T2old_ab[a1,i1,b,j]  
                  REQUEST L2old_aa[i1,a1,i,a] 
                  REQUEST T2old_aa[a,i,a1,i1]  
                  REQUEST L2old_ab[i1,a1,j,b]  
                  GET t1a_old[a1,i]
#
                  T1jbia[j,b,i,a]          = T2old_ab[a1,i1,b,j]*L2old_aa[i1,a1,i,a]
                  T1jbia[j,b,i,a]         *= 0.125
                  Tjbia[j,b,i,a]          += T1jbia[j,b,i,a]
#
                  Tjaib[j,a,i,b]           = T1jbia[j,b,i,a]
                  Tjaib[j,a,i,b]          *= 4.0
                  PREPARE Vibja_baab[j,a,i,b] += Tjaib[j,a,i,b]
#
#                 T1jbia(j,b,i,a)          = T2old_aa(a,i,a1,i1)*L2old_ab(i1,a1,j,b)
#
                  Taijb[a,i,j,b]           = T2old_aa[a,i,a1,i1]*L2old_ab[i1,a1,j,b]
                  T1jbia[j,b,i,a]          = Taijb[a,i,j,b]
#
                  T1jbia[j,b,i,a]         *= 0.125
                  Tjbia[j,b,i,a]          += T1jbia[j,b,i,a]
#
                  Tiaia[i,a,i1,a1]         = t1a_old[a1,i]^tai[a,i1]
                  T1jbia[j,b,i,a]          = Tiaia[i,a,i1,a1]*L2old_ab[i1,a1,j,b]
                  T1jbia[j,b,i,a]          *= -0.125
                  Tjbia[j,b,i,a]           += T1jbia[j,b,i,a]
#
               ENDDO a1 
#
            ENDDO i1 
#
            DO j1 
#
               GET t1b_old[b,j1] 
               tbj[b,j1] = t1b_old[b,j1] 
#
               DO b1 
#
                  REQUEST T2old_bb[b,j,b1,j1]  
                  REQUEST L2old_ab[i,a,j1,b1] 
                  REQUEST T2old_ab[a,i,b1,j1]
                  REQUEST L2old_bb[j,b,j1,b1]  
                  GET t1b_old[b1,j]
#
                  T1jbia[j,b,i,a]          = T2old_bb[b,j,b1,j1]*L2old_ab[i,a,j1,b1]
                  T1jbia[j,b,i,a]         *= 0.125
                  Tjbia[j,b,i,a]          += T1jbia[j,b,i,a]
#
                  Tjaib[j,a,i,b]           = T1jbia[j,b,i,a]
                  Tjaib[j,a,i,b]          *= 4.0
                  PREPARE Vibja_baab[j,a,i,b] += Tjaib[j,a,i,b]
#
#                 T1jbia(j,b,i,a)          = T2old_ab(a,i,b1,j1)*L2old_bb(j,b,j1,b1)
#
                  T2jbia[j1,b1,i,a]        = T2old_ab[a,i,b1,j1]
                  T1jbia[j,b,i,a]          = L2old_bb[j,b,j1,b1]*T2jbia[j1,b1,i,a]
#
                  T1jbia[j,b,i,a]         *= 0.125
                  Tjbia[j,b,i,a]          += T1jbia[j,b,i,a]
#
                  Tjbjb[j,b,j1,b1]         = t1b_old[b1,j]^tbj[b,j1]
                  T1jbia[j,b,i,a]          = Tjbjb[j,b,j1,b1]*L2old_ab[i,a,j1,b1]
                  T1jbia[j,b,i,a]         *= -0.125
                  Tjbia[j,b,i,a]          += T1jbia[j,b,i,a]
#
               ENDDO b1 
#
            ENDDO j1 
#
# Multiply by 4(VFL) to match aces 
# -------------------------------- 
#
#           Tjbia(j,b,i,a)          *= 4.0 
            Tjaib[j,a,i,b]           = Tjbia[j,b,i,a] 
            PREPARE Dibja_baab[j,a,i,b] += Tjaib[j,a,i,b] 
#
      ENDPARDO j, b, a, i 
#
      server_barrier 
#
# Backtransform to AO representation 
# ---------------------------------- 
#
      PARDO sigma, a1, j, i1 
#
            Tjaix[j,a1,i1,sigma] = 0.0  
#
            DO b 
#
               REQUEST Dibja_baab[j,a1,i1,b] 
#
               T1jaix[j,a1,i1,sigma] = Dibja_baab[j,a1,i1,b]*cb[sigma,b] 
               Tjaix[j,a1,i1,sigma] += T1jaix[j,a1,i1,sigma]  
#
            ENDDO b 
#
            PREPARE Djaix[j,a1,i1,sigma] = Tjaix[j,a1,i1,sigma] 
#
      ENDPARDO sigma, a1, j, i1 
      server_barrier 
#
      PARDO sigma, nu, j, i1 
#
            Tixxj[i1,sigma,nu,j] = 0.0  
#
            DO a1 
#
               REQUEST Djaix[j,a1,i1,sigma] 
#
               T1ixxj[i1,sigma,nu,j] = Djaix[j,a1,i1,sigma]*ca[nu,a1]  
               Tixxj[i1,sigma,nu,j] += T1ixxj[i1,sigma,nu,j]  
#
            ENDDO a1 
#
            Tixxj[i1,sigma,nu,j]         *= 4.0  
            PREPARE Dixxj[i1,sigma,nu,j] += Tixxj[i1,sigma,nu,j] 
#
      ENDPARDO sigma, nu, j, i1 
      server_barrier 
#
# Done backtransformation 
# -----------------------
#
      ENDPROC DIBJABAAB
#     ------------------ 
#
# ----------------------------------------------------------------------------
#
      PROC DIBJA  
#
        CALL DIBJAAAAA # BTRAN OK
        CALL DIBJABBBB # BTRAN OK
#
        CALL DIBJAABAB # BTRAN OK 
        CALL DIBJABABA # BTRAN OK 
#
        CALL DIBJABAAB # BTRAN OK  
        CALL DIBJAABBA # BTRAN OK  
#
      ENDPROC DIBJA 
#
# ----------------------------------------------------------------------------
#
      PROC I2XX 
#     --------- 
# 
# ------------------------------------------------------------------------- 
#
# Form the two-particle intermediate I3aa, I3bb, I3ab, and I3ba  needed in 
# place of V^{ab}_{cd}. 
#
# ------------------------------------------------------------------------- 
#
# Form the intermediate I3aa 
# -------------------------- 
#
      PARDO a, a1 
#
            DO i2 
            DO i1 
            DO i 
#
               REQUEST L2old_aa[i2,a,i1,a1]  
               GET t1a_old[a1,i] 
#
               Tiaii[i2,a,i1,i] = L2old_aa[i2,a,i1,a1]*t1a_old[a1,i] 
               PREPARE I3aa[i2,a,i1,i] += Tiaii[i2,a,i1,i] 
#
            ENDDO i 
            ENDDO i1 
            ENDDO i2 
#
      ENDPARDO a, a1 
#
# Form the intermediate I3bb 
# -------------------------- 
#
      PARDO b, b1 
#
            DO j2 
            DO j1 
            DO j 
#
               REQUEST L2old_bb[j2,b,j1,b1] 
               GET t1b_old[b1,j] 
#
               Tjbjj[j2,b,j1,j] = L2old_bb[j2,b,j1,b1]*t1b_old[b1,j] 
               PREPARE I3bb[j2,b,j1,j] += Tjbjj[j2,b,j1,j] 
#
            ENDDO j 
            ENDDO j1 
            ENDDO j2 
#
      ENDPARDO b, b1 

#
# Form the intermediate I3ab 
# -------------------------- 
#
      PARDO a, b1 
#
            DO i2 
            DO j1 
            DO j 
#
               REQUEST L2old_ab[i2,a,j1,b1] 
               GET t1b_old[b1,j] 
#
               Tiajj[i2,a,j1,j] = L2old_ab[i2,a,j1,b1]*t1b_old[b1,j] 
               PREPARE I3ab[i2,a,j1,j] += Tiajj[i2,a,j1,j] 
#
            ENDDO j 
            ENDDO j1 
            ENDDO i2 
#
      ENDPARDO a, b1 

#
# Form the intermediate I3ba 
# -------------------------- 
#
      PARDO b, a1 
#
            DO j 
            DO i1 
            DO i 
#
               REQUEST L2old_ab[i1,a1,j,b]   
               GET t1a_old[a1,i] 
#
               Tjbii[j,b,i1,i] = L2old_ab[i1,a1,j,b]*t1a_old[a1,i] 
               PREPARE I3ba[j,b,i1,i] += Tjbii[j,b,i1,i] 
#
            ENDDO i 
            ENDDO i1 
            ENDDO j 
#
      ENDPARDO b, a1 
#
      ENDPROC I2XX 
#     ------------ 
# 
# ------------------------------------------------------------------------- 
#
# Start the calculation of the D^{ab}_{ci} type contributions to the
# density. Equivalent to Gamma5   
#
# ------------------------------------------------------------------------- 
#
      PROC DABCIAAAA 
#     ---------------
#
      PARDO a, a1, a2, i 
#
            Taaai[a,a1,a2,i] = 0.0  
#
            GET Gae_a[a2,a] 
            GET t1a_old[a1,i] 
            GET Gae_a[a2,a1] 
            GET t1a_old[a,i] 
#
            T1aaai[a,a1,a2,i]  = Gae_a[a2,a]^t1a_old[a1,i] 
            T1aaai[a,a1,a2,i] *= -0.125 
            Taaai[a,a1,a2,i]  += T1aaai[a,a1,a2,i]  
#
            T1aaai[a,a1,a2,i]  = Gae_a[a2,a1]^t1a_old[a,i]
            T1aaai[a,a1,a2,i] *= 0.125
            Taaai[a,a1,a2,i]  += T1aaai[a,a1,a2,i]
#
            DO i1 
#
               REQUEST Tau_aa[a,i1,a1,i]      
               REQUEST L2old_aa[i1,a,i,a1]    
               REQUEST Vibja_aaaa[i,a2,i1,a]    
               REQUEST Vibja_aaaa[i,a2,i1,a1]   
               GET l1a_old[i1,a2] 
               GET t1a_old[a2,i1] 
               GET t1a_old[a1,i1] 
               GET t1a_old[a,i1] 
#
               T1aaai[a,a1,a2,i]  = Tau_aa[a,i1,a1,i]*l1a_old[i1,a2] 
               T1aaai[a,a1,a2,i] *= 0.125 
               Taaai[a,a1,a2,i]  += T1aaai[a,a1,a2,i]  
#
               T1aaai[a,a1,a2,i]  = L2old_aa[i1,a,i,a1]*t1a_old[a2,i1] 
               T1aaai[a,a1,a2,i] *= 0.125 
               Taaai[a,a1,a2,i]  += T1aaai[a,a1,a2,i]  
#
               T1aaai[a,a1,a2,i]  = Vibja_aaaa[i,a2,i1,a]*t1a_old[a1,i1]  
               T1aaai[a,a1,a2,i] *= -0.25 
               Taaai[a,a1,a2,i]  += T1aaai[a,a1,a2,i]  
#
               T1aaai[a,a1,a2,i]  = Vibja_aaaa[i,a2,i1,a1]*t1a_old[a,i1]  
               T1aaai[a,a1,a2,i] *= 0.25 
               Taaai[a,a1,a2,i]  += T1aaai[a,a1,a2,i]  
#
               DO i2 
#
                  REQUEST I3aa[i1,a2,i2,i]   
                  REQUEST Tau_aa[a,i1,a1,i2] 
#
#                 T1aaai(a,a1,a2,i)  = Tau_aa(a,i1,a1,i2)*I3aa(i1,a2,i2,i)
#
                  Taaii[a,a1,i1,i2]  = Tau_aa[a,i1,a1,i2]
                  Tiiai[i1,i2,a2,i]  = I3aa[i1,a2,i2,i]
                  T1aaai[a,a1,a2,i]  = Taaii[a,a1,i1,i2]*Tiiai[i1,i2,a2,i]
                  T1aaai[a,a1,a2,i] *= -0.0625
                  Taaai[a,a1,a2,i]  += T1aaai[a,a1,a2,i]
#
               ENDDO i2 
#
            ENDDO i1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Taaai(a,a1,a2,i) *= 4.0 
#
#           PUT Dabci_aaaa(a,a1,a2,i) += Taaai(a,a1,a2,i) 
# 
            DO mu 
#
               Txaai[mu,a1,a2,i]      = Taaai[a,a1,a2,i]*ca[mu,a] 
               PREPARE Dxaai[mu,a1,a2,i] += Txaai[mu,a1,a2,i]  
# 
            ENDDO mu 
# 
      ENDPARDO a, a1, a2, i 
#
# Back transform to full AO representation
# ---------------------------------------- 
# 
      server_barrier 
      PARDO mu, a1, a2, i 
#
            REQUEST Dxaai[mu,a1,a2,i] 
# 
            DO nu 
#
               Txxai[mu,nu,a2,i]      = Dxaai[mu,a1,a2,i]*ca[nu,a1] 
               PREPARE Dxxai[mu,nu,a2,i] += Txxai[mu,nu,a2,i]  
# 
            ENDDO nu 
# 
      ENDPARDO mu, a1, a2, i 
      server_barrier 
#
      PARDO mu, nu, i 
#
            allocate Lxxai[mu,nu,*,i] 
#
            DO a2 
#
               REQUEST Dxxai[mu,nu,a2,i] 
               Lxxai[mu,nu,a2,i] = Dxxai[mu,nu,a2,i] 
#
            ENDDO a2 
#
            DO lambda 
#
               Txxxi[mu,nu,lambda,i] = 0.0 
# 
               DO a2   
#
                  T1xxxi[mu,nu,lambda,i] = Lxxai[mu,nu,a2,i]*ca[lambda,a2] 
                  Txxxi[mu,nu,lambda,i] += T1xxxi[mu,nu,lambda,i]  
# 
               ENDDO a2  
#
               PREPARE Dxxxi[mu,nu,lambda,i] = Txxxi[mu,nu,lambda,i]  
#
            ENDDO lambda 
#
            deallocate Lxxai[mu,nu,*,i] 
#
      ENDPARDO mu, nu, i 
      server_barrier 
#
# Done back transformation 
# ------------------------ 
#
      ENDPROC DABCIAAAA 
#     ------------------
#
      PROC DABCIBBBB 
#     ---------------
#
      PARDO b, b1, b2, j 
#
            Tbbbj[b,b1,b2,j] = 0.0  
#
            GET Gae_b[b2,b] 
            GET t1b_old[b1,j] 
            GET Gae_b[b2,b1] 
            GET t1b_old[b,j] 
#
            T1bbbj[b,b1,b2,j]  = Gae_b[b2,b]^t1b_old[b1,j] 
            T1bbbj[b,b1,b2,j] *= -0.125 
            Tbbbj[b,b1,b2,j]  += T1bbbj[b,b1,b2,j]  
#
            T1bbbj[b,b1,b2,j]  = Gae_b[b2,b1]^t1b_old[b,j] 
            T1bbbj[b,b1,b2,j] *= 0.125 
            Tbbbj[b,b1,b2,j]  += T1bbbj[b,b1,b2,j]  
#
            DO j1 
#
               REQUEST Tau_bb[b,j1,b1,j]     
               REQUEST L2old_bb[j1,b,j,b1]    
               REQUEST Vibja_bbbb[j,b2,j1,b]    
               REQUEST Vibja_bbbb[j,b2,j1,b1]   
               GET l1b_old[j1,b2] 
               GET t1b_old[b2,j1] 
               GET t1b_old[b1,j1] 
               GET t1b_old[b,j1] 
#
               T1bbbj[b,b1,b2,j]  = Tau_bb[b,j1,b1,j]*l1b_old[j1,b2] 
               T1bbbj[b,b1,b2,j] *= 0.125 
               Tbbbj[b,b1,b2,j]  += T1bbbj[b,b1,b2,j]  
#
               T1bbbj[b,b1,b2,j]  = L2old_bb[j1,b,j,b1]*t1b_old[b2,j1] 
               T1bbbj[b,b1,b2,j] *= 0.125 
               Tbbbj[b,b1,b2,j]  += T1bbbj[b,b1,b2,j]  
#
               T1bbbj[b,b1,b2,j]  = Vibja_bbbb[j,b2,j1,b]*t1b_old[b1,j1]  
               T1bbbj[b,b1,b2,j] *= -0.25 
               Tbbbj[b,b1,b2,j]  += T1bbbj[b,b1,b2,j]  
#
               T1bbbj[b,b1,b2,j]  = Vibja_bbbb[j,b2,j1,b1]*t1b_old[b,j1]  
               T1bbbj[b,b1,b2,j] *= 0.25 
               Tbbbj[b,b1,b2,j]  += T1bbbj[b,b1,b2,j]  
#
               DO j2 
#
                  REQUEST I3bb[j1,b2,j2,j]   
                  REQUEST Tau_bb[b,j1,b1,j2]  
#
#                 T1bbbj(b,b1,b2,j)  = Tau_bb(b,j1,b1,j2)*I3bb(j1,b2,j2,j)
                  Tbbjj[b,b1,j1,j2]  = Tau_bb[b,j1,b1,j2]
                  Tjjbj[j1,j2,b2,j]  = I3bb[j1,b2,j2,j]
                  T1bbbj[b,b1,b2,j]  = Tbbjj[b,b1,j1,j2]*Tjjbj[j1,j2,b2,j]
                  T1bbbj[b,b1,b2,j] *= -0.0625
                  Tbbbj[b,b1,b2,j]  += T1bbbj[b,b1,b2,j]
#
               ENDDO j2 
#
            ENDDO j1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tbbbj(b,b1,b2,j) *= 4.0 
#
#           PUT Dabci_bbbb(b,b1,b2,j) += Tbbbj(b,b1,b2,j) 
# 
            DO mu 
#
               Txbbj[mu,b1,b2,j]      = Tbbbj[b,b1,b2,j]*cb[mu,b] 
               PREPARE Dxbbj[mu,b1,b2,j] += Txbbj[mu,b1,b2,j]  
# 
            ENDDO mu 
# 
      ENDPARDO b, b1, b2, j 
#
# Back transform to full AO representation
# ---------------------------------------- 
# 
      server_barrier 
      PARDO mu, b1, b2, j 
#
            REQUEST Dxbbj[mu,b1,b2,j] 
# 
            DO nu 
#
               Txxbj[mu,nu,b2,j]      = Dxbbj[mu,b1,b2,j]*cb[nu,b1] 
               PREPARE Dxxbj[mu,nu,b2,j] += Txxbj[mu,nu,b2,j]  
# 
            ENDDO nu 
# 
      ENDPARDO mu, b1, b2, j 
      server_barrier 
#
      PARDO mu, nu, j 
#
            allocate Lxxbj[mu,nu,*,j] 
#
            DO b2 
#
               REQUEST Dxxbj[mu,nu,b2,j]   
               Lxxbj[mu,nu,b2,j] = Dxxbj[mu,nu,b2,j] 
#
            ENDDO b2 
#
            DO lambda 
#
               Txxxj[mu,nu,lambda,j] = 0.0 
# 
               DO b2   
#
                  T1xxxj[mu,nu,lambda,j] = Lxxbj[mu,nu,b2,j]*cb[lambda,b2] 
                  Txxxj[mu,nu,lambda,j] += T1xxxj[mu,nu,lambda,j]  
# 
               ENDDO b2  
#
               PREPARE Dxxxj[mu,nu,lambda,j] = Txxxj[mu,nu,lambda,j]  
#
            ENDDO lambda 
#
            deallocate Lxxbj[mu,nu,*,j] 
#
      ENDPARDO mu, nu, j 
      server_barrier 
#
# Done back transformation 
# ------------------------ 
#
      ENDPROC DABCIBBBB 
#     ------------------
#
      PROC DABCIABAB 
#     --------------- 
#
      PARDO a, a1, b, j 
#
            Tabaj[a,b,a1,j] = 0.0 
#
            GET Gae_a[a,a1] 
            GET t1b_old[b,j] 
#
            T1abaj[a,b,a1,j]  = Gae_a[a,a1]^t1b_old[b,j] 
            T1abaj[a,b,a1,j] *= -0.125 
            Tabaj[a,b,a1,j]  += T1abaj[a,b,a1,j] 
#
            DO i 
#
               REQUEST Tau_ab[a,i,b,j]      
               REQUEST L2old_ab[i,a,j,b]      
               REQUEST Vibja_baab[j,a1,i,b]   
               GET l1a_old[i,a1] 
               GET t1a_old[a1,i] 
               GET t1a_old[a,i] 
#
               T1abaj[a,b,a1,j]  = Tau_ab[a,i,b,j]*l1a_old[i,a1] 
               T1abaj[a,b,a1,j] *= 0.125 
               Tabaj[a,b,a1,j]  += T1abaj[a,b,a1,j] 
#
               T1abaj[a,b,a1,j]  = L2old_ab[i,a,j,b]*t1a_old[a1,i]  
               T1abaj[a,b,a1,j] *= 0.125 
               Tabaj[a,b,a1,j]  += T1abaj[a,b,a1,j] 
#
               T1abaj[a,b,a1,j]  = Vibja_baab[j,a1,i,b]*t1a_old[a,i] 
               T1abaj[a,b,a1,j] *= 0.25 
               Tabaj[a,b,a1,j]  += T1abaj[a,b,a1,j] 
#
            ENDDO i 
#
            DO j1 
#
               REQUEST Vibja_baba[j,a1,j1,a]  
               GET t1b_old[b,j1] 
#
               T1abaj[a,b,a1,j]  = Vibja_baba[j,a1,j1,a]*t1b_old[b,j1] 
               T1abaj[a,b,a1,j] *= -0.25 
               Tabaj[a,b,a1,j]  += T1abaj[a,b,a1,j] 
#
               DO i 
#
                  REQUEST I3ab[i,a1,j1,j]  
                  REQUEST Tau_ab[a,i,b,j1]  
#
#                 T1abaj(a,b,a1,j)  = Tau_ab(a,i,b,j1)*I3ab(i,a1,j1,j)
#
                  Tabij[a,b,i,j1]   = Tau_ab[a,i,b,j1]
                  Tijaj[i,j1,a1,j]  = I3ab[i,a1,j1,j]
                  T1abaj[a,b,a1,j]  = Tabij[a,b,i,j1]*Tijaj[i,j1,a1,j]
                  T1abaj[a,b,a1,j] *= -0.125
                  Tabaj[a,b,a1,j]  += T1abaj[a,b,a1,j]
#
               ENDDO i 
#
            ENDDO j1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tabaj(a,b,a1,j) *= 4.0 
#
#           PUT Dabci_abab(a,b,a1,j) += Tabaj(a,b,a1,j) 
# 
            DO mu 
#
               Txbaj[mu,b,a1,j]      = Tabaj[a,b,a1,j]*ca[mu,a] 
               PREPARE Dxbaj[mu,b,a1,j] += Txbaj[mu,b,a1,j]  
# 
            ENDDO mu 
#
      ENDPARDO a, a1, b, j 
#
# Back transform to full AO representation
# ---------------------------------------- 
# 
      server_barrier 
      PARDO mu, b, a1, j 
#
            REQUEST Dxbaj[mu,b,a1,j]
# 
            DO nu 
#
               Txxaj[mu,nu,a1,j]      = Dxbaj[mu,b,a1,j]*cb[nu,b] 
               PREPARE Dxxaj[mu,nu,a1,j] += Txxaj[mu,nu,a1,j]  
# 
            ENDDO nu 
# 
      ENDPARDO mu, b, a1, j 
      server_barrier 
#
      PARDO mu, nu, j 
#
            allocate Lxxaj[mu,nu,*,j] 
#
            DO a1 
#
               REQUEST Dxxaj[mu,nu,a1,j] 
               Lxxaj[mu,nu,a1,j] = Dxxaj[mu,nu,a1,j] 
#
            ENDDO a1 
# 
            DO lambda    
#
               Txxxj[mu,nu,lambda,j] = 0.0 
#
               DO a1  
#
                  T1xxxj[mu,nu,lambda,j] = Lxxaj[mu,nu,a1,j]*ca[lambda,a1] 
                  Txxxj[mu,nu,lambda,j] += T1xxxj[mu,nu,lambda,j]   
#
               ENDDO a1  
#
               PREPARE Dxxxj[mu,nu,lambda,j] += Txxxj[mu,nu,lambda,j]  
# 
            ENDDO lambda   
#
            deallocate Lxxaj[mu,nu,*,j] 
# 
      ENDPARDO mu, nu, j 
      server_barrier 
#
# Done back transformation 
# ------------------------ 
#
      ENDPROC DABCIABAB 
#     ------------------ 
#
      PROC DABCIBABA 
#     --------------- 
#
      PARDO b1, b, a, i 
#
            Tbabi[b1,a,b,i] = 0.0 
#
            GET Gae_b[b1,b] 
            GET t1a_old[a,i] 
#
            T1babi[b1,a,b,i]  = Gae_b[b1,b]^t1a_old[a,i] 
            T1babi[b1,a,b,i] *= -0.125 
            Tbabi[b1,a,b,i]  += T1babi[b1,a,b,i] 
#
            DO j 
#
               REQUEST Tau_ab[a,i,b1,j]    
               REQUEST L2old_ab[i,a,j,b1]    
               REQUEST Vibja_abba[i,b,j,a]   
               GET l1b_old[j,b] 
               GET t1b_old[b,j] 
               GET t1b_old[b1,j] 
#
               T1babi[b1,a,b,i]  = Tau_ab[a,i,b1,j]*l1b_old[j,b] 
               T1babi[b1,a,b,i] *= 0.125 
               Tbabi[b1,a,b,i]  += T1babi[b1,a,b,i] 
#
               T1babi[b1,a,b,i]  = L2old_ab[i,a,j,b1]*t1b_old[b,j]  
               T1babi[b1,a,b,i] *= 0.125 
               Tbabi[b1,a,b,i]  += T1babi[b1,a,b,i] 
#
               T1babi[b1,a,b,i]  = Vibja_abba[i,b,j,a]*t1b_old[b1,j] 
               T1babi[b1,a,b,i] *= 0.25 
               Tbabi[b1,a,b,i]  += T1babi[b1,a,b,i] 
#
            ENDDO j 
#
            DO i1 
#
               REQUEST Vibja_abab[i,b,i1,b1]   
               GET t1a_old[a,i1] 
#
               T1babi[b1,a,b,i]  = Vibja_abab[i,b,i1,b1]*t1a_old[a,i1] 
               T1babi[b1,a,b,i] *= -0.25 
               Tbabi[b1,a,b,i]  += T1babi[b1,a,b,i] 
#
               DO j 
#
                  REQUEST I3ba[j,b,i1,i] 
                  REQUEST Tau_ab[a,i1,b1,j] 

#                 T1babi(b1,a,b,i)  = Tau_ab(a,i1,b1,j)*I3ba(j,b,i1,i)
#
                  Tbaji[b1,a,j,i1]  = Tau_ab[a,i1,b1,j]
                  Tjibi[j,i1,b,i]   = I3ba[j,b,i1,i]
                  T1babi[b1,a,b,i]  = Tbaji[b1,a,j,i1]*Tjibi[j,i1,b,i]
                  T1babi[b1,a,b,i] *= -0.125
                  Tbabi[b1,a,b,i]  += T1babi[b1,a,b,i]
#
               ENDDO j 
#
            ENDDO i1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tbabi(b1,a,b,i) *= 4.0 
#
#           PUT Dabci_baba(b1,a,b,i) += Tbabi(b1,a,b,i) 
# 
            DO mu 
#
               Txabi[mu,a,b,i]      = Tbabi[b1,a,b,i]*cb[mu,b1] 
               PREPARE Dxabi[mu,a,b,i] += Txabi[mu,a,b,i]  
# 
            ENDDO mu 
#
      ENDPARDO b1, b, a, i 
#
# Back transform to full AO representation
# ---------------------------------------- 
# 
      server_barrier 
      PARDO mu, a, b1, i 
#
            REQUEST Dxabi[mu,a,b1,i] 
# 
            DO nu 
#
               Txxbi[mu,nu,b1,i]      = Dxabi[mu,a,b1,i]*ca[nu,a] 
               PREPARE Dxxbi[mu,nu,b1,i] += Txxbi[mu,nu,b1,i]  
# 
            ENDDO nu 
# 
      ENDPARDO mu, a, b1, i 
      server_barrier 
#
      PARDO mu, nu, i 
#
            allocate Lxxbi[mu,nu,*,i] 
#
            DO b 
#
               REQUEST Dxxbi[mu,nu,b,i] 
               Lxxbi[mu,nu,b,i] = Dxxbi[mu,nu,b,i] 
#
            ENDDO b 
#
            DO lambda 
#
               Txxxi[mu,nu,lambda,i] = 0.0 
# 
               DO b  
#
                  T1xxxi[mu,nu,lambda,i] = Lxxbi[mu,nu,b,i]*cb[lambda,b] 
                  Txxxi[mu,nu,lambda,i] += T1xxxi[mu,nu,lambda,i]  
# 
               ENDDO b 
#
               PREPARE Dxxxi[mu,nu,lambda,i] += Txxxi[mu,nu,lambda,i]  
#
            ENDDO lambda 
#
            deallocate Lxxbi[mu,nu,*,i] 
#
      ENDPARDO mu, nu, i 
      server_barrier 
#
      ENDPROC DABCIBABA 
#     ------------------ 
#
# Delete distributed intermediate arrays 
# -------------------------------------- 
#
      PROC DABCI  
#     ---------- 
#
# Create distributed intermediate arrays 
# -------------------------------------- 
#
      CALL I2XX
      sip_barrier 

      CALL DABCIAAAA
      CALL DABCIBBBB
      CALL DABCIABAB
      CALL DABCIBABA
#
      ENDPROC DABCI 
#     ------------- 
#
# Equivalent to gamma6 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(ij,ka) block of the two-particle 
# density matrix is evaluated. Only the AAAA contribution is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKAAAAA 
#     -------------- 
#
      PARDO i, i1, i2, a 
#
            Tiiia[i,i1,i2,a] = 0.0 
#
            GET Gmi_a[i,i2] 
            GET t1a_old[a,i1] 
#
            GET Gmi_a[i1,i2] 
            GET t1a_old[a,i] 
#
            T1iiia[i,i1,i2,a]  = Gmi_a[i,i2]^t1a_old[a,i1] 
            T1iiia[i,i1,i2,a] *= -0.125  
            Tiiia[i,i1,i2,a]  += T1iiia[i,i1,i2,a] 
#
            T1iiia[i,i1,i2,a]  = Gmi_a[i1,i2]^t1a_old[a,i] 
            T1iiia[i,i1,i2,a] *= 0.125  
            Tiiia[i,i1,i2,a]  += T1iiia[i,i1,i2,a] 
#
            DO a1 
#
               REQUEST Tau_aa[a1,i,a,i1]      
               REQUEST L2old_aa[i,a1,i1,a]      
               REQUEST Vibja_aaaa[i,a1,i2,a]   
               REQUEST Vibja_aaaa[i1,a1,i2,a]   
               GET l1a_old[i2,a1] 
               GET t1a_old[a1,i1] 
               GET t1a_old[a1,i] 
               GET t1a_old[a1,i2] 
#
               T1iiia[i,i1,i2,a] = Tau_aa[a1,i,a,i1]*l1a_old[i2,a1] 
               T1iiia[i,i1,i2,a]*= -0.125  
               Tiiia[i,i1,i2,a] += T1iiia[i,i1,i2,a] 
#
               T1iiia[i,i1,i2,a] = L2old_aa[i,a1,i1,a]*t1a_old[a1,i2] 
               T1iiia[i,i1,i2,a]*= -0.125  
               Tiiia[i,i1,i2,a] += T1iiia[i,i1,i2,a] 
#
               T1iiia[i,i1,i2,a] = Vibja_aaaa[i,a1,i2,a]*t1a_old[a1,i1] 
               T1iiia[i,i1,i2,a]*= 0.25  
               Tiiia[i,i1,i2,a] += T1iiia[i,i1,i2,a] 
#
               T1iiia[i,i1,i2,a] = Vibja_aaaa[i1,a1,i2,a]*t1a_old[a1,i] 
               T1iiia[i,i1,i2,a]*= -0.25  
               Tiiia[i,i1,i2,a] += T1iiia[i,i1,i2,a] 
#
            ENDDO a1 
#
            DO i3 
# 
               REQUEST Vijmn_aaaa[i,i1,i2,i3]   
               GET t1a_old[a,i3] 
# 
               T1iiia[i,i1,i2,a] = Vijmn_aaaa[i,i1,i2,i3]*t1a_old[a,i3] 
               T1iiia[i,i1,i2,a]*= 0.125  
               Tiiia[i,i1,i2,a] += T1iiia[i,i1,i2,a] 
#
            ENDDO i3 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tiiia(i,i1,i2,a) *= 4.0 
#
#           PUT Dijka_aaaa(i,i1,i2,a) += Tiiia(i,i1,i2,a) 
#
            DO sigma 
#
               Tiiix[i,i1,i2,sigma]      = Tiiia[i,i1,i2,a]*ca[sigma,a] 
               PREPARE Diiix[i,i1,i2,sigma] += Tiiix[i,i1,i2,sigma] 
#
            ENDDO sigma 
#
      ENDPARDO i, i1, i2, a 
#
# Backtransform to AO basis
# ------------------------- 
#
      server_barrier 
      PARDO i, i1, lambda, sigma  
#
            Tiixx[i,i1,lambda,sigma] = 0.0  
#
            DO i2  
#
               REQUEST Diiix[i,i1,i2,sigma]   
#
               T1iixx[i,i1,lambda,sigma] = Diiix[i,i1,i2,sigma]*ca[lambda,i2] 
               Tiixx[i,i1,lambda,sigma] += T1iixx[i,i1,lambda,sigma]  
#
            ENDDO i2 
#
            Tiixx[i,i1,lambda,sigma]         *= 8.0  
            PREPARE Diixx[i,i1,lambda,sigma] += Tiixx[i,i1,lambda,sigma] 
#
      ENDPARDO i, i1, lambda, sigma   
      server_barrier
#
# Done Backtransformation 
# ----------------------- 
#
      ENDPROC DIJKAAAAA 
#     ----------------- 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(iJ,kA) block of the two-particle 
# density matrix is evaluated. The AB block is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKAABAB 
#     -------------- 
#
      PARDO i, j, i1, b 
#
            Tijib[i,j,i1,b] = 0.0 
#
            GET Gmi_a[i,i1] 
            GET t1b_old[b,j] 
#
            T1ijib[i,j,i1,b] = Gmi_a[i,i1]^t1b_old[b,j] 
            T1ijib[i,j,i1,b]*= -0.125  
            Tijib[i,j,i1,b] += T1ijib[i,j,i1,b] 
#
            DO a 
#
               REQUEST Tau_ab[a,i,b,j]      
               REQUEST L2old_ab[i,a,j,b]      
               REQUEST Vibja_baab[j,a,i1,b]   
               GET t1a_old[a,i1] 
               GET t1a_old[a,i] 
               GET l1a_old[i1,a] 
#
               T1ijib[i,j,i1,b] = Tau_ab[a,i,b,j]*l1a_old[i1,a] 
               T1ijib[i,j,i1,b]*= -0.125  
               Tijib[i,j,i1,b] += T1ijib[i,j,i1,b] 
#
               T1ijib[i,j,i1,b] = L2old_ab[i,a,j,b]*t1a_old[a,i1] 
               T1ijib[i,j,i1,b]*= -0.125  
               Tijib[i,j,i1,b] += T1ijib[i,j,i1,b] 
#
               T1ijib[i,j,i1,b] = Vibja_baab[j,a,i1,b]*t1a_old[a,i] 
               T1ijib[i,j,i1,b]*= -0.25  
               Tijib[i,j,i1,b] += T1ijib[i,j,i1,b] 
#
            ENDDO a 
#
            DO b1 
#
               REQUEST Vibja_abab[i,b1,i1,b] 
               GET t1b_old[b1,j] 
#
               T1ijib[i,j,i1,b] = Vibja_abab[i,b1,i1,b]*t1b_old[b1,j] 
               T1ijib[i,j,i1,b]*= 0.25  
               Tijib[i,j,i1,b] += T1ijib[i,j,i1,b] 
#
            ENDDO b1 
#
            DO j1 
# 
               REQUEST Vijmn_abab[i,j,i1,j1]   
               GET t1b_old[b,j1] 
#
               T1ijib[i,j,i1,b] = Vijmn_abab[i,j,i1,j1]*t1b_old[b,j1] 
               T1ijib[i,j,i1,b]*= 0.125  
               Tijib[i,j,i1,b] += T1ijib[i,j,i1,b] 
#
            ENDDO j1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tijib(i,j,i1,b) *= 4.0 
#
#           PUT Dijka_abab(i,j,i1,b) += Tijib(i,j,i1,b) 
#
            DO sigma 
#
               Tijix[i,j,i1,sigma]      = Tijib[i,j,i1,b]*cb[sigma,b] 
               PREPARE Dijix[i,j,i1,sigma] += Tijix[i,j,i1,sigma] 
#
            ENDDO sigma 
#
      ENDPARDO i, j, i1, b 
#
# Backtransform to AO basis
# ------------------------- 
#
      server_barrier 
      PARDO i, j1, lambda, sigma  
#
            Tijxx[i,j1,lambda,sigma] = 0.0  
#
            DO i2  
#
               REQUEST Dijix[i,j1,i2,sigma] 
#
               T1ijxx[i,j1,lambda,sigma] = Dijix[i,j1,i2,sigma]*ca[lambda,i2] 
               Tijxx[i,j1,lambda,sigma] += T1ijxx[i,j1,lambda,sigma]  
#
            ENDDO i2 
#
            Tijxx[i,j1,lambda,sigma]         *= 8.0  
            PREPARE Dijxx[i,j1,lambda,sigma] += Tijxx[i,j1,lambda,sigma] 
#
      ENDPARDO i, j1, lambda, sigma 
      server_barrier

# Done Backtransformation 
# ----------------------- 
#
      ENDPROC DIJKAABAB 
#     ----------------- 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(Ij,Ka) block of the two-particle 
# density matrix is evaluated. The BABA block is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKABABA 
#     -------------- 
#
      PARDO j, i, j1, a 
#
            Tjija[j,i,j1,a] = 0.0 
#
            GET Gmi_b[j,j1] 
            GET t1a_old[a,i] 
#
            T1jija[j,i,j1,a] = Gmi_b[j,j1]^t1a_old[a,i] 
            T1jija[j,i,j1,a]*= -0.125  
            Tjija[j,i,j1,a] += T1jija[j,i,j1,a] 
#
            DO b 
#
               REQUEST Tau_ab[a,i,b,j]        
               REQUEST L2old_ab[i,a,j,b]      
               REQUEST Vibja_abba[i,b,j1,a]  
               GET t1b_old[b,j1] 
               GET t1b_old[b,j] 
               GET l1b_old[j1,b] 
#
               T1jija[j,i,j1,a] = Tau_ab[a,i,b,j]*l1b_old[j1,b] 
               T1jija[j,i,j1,a]*= -0.125  
               Tjija[j,i,j1,a] += T1jija[j,i,j1,a] 
#
               T1jija[j,i,j1,a] = L2old_ab[i,a,j,b]*t1b_old[b,j1] 
               T1jija[j,i,j1,a]*= -0.125  
               Tjija[j,i,j1,a] += T1jija[j,i,j1,a] 
#
               T1jija[j,i,j1,a] = Vibja_abba[i,b,j1,a]*t1b_old[b,j] 
               T1jija[j,i,j1,a]*= -0.25  
               Tjija[j,i,j1,a] += T1jija[j,i,j1,a] 
#
            ENDDO b 
#
            DO i1 
# 
               REQUEST Vijmn_abab[i,j,i1,j1] 
               GET t1a_old[a,i1] 
               T1jija[j,i,j1,a] = Vijmn_abab[i,j,i1,j1]*t1a_old[a,i1] 
               T1jija[j,i,j1,a]*= 0.125  
               Tjija[j,i,j1,a] += T1jija[j,i,j1,a] 
#
            ENDDO i1 
#
            DO a1 
#
               REQUEST Vibja_baba[j,a1,j1,a]   
               GET t1a_old[a1,i] 
               T1jija[j,i,j1,a] = Vibja_baba[j,a1,j1,a]*t1a_old[a1,i] 
               T1jija[j,i,j1,a]*= 0.25  
               Tjija[j,i,j1,a] += T1jija[j,i,j1,a] 
#
            ENDDO a1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tjija(j,i,j1,a) *= 4.0 
#
#           PUT Dijka_baba(j,i,j1,a) += Tjija(j,i,j1,a) 
#
            DO sigma 
#
               Tjijx[j,i,j1,sigma]      = Tjija[j,i,j1,a]*ca[sigma,a] 
               PREPARE Djijx[j,i,j1,sigma] += Tjijx[j,i,j1,sigma] 
#
            ENDDO sigma 
#
      ENDPARDO j, i, j1, a 
#
# Backtransform to AO basis
# ------------------------- 
#
      server_barrier 
      PARDO j, i1, lambda, sigma  
#
            Tijxx[i1,j,sigma,lambda] = 0.0  
#
            DO j2   
#
               REQUEST Djijx[j,i1,j2,sigma] 
#
               T1ijxx[i1,j,sigma,lambda] = Djijx[j,i1,j2,sigma]*cb[lambda,j2] 
               Tijxx[i1,j,sigma,lambda] += T1ijxx[i1,j,sigma,lambda]   
#
            ENDDO j2 
#
            Tijxx[i1,j,sigma,lambda]         *= 8.0  
            PREPARE Dijxx[i1,j,sigma,lambda] += Tijxx[i1,j,sigma,lambda]  
#
      ENDPARDO j, i1, lambda, sigma 
      server_barrier
#
# Done Backtransformation 
# ----------------------- 
#
      ENDPROC DIJKABABA 
#     ----------------- 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(IJ,KA) block of the two-particle 
# density matrix is evaluated. Only the BBBB contribution is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKABBBB 
#     -------------- 
#
      PARDO j, j1, j2, b 
#
            Tjjjb[j,j1,j2,b] = 0.0 
#
            GET Gmi_b[j,j2] 
            GET t1b_old[b,j1] 
#
            GET Gmi_b[j1,j2] 
            GET t1b_old[b,j] 
#
            T1jjjb[j,j1,j2,b] = Gmi_b[j,j2]^t1b_old[b,j1] 
            T1jjjb[j,j1,j2,b]*= -0.125  
            Tjjjb[j,j1,j2,b] += T1jjjb[j,j1,j2,b] 
#
            T1jjjb[j,j1,j2,b]  = Gmi_b[j1,j2]^t1b_old[b,j] 
            T1jjjb[j,j1,j2,b] *= 0.125  
            Tjjjb[j,j1,j2,b]  += T1jjjb[j,j1,j2,b] 
#
            DO b1 
#
               REQUEST Tau_bb[b1,j,b,j1]        
               REQUEST L2old_bb[j,b1,j1,b]    
               REQUEST Vibja_bbbb[j,b1,j2,b]    
               REQUEST Vibja_bbbb[j1,b1,j2,b]  
               GET l1b_old[j2,b1] 
               GET t1b_old[b1,j2] 
               GET t1b_old[b1,j1] 
               GET t1b_old[b1,j] 
#
               T1jjjb[j,j1,j2,b] = Tau_bb[b1,j,b,j1]*l1b_old[j2,b1] 
               T1jjjb[j,j1,j2,b]*= -0.125  
               Tjjjb[j,j1,j2,b] += T1jjjb[j,j1,j2,b] 
#
               T1jjjb[j,j1,j2,b] = L2old_bb[j,b1,j1,b]*t1b_old[b1,j2] 
               T1jjjb[j,j1,j2,b]*= -0.125  
               Tjjjb[j,j1,j2,b] += T1jjjb[j,j1,j2,b] 
#
               T1jjjb[j,j1,j2,b] = Vibja_bbbb[j,b1,j2,b]*t1b_old[b1,j1] 
               T1jjjb[j,j1,j2,b]*= 0.25  
               Tjjjb[j,j1,j2,b] += T1jjjb[j,j1,j2,b] 
#
               T1jjjb[j,j1,j2,b] = Vibja_bbbb[j1,b1,j2,b]*t1b_old[b1,j] 
               T1jjjb[j,j1,j2,b]*= -0.25  
               Tjjjb[j,j1,j2,b] += T1jjjb[j,j1,j2,b] 
#
            ENDDO b1 
#
            DO j3 
# 
               REQUEST Vijmn_bbbb[j,j1,j2,j3]   
               GET t1b_old[b,j3] 
               T1jjjb[j,j1,j2,b] = Vijmn_bbbb[j,j1,j2,j3]*t1b_old[b,j3] 
               T1jjjb[j,j1,j2,b]*= 0.125  
               Tjjjb[j,j1,j2,b] += T1jjjb[j,j1,j2,b] 
#
            ENDDO j3 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tjjjb(j,j1,j2,b) *= 4.0 
#
#           PUT Dijka_bbbb(j,j1,j2,b) += Tjjjb(j,j1,j2,b) 
#
            DO sigma 
#
               Tjjjx[j,j1,j2,sigma]      = Tjjjb[j,j1,j2,b]*cb[sigma,b] 
               PREPARE Djjjx[j,j1,j2,sigma] += Tjjjx[j,j1,j2,sigma] 
#
            ENDDO sigma 
#
      ENDPARDO j, j1, j2, b 
#
# Backtransform to AO basis
# ------------------------- 
#
      server_barrier 
      PARDO j, j1, lambda, sigma  
#
            Tjjxx[j,j1,lambda,sigma] = 0.0  
#
            DO j2  
#
               REQUEST Djjjx[j,j1,j2,sigma]   
#
               T1jjxx[j,j1,lambda,sigma] = Djjjx[j,j1,j2,sigma]*cb[lambda,j2] 
               Tjjxx[j,j1,lambda,sigma] += T1jjxx[j,j1,lambda,sigma]  
#
            ENDDO j2 
#
            Tjjxx[j,j1,lambda,sigma]         *= 8.0  
            PREPARE Djjxx[j,j1,lambda,sigma] += Tjjxx[j,j1,lambda,sigma] 
#
      ENDPARDO j, j1, lambda, sigma 
      server_barrier
#
# Done Backtransformation 
# ----------------------- 
#
      ENDPROC DIJKABBBB 
#     ----------------- 
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKA 
#     ---------- 
#
# Create gamma arrays 
# ------------------- 
#
           CALL DIJKAAAAA 
           CALL DIJKAABAB 
           CALL DIJKABABA 
           CALL DIJKABBBB 
#
      ENDPROC DIJKA 
#     ------------- 
#
# ----------------------------------------------------------------------------
#
# In this superprocedure the particle-particle block of the relaxed density 
# matrix is computed. The expressions programmed are: 
# 
# D_{ab} = 1/4 P_+(ab) t^{ae}_{mn} \lambda^{mn}_{be}  
#        + 1/4 P_+(ab) t^{aE}_{mN} \lambda^{mN}_{bE}  
#        + 1/2 P_+(ab) t^{a}_{m} \lambda^{m}_{b} 
#
# D_{AB} = D_{ab} [a<-->A, b<-->B, i<-->I, j<-->J, m<-->M, n<-->N] 
#
      PROC DABA 
#     --------- 
#
      PARDO a, a1, i  
#
            GET t1a_old[a,i] 
            GET l1a_old[i,a1] 
#
            Taa[a,a1]        = t1a_old[a,i]*l1a_old[i,a1] 
            Taa[a,a1]       *= 0.5 
            T1aa[a1,a]       = Taa[a,a1]  
#
            PUT Dab_a[a,a1] += Taa[a,a1] 
            PUT Dab_a[a1,a] += T1aa[a1,a] 
#
            DO a2 
            DO i1 
#
               REQUEST T2old_aa[a,i,a2,i1] 
               REQUEST L2old_aa[i,a1,i1,a2]  
#
               Taa[a,a1]        = T2old_aa[a,i,a2,i1]*L2old_aa[i,a1,i1,a2]
               Taa[a,a1]       *= 0.25 
               T1aa[a1,a]       = Taa[a,a1]  
#
               PUT Dab_a[a,a1] += Taa[a,a1] 
               PUT Dab_a[a1,a] += T1aa[a1,a] 
#
            ENDDO i1 
            ENDDO a2 
#
            DO b 
            DO j 
#
               REQUEST T2old_ab[a,i,b,j]    
               REQUEST L2old_ab[i,a1,j,b]   
#
               Taa[a,a1]        = T2old_ab[a,i,b,j]*L2old_ab[i,a1,j,b]
               Taa[a,a1]       *= 0.5 
               T1aa[a1,a]       = Taa[a,a1]  
#
               PUT Dab_a[a,a1] += Taa[a,a1] 
               PUT Dab_a[a1,a] += T1aa[a1,a] 
#
            ENDDO j 
            ENDDO b 
#
      ENDPARDO a, a1, i  
#
      ENDPROC DABA 
#     ------------ 
#
      PROC DABB 
#     --------- 
#
      PARDO b1, b, j  
#
            GET t1b_old[b1,j] 
            GET l1b_old[j,b] 
#
            Tbb[b1,b]        = t1b_old[b1,j]*l1b_old[j,b] 
            Tbb[b1,b]       *= 0.5 
            T1bb[b,b1]       = Tbb[b1,b]  
#
            PUT Dab_b[b1,b] += Tbb[b1,b] 
            PUT Dab_b[b,b1] += T1bb[b,b1] 
#
            DO b2 
            DO j1 
#
               REQUEST T2old_bb[b1,j,b2,j1]  
               REQUEST L2old_bb[j,b,j1,b2]    
#
               Tbb[b1,b]        = T2old_bb[b1,j,b2,j1]*L2old_bb[j,b,j1,b2]
               Tbb[b1,b]       *= 0.25 
               T1bb[b,b1]       = Tbb[b1,b]  
#
               PUT Dab_b[b1,b] += Tbb[b1,b] 
               PUT Dab_b[b,b1] += T1bb[b,b1] 
#
            ENDDO j1 
            ENDDO b2 
#
            DO a 
            DO i 
#
               REQUEST T2old_ab[a,i,b1,j]   
               REQUEST L2old_ab[i,a,j,b]    
#
               Tbb[b1,b]        = T2old_ab[a,i,b1,j]*L2old_ab[i,a,j,b]
               Tbb[b1,b]       *= 0.5 
               T1bb[b,b1]       = Tbb[b1,b]  
#
               PUT Dab_b[b1,b] += Tbb[b1,b] 
               PUT Dab_b[b,b1] += T1bb[b,b1] 
#
            ENDDO i 
            ENDDO a 
#
      ENDPARDO b1, b, j  
#
      ENDPROC DABB 
#     ------------ 
#
# ----------------------------------------------------------------------------
#
      PROC DAB 
           CALL DABA 
           CALL DABB 
      ENDPROC DAB 
#
# --------------------------------------------------------------------------- 
#
# In this superprocedure the occupied-occupied block of the relaxed
# density matrix is computed. The expressions programmed are:
#
# D_{ij} = -1/4 P_+(ij) t^{ef}_{im} \lambda^{jm}_{ef} 
#          -1/4 P_+(ij) t^{eF}_{iM} \lambda^{jM}_{eF}   
#          -1/2 P_+(ij) t^{e}_{i} \lambda^{j}_{e}   
#
# D_{IJ} = D_{ij} [i<-->I, j<-->J, e<-->E, f<-->F] 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJA 
#     --------- 
#
      PARDO a, a1, i, i2 
#
            REQUEST T2old_aa[a,i,a1,i2]   
#
            DO i1 
#
               REQUEST L2old_aa[i1,a,i2,a1]   
#
               Tii[i,i1]        = T2old_aa[a,i,a1,i2]*L2old_aa[i1,a,i2,a1] 
               Tii[i,i1]       *= -0.25   
               T1ii[i1,i]       = Tii[i,i1] 
               PUT Dij_a[i,i1] += Tii[i,i1] 
               PUT Dij_a[i1,i] += T1ii[i1,i] 
#
            ENDDO i1 
#
      ENDPARDO a, a1, i, i2 
#
      PARDO a, b, i, j 
#
            REQUEST T2old_ab[a,i,b,j] 
#
            DO i1 
#
               REQUEST L2old_ab[i1,a,j,b] 
#
               Tii[i,i1]        = T2old_ab[a,i,b,j]*L2old_ab[i1,a,j,b] 
               Tii[i,i1]       *= -0.5   
               T1ii[i1,i]       = Tii[i,i1] 
               PUT Dij_a[i,i1] += Tii[i,i1] 
               PUT Dij_a[i1,i] += T1ii[i1,i] 
#
            ENDDO i1 
#
      ENDPARDO a, b, i, j 
#
      PARDO a, i, i1  
#
            GET t1a_old[a,i] 
            GET l1a_old[i1,a] 
#
            Tii[i,i1]        = t1a_old[a,i]*l1a_old[i1,a] 
            Tii[i,i1]       *= -0.5   
            T1ii[i1,i]       = Tii[i,i1] 
            PUT Dij_a[i,i1] += Tii[i,i1] 
            PUT Dij_a[i1,i] += T1ii[i1,i] 
#
      ENDPARDO a, i, i1  
#
      ENDPROC DIJA 
#     ------------ 
#
      PROC DIJB 
#     --------- 
#
      PARDO b, b1, j, j2 
#
            REQUEST L2old_bb[j,b,j2,b1]   
#
            DO j1 
#
               REQUEST T2old_bb[b,j1,b1,j2]   
#
               Tjj[j1,j]        = T2old_bb[b,j1,b1,j2]*L2old_bb[j,b,j2,b1] 
               Tjj[j1,j]       *= -0.25   
               T1jj[j,j1]       = Tjj[j1,j] 
               PUT Dij_b[j1,j] += Tjj[j1,j] 
               PUT Dij_b[j,j1] += T1jj[j,j1] 
#
            ENDDO j1 
#
      ENDPARDO b, b1, j, j2 
#
      PARDO b, a, j, i 
#
            REQUEST L2old_ab[i,a,j,b] 
#
            DO j1 
#
               REQUEST T2old_ab[a,i,b,j1] 
#
               Tjj[j1,j]        = T2old_ab[a,i,b,j1]*L2old_ab[i,a,j,b] 
               Tjj[j1,j]       *= -0.5   
               T1jj[j,j1]       = Tjj[j1,j] 
               PUT Dij_b[j1,j] += Tjj[j1,j] 
               PUT Dij_b[j,j1] += T1jj[j,j1] 
#
            ENDDO j1 
#
      ENDPARDO b, a, j, i 
#
      PARDO b, j, j1  
#
            GET t1b_old[b,j1] 
            GET l1b_old[j,b] 
#
            Tjj[j1,j]        = t1b_old[b,j1]*l1b_old[j,b] 
            Tjj[j1,j]       *= -0.5   
            T1jj[j,j1]       = Tjj[j1,j] 
            PUT Dij_b[j1,j] += Tjj[j1,j] 
            PUT Dij_b[j,j1] += T1jj[j,j1] 
#
      ENDPARDO b, j, j1  
#
      ENDPROC DIJB 
#     ------------ 
#
      PROC DIJ 
#     ----------- 
           CALL DIJA 
           CALL DIJB 
      ENDPROC DIJ 
#     ----------- 
#
# -----------------------------------------------------------------------------
#
     PROC DPQRSTODXXXX
#    ----------------- 
#
#    Form Half back transformed cluster array AAAA spin case 
#    -------------------------------------------------------
#
     PARDO a, a1, i, i1
#
           REQUEST Tau_aa[a,i,a1,i1] 
#
           DO lambda
#
              Zaa[lambda,i,a1,i1]  = Tau_aa[a,i,a1,i1]*ca[lambda,a]
#
              DO sigma
#
                 ZZaa[lambda,i,sigma,i1]        = Zaa[lambda,i,a1,i1]*ca[sigma,a1]
                 PREPARE TAO_aa[lambda,i,sigma,i1] += ZZaa[lambda,i,sigma,i1]
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, a1, i, i1 
#
#    Form Half back transformed lambda array AAAA spin case 
#    ------------------------------------------------------
#
     PARDO a, a1, i, i1
#
           REQUEST L2old_aa[i,a,i1,a1] 
#
           DO lambda
#
              Qaa[i,lambda,i1,a1] = L2old_aa[i,a,i1,a1]*ca[lambda,a]
#
              DO sigma
#
                 QQaa[i,lambda,i1,sigma]        = Qaa[i,lambda,i1,a1]*ca[sigma,a1]
                 PREPARE LAO_aa[i,lambda,i1,sigma] += QQaa[i,lambda,i1,sigma]
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, a1, i, i1 
     server_barrier 
#
#    Form Half back transformed cluster array BBBB spin case 
#    -------------------------------------------------------
#
     PARDO b, b1, j, j1
#  
           REQUEST Tau_bb[b,j,b1,j1] 
#
           DO lambda
#
              Zbb[lambda,j,b1,j1] = Tau_bb[b,j,b1,j1]*cb[lambda,b]
#
              DO sigma
#
                 ZZbb[lambda,j,sigma,j1]        = Zbb[lambda,j,b1,j1]*cb[sigma,b1]
                 PREPARE TAO_bb[lambda,j,sigma,j1] += ZZbb[lambda,j,sigma,j1]
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO b, b1, j, j1 
#
#    Form Half back transformed lambda array BBBB spin case 
#    ------------------------------------------------------
#
     PARDO b, b1, j, j1
#
           REQUEST L2old_bb[j,b,j1,b1] 
           REQUEST L2old_bb[j,b1,j1,b]  
           Tjbjb[j,b,j1,b1]    = L2old_bb[j,b1,j1,b]
           Tjbjb[j,b,j1,b1]   -= L2old_bb[j,b,j1,b1]
           Tjbjb[j,b,j1,b1]   *= -1.0  
#
           DO lambda
#
              Qbb[j,lambda,j1,b1] = L2old_bb[j,b,j1,b1]*cb[lambda,b]
#
              DO sigma
#
                 QQbb[j,lambda,j1,sigma]        = Qbb[j,lambda,j1,b1]*cb[sigma,b1]
                 PREPARE LAO_bb[j,lambda,j1,sigma] += QQbb[j,lambda,j1,sigma]
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO b, b1, j, j1 
     server_barrier 
#
#    Form Half back transformed cluster array ABAB spin case 
#    -------------------------------------------------------
#
     PARDO a, b, i, j
#
           REQUEST Tau_ab[a,i,b,j] 
#
           DO lambda
#
              Zab[lambda,i,b,j] = Tau_ab[a,i,b,j]*ca[lambda,a]
#
              DO sigma
#
                 ZZab[lambda,i,sigma,j]        = Zab[lambda,i,b,j]*cb[sigma,b]
                 PREPARE TAO_ab[lambda,i,sigma,j] += ZZab[lambda,i,sigma,j]
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j 
#
#    Form Half back transformed lambda array ABAB spin case 
#    ------------------------------------------------------
#
     PARDO a, b, i, j
#
           REQUEST L2old_ab[i,a,j,b] 
#
           DO lambda
#
              Qab[i,lambda,j,b] = L2old_ab[i,a,j,b]*ca[lambda,a]
#
              DO sigma
#
                 QQab[i,lambda,j,sigma]        = Qab[i,lambda,j,b]*cb[sigma,b]
                 PREPARE LAO_ab[i,lambda,j,sigma] += QQab[i,lambda,j,sigma]
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j 
     server_barrier 
#
     ENDPROC DPQRSTODXXXX
#    -------------------- 
#
# -----------------------------------------------------------------------------
#
      PROC D1TRANS
#     ------------
#
# -----------------------------------------------------------------------------
#
#     Transform Dai_aa
#     ----------------
      PARDO a, i
#
            GET Doldai_a[a,i]
#
            DO mu
#
               Jxi[mu,i]  = Doldai_a[a,i]*ca[mu,a]
#
               DO nu
#
                  Ixx[mu,nu]       = Jxi[mu,i]*ca[nu,i]
                  PUT DpqA[mu,nu] += Ixx[mu,nu]
                  I1xx[nu,mu]      = Ixx[mu,nu] 
                  PUT DpqA[nu,mu] += I1xx[nu,mu]
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, i
#
#     Transform Dai_bb
#     ----------------
      PARDO b, j
#
            GET Doldai_b[b,j]
#
            DO mu
#
               Jxj[mu,j]  = Doldai_b[b,j]*cb[mu,b]
#
               DO nu
#
                  Ixx[mu,nu]       = Jxj[mu,j]*cb[nu,j]
                  PUT DpqB[mu,nu] += Ixx[mu,nu]
                  I1xx[nu,mu]      = Ixx[mu,nu] 
                  PUT DpqB[nu,mu] += I1xx[nu,mu]
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, j
#
#     Transform Dab_a
#     ---------------
      PARDO a, a1
#
            GET Dab_a[a,a1]
#
            DO mu
#
               Ixa[mu,a1]  = Dab_a[a,a1]*ca[mu,a]
#
               DO nu
#
                  Ixx[mu,nu]       = Ixa[mu,a1]*ca[nu,a1]
                  PUT DpqA[mu,nu] += Ixx[mu,nu]
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, a1
#
#     Transform Dab_b
#     ----------------
      PARDO b, b1
#
            GET Dab_b[b,b1]
#
            DO mu
#
               Ixb[mu,b1]  = Dab_b[b,b1]*cb[mu,b]
#
               DO nu
#
                  Ixx[mu,nu]       = Ixb[mu,b1]*cb[nu,b1]
                  PUT DpqB[mu,nu] += Ixx[mu,nu]
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, b1
#
#     Transform Dij_aa
#     ----------------
      PARDO i, i1
#
            GET Dij_a[i,i1]
#
            DO mu
#
               Jxi[mu,i1]  = Dij_a[i,i1]*ca[mu,i]
#
               DO nu
#
                  Ixx[mu,nu]       = Jxi[mu,i1]*ca[nu,i1]
                  PUT DpqA[mu,nu] += Ixx[mu,nu]
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO i, i1
#
#     Transform Dij_bb
#     ----------------
      PARDO j, j1
#
            GET Dij_b[j,j1]
#
            DO mu
#
               Jxj[mu,j1]  = Dij_b[j,j1]*cb[mu,j]
#
               DO nu
#
                  Ixx[mu,nu]       = Jxj[mu,j1]*cb[nu,j1]
                  PUT DpqB[mu,nu] += Ixx[mu,nu]
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO j, j1
      sip_barrier
#
# -----------------------------------------------------------------------------
#
      ENDPROC D1TRANS
#     ---------------
#
      PROC HFDENS  
#     -----------  
#
      PARDO mu, nu, i  
#
            Txi[nu,i]        = ca[nu,i] 
            Tpq[mu,nu]       = ca[mu,i]*Txi[nu,i]  
            PUT DhfA[mu,nu] += Tpq[mu,nu] 
#
      ENDPARDO mu, nu, i  
#
      PARDO mu, nu, j  
#
            Txj[nu,j]        = cb[nu,j] 
            Tpq[mu,nu]       = cb[mu,j]*Txj[nu,j]  
            PUT DhfB[mu,nu] += Tpq[mu,nu] 
#
      ENDPARDO mu, nu, j  
#
      ENDPROC HFDENS  
#     -------------- 
#
# -----------------------------------------------------------------------------
#
# The complete two-particle density martix is fully transformed and 'contracted' 
# with the integral derivatives.  
# --------------------------------------------------- 
#
      PROC PDCONT
#     ----------- 
#
      PARDO mu, nu, lambda, sigma 
#
            Txxxx[mu,nu,lambda,sigma] = 0.0
#
#           Compute the seperable contribution to the density matrix  
#           --------------------------------------------------------  
#
#           Get 1-particle pieces
#           ---------------------
#
            GET DHFa[mu,lambda]
            GET DHFa[nu,sigma]
            GET DHFa[mu,sigma]
            GET DHFa[nu,lambda]
#
            GET DHFb[mu,lambda]
            GET DHFb[nu,sigma]
            GET DHFb[mu,sigma]
            GET DHFb[nu,lambda]
#
            GET DpqA[mu,lambda]
            GET DpqA[nu,sigma]
            GET DpqA[mu,sigma]
            GET DpqA[nu,lambda]
#
            GET DpqB[mu,lambda]
            GET DpqB[nu,sigma]
            GET DpqB[mu,sigma]
            GET DpqB[nu,lambda]
#
#           HF only
#           -------
            Txx[mu,lambda]             = DHFa[mu,lambda]
            T1xxxx[mu,nu,lambda,sigma] = Txx[mu,lambda]^DHFa[nu,sigma]
            Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma]
#
            Txx[mu,lambda]             = DHFb[mu,lambda]
            T1xxxx[mu,nu,lambda,sigma] = Txx[mu,lambda]^DHFb[nu,sigma]
            Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma]
#
            T1xxxx[mu,nu,lambda,sigma] = DHFa[mu,lambda]^DHFb[nu,sigma]
            Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma]
#
            T1xxxx[mu,nu,lambda,sigma] = DHFb[mu,lambda]^DHFa[nu,sigma]
            Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma]
#
            Txx[mu,sigma]              = DHFa[mu,sigma]
            T1xxxx[mu,nu,lambda,sigma] = Txx[mu,sigma]^DHFa[nu,lambda]
            Txxxx[mu,nu,lambda,sigma] -= T1xxxx[mu,nu,lambda,sigma]
#
            Txx[mu,sigma]              = DHFb[mu,sigma]
            T1xxxx[mu,nu,lambda,sigma] = Txx[mu,sigma]^DHFb[nu,lambda]
            Txxxx[mu,nu,lambda,sigma] -= T1xxxx[mu,nu,lambda,sigma]
#
            Txxxx[mu,nu,lambda,sigma] *= 0.5
#
#           Correlation
#           -----------
            T1xxxx[mu,nu,lambda,sigma] = DpqA[mu,lambda]^DHFA[nu,sigma]
            Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma]
#
            T1xxxx[mu,nu,lambda,sigma] = DpqB[mu,lambda]^DHFB[nu,sigma]
            Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma]
#
            T1xxxx[mu,nu,lambda,sigma] = DpqA[mu,lambda]^DHFB[nu,sigma]
            Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma]
#
            T1xxxx[mu,nu,lambda,sigma] = DpqB[mu,lambda]^DHFA[nu,sigma]
            Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma]

            T1xxxx[mu,nu,lambda,sigma] = DpqA[mu,sigma]^DHFA[nu,lambda]
            T1xxxx[mu,nu,lambda,sigma]*= 0.5
            Txxxx[mu,nu,lambda,sigma] -= T1xxxx[mu,nu,lambda,sigma]
#
            T1xxxx[mu,nu,lambda,sigma] = DpqA[nu,lambda]^DHFA[mu,sigma]
            T1xxxx[mu,nu,lambda,sigma]*= 0.5
            Txxxx[mu,nu,lambda,sigma] -= T1xxxx[mu,nu,lambda,sigma]
#
            T1xxxx[mu,nu,lambda,sigma] = DpqB[mu,sigma]^DHFB[nu,lambda]
            T1xxxx[mu,nu,lambda,sigma]*= 0.5
            Txxxx[mu,nu,lambda,sigma] -= T1xxxx[mu,nu,lambda,sigma]
#
            T1xxxx[mu,nu,lambda,sigma] = DpqB[nu,lambda]^DHFB[mu,sigma]
            T1xxxx[mu,nu,lambda,sigma]*= 0.5
            Txxxx[mu,nu,lambda,sigma] -= T1xxxx[mu,nu,lambda,sigma]
#
#           Fully transform Diixx 
#           --------------------- 
            DO i  
#
               Tixxx[i,nu,lambda,sigma] = 0.0 
#
               DO i1   
                  REQUEST Diixx[i,i1,lambda,sigma] 
                  T1ixxx[i,nu,lambda,sigma] = Diixx[i,i1,lambda,sigma]*ca[nu,i1] 
                  Tixxx[i,nu,lambda,sigma] += T1ixxx[i,nu,lambda,sigma]
               ENDDO i1   
#
               T1xxxx[mu,nu,lambda,sigma] = Tixxx[i,nu,lambda,sigma]*ca[mu,i] 
               Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma]  
#
            ENDDO i 
#
#           Fully transform Djjxx 
#           --------------------- 
            DO j  
#
               Tjxxx[j,nu,lambda,sigma] = 0.0 
#
               DO j1 
#
                  REQUEST Djjxx[j,j1,lambda,sigma]  
                  T1jxxx[j,nu,lambda,sigma] = Djjxx[j,j1,lambda,sigma]*cb[nu,j1] 
                  Tjxxx[j,nu,lambda,sigma] += T1jxxx[j,nu,lambda,sigma] 
#
               ENDDO j1 
#
               T1xxxx[mu,nu,lambda,sigma] = Tjxxx[j,nu,lambda,sigma]*cb[mu,j] 
               Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma]  
#
            ENDDO j 
#
#           Fully transform Dijxx 
#           --------------------- 
            DO i  
#
               Tixxx[i,nu,lambda,sigma] = 0.0 
#
               DO j1 
#
                  REQUEST Dijxx[i,j1,lambda,sigma]   
                  T1ixxx[i,nu,lambda,sigma] = Dijxx[i,j1,lambda,sigma]*cb[nu,j1] 
                  Tixxx[i,nu,lambda,sigma] += T1ixxx[i,nu,lambda,sigma] 
#
               ENDDO j1  
#
               T1xxxx[mu,nu,lambda,sigma] = Tixxx[i,nu,lambda,sigma]*ca[mu,i] 
               Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma]  
#
            ENDDO i 
#
#           Fully transform Dixix 
#           --------------------- 
            DO i 
#
               Tixxx[i,nu,lambda,sigma] = 0.0 
#
               DO i1  
#
                  REQUEST Dixix[i,nu,i1,sigma] 
                  T1ixxx[i,nu,lambda,sigma] = Dixix[i,nu,i1,sigma]*ca[lambda,i1] 
                  Tixxx[i,nu,lambda,sigma] += T1ixxx[i,nu,lambda,sigma]
#
               ENDDO i1 
#
               T1xxxx[mu,nu,lambda,sigma] = Tixxx[i,nu,lambda,sigma]*ca[mu,i]  
               Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma] 
#
            ENDDO i 
#
#           Fully transform Djxjx 
#           --------------------- 
            DO j 
#
               Tjxxx[j,nu,lambda,sigma] = 0.0 
#
               DO j1  
#
                  REQUEST Djxjx[j,nu,j1,sigma]   
                  T1jxxx[j,nu,lambda,sigma] = Djxjx[j,nu,j1,sigma]*cb[lambda,j1] 
                  Tjxxx[j,nu,lambda,sigma] += T1jxxx[j,nu,lambda,sigma]
#
               ENDDO j1 
#
               T1xxxx[mu,nu,lambda,sigma] = Tjxxx[j,nu,lambda,sigma]*cb[mu,j]  
               Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma] 
#
            ENDDO j 
#
#           Fully transform Dixxj 
#           --------------------- 
            DO i 
#
               Tixxx[i,nu,lambda,sigma] = 0.0 
#
               DO j1  
#
                  REQUEST Dixxj[i,nu,lambda,j1]   
                  T1ixxx[i,nu,lambda,sigma] = Dixxj[i,nu,lambda,j1]*cb[sigma,j1] 
                  Tixxx[i,nu,lambda,sigma] += T1ixxx[i,nu,lambda,sigma]
#
               ENDDO j1 
#
               T1xxxx[mu,nu,lambda,sigma] = Tixxx[i,nu,lambda,sigma]*ca[mu,i]  
               Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma] 
#
            ENDDO i 
#
#           Fully transform Dxiix 
#           --------------------- 
            DO i  
#
               Txixx[mu,i,lambda,sigma] = 0.0 
#
               DO i1   
                  REQUEST Dxiix[mu,i,i1,sigma] 
                  T1xixx[mu,i,lambda,sigma] = Dxiix[mu,i,i1,sigma]*ca[lambda,i1] 
                  Txixx[mu,i,lambda,sigma] += T1xixx[mu,i,lambda,sigma]
               ENDDO i1   
#
               T1xxxx[mu,nu,lambda,sigma] = Txixx[mu,i,lambda,sigma]*ca[nu,i] 
               Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma]  
#
            ENDDO i 
#
#           Fully transform Dxjjx 
#           --------------------- 
            DO j  
#
               Txjxx[mu,j,lambda,sigma] = 0.0 
#
               DO j1   
                  REQUEST Dxjjx[mu,j,j1,sigma] 
                  T1xjxx[mu,j,lambda,sigma] = Dxjjx[mu,j,j1,sigma]*cb[lambda,j1] 
                  Txjxx[mu,j,lambda,sigma] += T1xjxx[mu,j,lambda,sigma]
               ENDDO j1   
#
               T1xxxx[mu,nu,lambda,sigma] = Txjxx[mu,j,lambda,sigma]*cb[nu,j] 
               Txxxx[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma]  
#
            ENDDO j 
#
#           Fully transform Dxxxi 
#           --------------------- 
            DO i 
#
               REQUEST Dxxxi[mu,nu,lambda,i] 
#
               T1xxxx[mu,nu,lambda,sigma]  = Dxxxi[mu,nu,lambda,i]*ca[sigma,i] 
               T1xxxx[mu,nu,lambda,sigma] *= 8.0  
               Txxxx[mu,nu,lambda,sigma]  += T1xxxx[mu,nu,lambda,sigma]  
#
            ENDDO i 
#
#           Fully transform Dxxxj 
#           --------------------- 
            DO j 
#
               REQUEST Dxxxj[mu,nu,lambda,j]  
#
               T1xxxx[mu,nu,lambda,sigma]  = Dxxxj[mu,nu,lambda,j]*cb[sigma,j] 
               T1xxxx[mu,nu,lambda,sigma] *= 8.0  
               Txxxx[mu,nu,lambda,sigma]  += T1xxxx[mu,nu,lambda,sigma]  
#
            ENDDO j 
#
#           Contract half-transformed amplitudes to form backtransformed Dabcd  
#           ------------------------------------------------------------------ 
#
            PXXXX[mu,nu,lambda,sigma] = 0.0 
#
#           AAAA spin case 
#           -------------- 
            DO i 
            DO i1 
#
               REQUEST TAO_AA[mu,i,nu,i1]          
               REQUEST LAO_AA[i,lambda,i1,sigma]   
               Txxii[mu,nu,i,i1]          = TAO_AA[mu,i,nu,i1]
               Tiixx[i,i1,lambda,sigma]   = LAO_AA[i,lambda,i1,sigma]
#
               T1xxxx[mu,nu,lambda,sigma] = Txxii[mu,nu,i,i1]*Tiixx[i,i1,lambda,sigma]
               PXXXX[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma] 
#
            ENDDO i1 
            ENDDO i 
#
#           BBBB spin case 
#           -------------- 
            DO j 
            DO j1 
#
               REQUEST TAO_bb[mu,j,nu,j1]          
               REQUEST LAO_bb[j,lambda,j1,sigma]  
               Txxjj[mu,nu,j,j1]          = TAO_BB[mu,j,nu,j1]
               Tjjxx[j,j1,lambda,sigma]   = LAO_BB[j,lambda,j1,sigma]
#
               T1xxxx[mu,nu,lambda,sigma] = Txxjj[mu,nu,j,j1]*Tjjxx[j,j1,lambda,sigma]  
               PXXXX[mu,nu,lambda,sigma] += T1xxxx[mu,nu,lambda,sigma] 
#
            ENDDO j1 
            ENDDO j 
#
#           ABAB spin case 
#           -------------- 
            DO i 
            DO j 
#
               REQUEST TAO_ab[mu,i,nu,j]          
               REQUEST LAO_ab[i,lambda,j,sigma]   
               Txxij[mu,nu,i,j]            = TAO_AB[mu,i,nu,j]
               Tijxx[i,j,lambda,sigma]     = LAO_AB[i,lambda,j,sigma]
#
               T1xxxx[mu,nu,lambda,sigma]  = Txxij[mu,nu,i,j]*Tijxx[i,j,lambda,sigma]  
               T1xxxx[mu,nu,lambda,sigma] *= 4.0  
               PXXXX[mu,nu,lambda,sigma]  += T1xxxx[mu,nu,lambda,sigma] 
#
            ENDDO j 
            ENDDO i 
#
            Pxxxx[mu,nu,lambda,sigma] *= 0.25  
            Pxxxx[mu,nu,lambda,sigma] += Txxxx[mu,nu,lambda,sigma]  
#
            T1xxxx[mu,lambda,nu,sigma]  = Pxxxx[mu,nu,lambda,sigma] 
#
#           INTEGRAL BLOCK 1 
#           ---------------- 
#
                Do Twelve

                 flag = (scalar)Twelve
                 execute return_2el_grdints GRAD_AO_INTS[mu,nu,lambda,sigma] flag
#
#                Contract density with integral derivatives
#                ------------------------------------------

                 execute return_2el_gradient GRAD_AO_INTS[mu,nu,lambda,sigma] T1xxxx[mu,lambda,nu,sigma] L_Gradient flag

                 do Ngrads
                    put D_gradient[Ngrads] += L_Gradient[Ngrads]
                 enddo Ngrads

                 Enddo Twelve
#
      ENDPARDO mu, nu, lambda, sigma  
      server_barrier 

#bgn_debug
          print "Nuclear attraction+repulsion+kinetic+overlap+2-el gradient"
          Do Ngrads
             get  D_Gradient[Ngrads]
             print D_gradient[Ngrads]
          Enddo Ngrads
#end_debug
#
      ENDPROC PDCONT 
#     -------------- 
#
      PROC S2DIJ
#     ----------

           esum = 0.0 
           DO i 
           DO i1 
#
              GET Dij_a[i,i1] 
              etemp = Dij_a[i,i1]*Dij_a[i,i1] 
              esum += etemp 
              print Dij_a[i,i1] 
#
           ENDDO i1 
           ENDDO i 
           print "Checksum of Dij_a"
           print esum 
#
           esum = 0.0 
           DO j 
           DO j1 
#
              GET Dij_b[j,j1] 
              etemp = Dij_b[j,j1]*Dij_b[j,j1] 
              esum += etemp 
#
           ENDDO j1 
           ENDDO j 
           print "Checksum of Dij_b"
           print esum 
#               
      ENDPROC S2DIJ 
#     -------------
#
      PROC S2DAB 
#     ----------

           esum = 0.0 
           DO a 
           DO a1 
#
              GET Dab_a[a,a1] 
              etemp = Dab_a[a,a1]*Dab_a[a,a1] 
              esum += etemp 
              print Dab_a[a,a1] 
#
           ENDDO a1 
           ENDDO a 
           print "Checksum of Dab_a"
           print esum 
#
           esum = 0.0 
           DO b 
           DO b1 
#
              GET Dab_b[b,b1] 
              etemp = Dab_b[b,b1]*Dab_b[b,b1] 
              esum += etemp 
#
           ENDDO b1 
           ENDDO b 
           print "Checksum of Dab_b"
           print esum 
           print esum 
#               
      ENDPROC S2DAB 
#     -------------
#
      PROC S2DIJKL 
#     ------------
#
      esum = 0.0 
      PARDO i, i1, i2, i3 
#
            REQUEST Dijkl_aa[i,i1,i2,i3] 
            etemp = Dijkl_aa[i,i1,i2,i3]*Dijkl_aa[i,i1,i2,i3]
            esum += etemp
#            
      ENDPARDO i, i1, i2, i3 
      print "checksum of Dijkl_aa"
      print esum 
#
      esum = 0.0 
      PARDO j, j1, j2, j3 
#
            REQUEST Dijkl_bb[j,j1,j2,j3] 
            etemp = Dijkl_bb[j,j1,j2,j3]*Dijkl_bb[j,j1,j2,j3]
            esum += etemp
#            
      ENDPARDO j, j1, j2, j3 
      print esum 
      print "checksum of Dijkl_bb"

#
      esum = 0.0 
      PARDO i, i1, j, j1 
#
            REQUEST Dijkl_ab[i,j,i1,j1] 
            etemp = Dijkl_ab[i,j,i1,j1]*Dijkl_ab[i,j,i1,j1]
            esum += etemp
#            
      ENDPARDO i, i1, j, j1 
      print esum 
      print "checksum of Dijkl_ab"
#
      ENDPROC S2DIJKL 
#     ---------------

      PROC S2ABCI 
#     -----------

      esum = 0.0 
      PARDO a, a1, a2, i 
#
            REQUEST Dabci_aaaa[a,a1,a2,i]   
            etemp = Dabci_aaaa[a,a1,a2,i]*Dabci_aaaa[a,a1,a2,i]
            esum += etemp
#
      ENDPARDO a, a1, a2, i 
      esum *= 0.5 # to match aces 
      print esum 
      print "checksum of Dabci_aaaa"
#
      esum = 0.0 
      PARDO b, b1, b2, j 
#
            REQUEST Dabci_bbbb[b,b1,b2,j] 
            etemp = Dabci_bbbb[b,b1,b2,j]*Dabci_bbbb[b,b1,b2,j]
            esum += etemp
#
      ENDPARDO b, b1, b2, j 
      esum *= 0.5 # to match aces 
      print "checksum of Dabci_bbbb"
      print esum 
#
      esum = 0.0 
      PARDO a, a1, b, j 
#
            REQUEST Dabci_abab[a,b,a1,j]  
            etemp = Dabci_abab[a,b,a1,j]*Dabci_abab[a,b,a1,j]
            esum += etemp
#
      ENDPARDO a, a1, b, j 
      print "checksum of Dabci_abab"
      print esum 
#
      esum = 0.0 
      PARDO a, b1, b, i 
#
            REQUEST Dabci_baba[b,a,b1,i]    
            etemp = Dabci_baba[b,a,b1,i]*Dabci_baba[b,a,b1,i]
            esum += etemp
#
      ENDPARDO a, b1, b, i 
      print "checksum of Dabci_baba"
      print esum 
#
      ENDPROC S2ABCI 
#     --------------
#
      PROC S2DIJKA 
#     ------------

      esum = 0.0 
      PARDO i, i1, i2, a 
#
            REQUEST Dijka_aaaa[i,i1,i2,a]   
            etemp = Dijka_aaaa[i,i1,i2,a]*Dijka_aaaa[i,i1,i2,a]
            esum += etemp
#            
      ENDPARDO i, i1, i2, a 
      esum *= 0.5 # to match aces 
      print "checksum of Dijka_aaaa"
      print esum 
#
      esum = 0.0 
      PARDO j, j1, j2, b 
#
            REQUEST Dijka_bbbb[j,j1,j2,b] 
            etemp = Dijka_bbbb[j,j1,j2,b]*Dijka_bbbb[j,j1,j2,b]
            esum += etemp
#            
      ENDPARDO j, j1, j2, b 
      esum *= 0.5 # to match aces
      print "checksum of Dijka_bbbb"
      print esum 
#
      esum = 0.0 
      PARDO i, i1, j, b 
#
            REQUEST Dijka_abab[i,j,i1,b]   
            etemp = Dijka_abab[i,j,i1,b]*Dijka_abab[i,j,i1,b]
            esum += etemp
#            
      ENDPARDO i, i1, j, b 
      print "checksum of Dijka_abab"
      print esum 
#
      esum = 0.0 
      PARDO i, j1, j, a 
#
            REQUEST Dijka_baba[j,i,j1,a]   
            etemp = Dijka_baba[j,i,j1,a]*Dijka_baba[j,i,j1,a]
            esum += etemp
#            
      ENDPARDO i, j1, j, a 
      print "checksum of Dijka_baba"
      print esum 
#
      ENDPROC S2DIJKA 
#     ---------------
#
      PROC S2DIJAB 
#     ------------
#
      esum = 0.0 
      PARDO i, i1, a, a1  
#
            REQUEST Dijab_aa[i,i1,a,a1] 
            etemp = Dijab_aa[i,i1,a,a1]*Dijab_aa[i,i1,a,a1]
            esum += etemp
#            
      ENDPARDO i, i1, a,a1 
      esum *= 0.25 # to match aces 
      print "checksum of Dijab_aa"
      print esum 
#
      esum = 0.0 
      PARDO j, j1, b, b1  
#
            REQUEST Dijab_bb[j,j1,b,b1]  
            etemp = Dijab_bb[j,j1,b,b1]*Dijab_bb[j,j1,b,b1]
            esum += etemp
#            
      ENDPARDO j, j1, b,b1 
      esum *= 0.25 # to match aces 
      print "checksum of Dijab_bb"
      print esum 
#
      esum = 0.0 
      PARDO i, j, a, b  
#
            REQUEST Dijab_ab[i,j,a,b] 
            etemp = Dijab_ab[i,j,a,b]*Dijab_ab[i,j,a,b]
            esum += etemp
#            
      ENDPARDO i, j, a, b 
      print "checksum of Dijab_ab"
      print esum 
#
      ENDPROC S2DIJAB 
#     ---------------
#
      PROC S2DIBJA 
#     ------------
#
      esum = 0.0 
      PARDO i, i1, a, a1  
#
            REQUEST Dibja_aaaa[i,a,i1,a1]   
            etemp = Dibja_aaaa[i,a,i1,a1]*Dibja_aaaa[i,a,i1,a1]
            esum += etemp
#            
      ENDPARDO i, i1, a, a1 
      print "checksum of Dibja_aaaa"
      print esum 
#
      esum = 0.0 
      PARDO j, j1, b, b1  
#
            REQUEST Dibja_bbbb[j,b,j1,b1]   
            etemp = Dibja_bbbb[j,b,j1,b1]*Dibja_bbbb[j,b,j1,b1]
            esum += etemp
#            
      ENDPARDO j, j1, b, b1 
      print "checksum of Dibja_bbbb"
      print esum 
#
      esum = 0.0 
      PARDO i, i1, b, b1  
#
            REQUEST Dibja_abab[i,b,i1,b1]   
            etemp = Dibja_abab[i,b,i1,b1]*Dibja_abab[i,b,i1,b1]
            esum += etemp
#            
      ENDPARDO i, i1, b, b1 
      print "checksum of Dibja_abab"
      print esum 
#
      esum = 0.0 
      PARDO j, j1, a, a1  
#
            REQUEST Dibja_baba[j,a,j1,a1]   
            etemp = Dibja_baba[j,a,j1,a1]*Dibja_baba[j,a,j1,a1]
            esum += etemp
#            
      ENDPARDO j, j1, a, a1 
      print "checksum of Dibja_baba"
      print esum 
#
      esum = 0.0 
      PARDO i, j, a, b  
#
            REQUEST Dibja_abba[i,b,j,a]   
            etemp = Dibja_abba[i,b,j,a]*Dibja_abba[i,b,j,a]
            esum += etemp
#            
      ENDPARDO i, j, a, b 
      print "checksum of Dibja_abba"
      print esum 
#
      esum = 0.0 
      PARDO i, j, a, b  
#
            REQUEST Dibja_baab[j,a,i,b]   
            etemp = Dibja_baab[j,a,i,b]*Dibja_baab[j,a,i,b]
            esum += etemp
#            
      ENDPARDO i, j, a, b 
      print "checksum of Dibja_baab"
      print esum 
#
      ENDPROC S2DIBJA 
#
# --------------------------------------------------------------------------- 
# 
      PROC DMAIN
#     ----------
#
         CALL TAU 
         CALL GAE 
         CALL GMI 
         server_barrier 
#
# Form DABCD. This is done here as the half-transformed amplitudes used 
# are not needed anywhere else  
# ----------------------------- 
         CALL DPQRSTODXXXX
#
# Form the single particle density DAB and DIJ   
# --------------------------------------------  
         CALL DAB 
         CALL DIJ 
#
# Compute the HF density 
# ---------------------- 
         CALL HFDENS  
#
# Form DIBJA 
# ---------- 
         CALL DIBJA # gamma4 
#
# Form DIJKL 
# ---------- 
         CALL DIJKL # gamma3 # BTRAN OK  
#
# Form DIJAB  
# ---------- 
         CALL DIJAB # gamma1 # BTRAN OK  
#
# Form DIJKA  
# ---------- 
         CALL DIJKA # gamma6 # BTRAN OK  
#
# Form DABCI 
# ---------- 
         CALL DABCI # gamma5 # BTRAN OK  
         server_barrier 
#
# Backtransform the 1-particle density matrix 
# ------------------------------------------- 
         CALL D1TRANS
         sip_barrier 
#
# Finally contract with the integral derivatives to get the contribution 
# to the gradient. 
# ---------------------------------------------------------------------- 
#
         CALL PDCONT 
#
      ENDPROC DMAIN
#     -------------
#
# The main program. Lets do the initializtions
#
     zmax = 0.0
     imax = 0.0
     one  = 1.0
     two  = 2.0
     six  = 6.0

     execute compute_int_scratchmem oed_ovl zmax imax

#bgn_debug
#      print "reference, the zmax and imax"
#      print reference
#      print zmax
#      print imax
#      print diis_order
#      print diis_start
#end_debug

# Read converged T and Lambda amplitudes
# --------------------------------------

      CALL READ_2EL

      CALL DMAIN 

                    ENDSIAL CcSD_2GRAD_UHF
#                   ----------------------


