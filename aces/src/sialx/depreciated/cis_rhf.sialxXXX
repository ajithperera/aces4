#  Copyright (c) 2003-2010 University of Florida
import "cis_rhf_defs.sialx" 
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                           SIAL CIS_RHF
#
#-------------------------------------------------------------------------------
#
# Declare indeces 
# --------------- 
#
      index kiter    = 1: cc_iter   
      index kstate   = 1: eom_roots
      index kstate1  = 1: eom_roots
      index ksub     = 1: eom_subspc
      index ksub1    = 1: eom_subspc
      index cart     = 1: 3
#
      aoindex mu     = 1: norb 
      aoindex nu     = 1: norb
      aoindex lambda = 1: norb
      aoindex sigma  = 1: norb
#
      moaindex i = baocc: eaocc
      moaindex i1= baocc: eaocc
      moaindex i2= baocc: eaocc
      moaindex i3= baocc: eaocc
#
      moaindex a = bavirt: eavirt
      moaindex a1= bavirt: eavirt
      moaindex a2= bavirt: eavirt
      moaindex a3= bavirt: eavirt
#
      moaindex j = baocc: eaocc
      moaindex j1= baocc: eaocc
      moaindex j2= baocc: eaocc
      moaindex j3= baocc: eaocc
#
      moaindex b = bavirt: eavirt
      moaindex b1= bavirt: eavirt
      moaindex b2= bavirt: eavirt
      moaindex b3= bavirt: eavirt
#
      moaindex p = baocc: eavirt
      moaindex p1= baocc: eavirt
      moaindex p2= baocc: eavirt
      moaindex p3= baocc: eavirt
#
      moaindex q = baocc: eavirt
      moaindex q1= baocc: eavirt
      moaindex q2= baocc: eavirt
      moaindex q3= baocc: eavirt
#
##########################################
#
      int Mrank
      scalar stemp
      scalar zero
      scalar rank
      scalar icount1
      scalar icount2
      scalar rmseconv
      scalar etemp
      scalar esum
      scalar emom
#
      static unit[p]
      static eig_o[i]
      static eig_v[a]
      static Ca[mu,p]
      static Fock_a[p,p1]
      static SBvec[ksub,a,i]
      static Sck0[kstate,a,i]
      static Sck1[kstate,a,i]
      static Srk[kstate,a,i]
      static GSmat[ksub,ksub1]
      static GSold[ksub,ksub1]
      static SAlpha[ksub,ksub1]
      static DeltaE[kstate]
      static Ek[kstate]
      static EkeV[kstate]
      static SHDiag[a,i]
      static knorm[kstate]
#
#
##########################################
#
# served arrays
      served Vxxxi[mu,nu,lambda,i]
      served Vxxii[mu,nu,i1,i]
      served Vixxi[i1,nu,lambda,i]
      served Vixai[i,mu,a,i1]
      served Vxaii[mu,a,i,i1]
      served Viaai[i,a1,a,i1]
      served Vaaii[a,a1,i,i1]
#
      served Vxixj[mu,i,nu,j]
      served Vxiqj[mu,i,q,j]
      served Vpiqj[p,i,q,j]
#
      served Bvec[ksub,a,i]
      served ck0[kstate,a,i]
      served ck1[kstate,a,i]
      served rk[kstate,a,i]
      served Hb[ksub,a,i]
      served Hmat[i,a,b,j]
      served HDiag[a,i]
      served Gmat[ksub,ksub1]
      served Gold[ksub,ksub1]
      served Alpha[ksub,ksub1]
#
# temp arrays
      temp Taik[a,i,ksub]
      temp T1aik[a,i,ksub]
      temp Tkai[ksub,a,i]
      temp T1kai[ksub,a,i]
      temp T2kai[ksub,a,i]
      temp T3kai[ksub,a,i]
      temp T4kai[ksub,a,i]
      temp T5kai[ksub,a,i]
      temp Tkk[ksub,ksub1]
      temp T1kk[ksub,ksub1]
      temp Tai[a,i]
      temp T1ai[a,i]
      temp T2ai[a,i]
      temp T3ai[a,i]
      temp T4ai[a,i]
      temp Tk[ksub]
      temp T1k[ksub]
# integral arrays
      temp  T2iaai[i1,a1,a,i]
      temp  T3iaai[i1,a1,a,i]
      temp Txixj[mu,i,nu,j]
      temp T1xixj[mu,i,nu,j]
      temp Txiqj[mu,i,q,j]
      temp T1xiqj[mu,i,q,j]
      temp Tpiqj[p,i,q,j]
      temp T1piqj[p,i,q,j]
      temp Tiixx[i,i1,mu,nu]
      temp Tiixb[i,i1,mu,b]
      temp Tiibb[i,i1,b1,b]
      temp Txajj[mu,a,j,j1]
      temp T1xajj[mu,a,j,j1]
      temp Taajj[a,a1,j,j1]
      temp T1aajj[a,a1,j,j1]
      temp Txabj[mu,a,b,j]
      temp T1xabj[mu,a,b,j]
      temp Tixxj[i,mu,nu,j]
      temp Tixbj[i,mu,b,j]
      temp T1ixbj[i,mu,b,j]
      temp Tiabj[i,a,b,j]
      temp T1iabj[i,a,b,j]
      temp Taabj[a,a1,b,j]
      temp T1aabj[a,a1,b,j]
#
      temp Txbii[mu,b,i,i1]
      temp T1xbii[mu,b,i,i1]
      temp Tbbii[b,b1,i,i1]
      temp T1bbii[b,b1,i,i1]
      temp Tjbii[j,b,i,i1]
      temp T1jbii[j,b,i,i1]
      temp Txbai[mu,b,a,i]
      temp T1xbai[mu,b,a,i]
      temp Tbbai[b,b1,a,i]
      temp T1bbai[b,b1,a,i]
#
      temp Taaai[a,a1,a2,i] 
      local Laaai[a2,a,a1,i] 
      temp T1aaai[a,a1,a2,i] 
      temp Txxai[mu,nu,a,i] 
      temp Txaai[mu,a,a1,i] 
      local Lxaai[mu,a1,a,i] 
      temp T1xaai[mu,a,a1,i] 
      temp Txaii[mu,a,i,i1] 
      temp T1xaii[mu,a,i,i1] 
      temp Tiaai[i,a,a1,i1] 
      temp T1iaai[i,a,a1,i1] 
      temp Taaii[a,a1,i,i1] 
      temp T1aaii[a,a1,i,i1] 
      temp T1xxai[mu,nu,a,i] 
      temp Tixai[i,mu,a,i1] 
      temp T1ixai[i,mu,a,i1] 
      temp Txipi[mu,i,p1,i1] 
      temp T1xipi[mu,i,p1,i1] 
      temp Tpipi[p,i,p1,i1] 
      temp T1pipi[p,i,p1,i1] 
#
      temp T1xxbj[mu,nu,b,j] 
#
      temp Txxij[mu,nu,i,j] 
      temp T1xxij[mu,nu,i,j] 
      temp T1ixxj[i,mu,nu,j] 
      local Txxxi[mu,nu,lambda,i]
      temp T1xxxi[mu,nu,lambda,i]
      local Txxxj[mu,nu,lambda,j]
      temp T1xxxj[mu,nu,lambda,j]
      temp Txixi[mu,i,nu,i1]
      temp T1xixi[mu,i,nu,i1]
      temp Txxii[mu,nu,i1,i] 
      temp T1xxii[mu,nu,i1,i] 
      temp Tixxi[i1,mu,nu,i] 
      temp T1ixxi[i1,mu,nu,i] 
      temp Txxpi[mu,nu,p,i] 
      temp Txiai[mu,i1,a,i] 
      temp Taiai[a1,i1,a,i] 
      temp T1aiai[a1,i1,a,i] 
      temp Taxai[a1,nu,a,i] 
      temp Tpxpi[p1,nu,p,i] 
#
# Declare integral arrays 
# ------------------------  
#
      temp AOINT[mu,nu,lambda,sigma] 
#     served SAOINT(mu,nu,lambda,sigma) 
      local TAOINT[mu,nu,lambda,sigma] 
      local L1xxxi[mu,nu,lambda,i] 
      local L2xxxi[mu,lambda,nu,i] 
      local L3xxxi[lambda,mu,nu,i] 
      local L1xxxj[mu,nu,lambda,j] 
      local L2xxxj[mu,lambda,nu,j] 
      local L3xxxj[lambda,mu,nu,j] 
      local Lxixi[mu,i,nu,i1] 
      local Lxxii[mu,nu,i,i1] 
      local Lixxi[i,mu,nu,i1] 
      local Lxjxj[mu,j,nu,j1] 
      local Lxxjj[mu,nu,j,j1] 
      local Ljxxj[j,mu,nu,j1] 
      local Lxxai[mu,nu,a,i] 
      local Lxxbj[mu,nu,b,j] 
      local Lxixj[mu,i,nu,j] 
      local Lixxj[i,mu,nu,j] 
      local Lxipi[mu,i,p,i1] 
      local Lxaii[mu,a,i,i1] 
      local Lixai[i,mu,a,i1] 
      local L1xaai[mu,a,a1,i]  
      local L2xaai[mu,a,a2,i]  
      local Lxjqj[mu,j,q,j1]  
      local Lxbjj[mu,b,j,j1] 
      local Ljxbj[j,mu,b,j1] 
      local Lxbbj[mu,b,b1,j] 
      local Lxbii[mu,b,i,i1] 
      local Lxbai[mu,b,a,i] 
      local Lxiqj[mu,i,q,j] 
      local Lxajj[mu,a,j,j1] 
      local Lixbj[i,mu,b,j] 
      local Lxabj[mu,a,b,j] 
      local L1xbbj[mu,b,b1,j] 
# density crap
      static tmom[cart,kstate]
      static Scart[cart]
      served Ck_hb[mu,i]
      served Ck_ao[mu,nu]
      temp Tkxx[mu,nu]
      temp Tkxx1[mu,nu]
      temp Tkxi[mu,i]
      temp Tkxi1[mu,i]
      temp Tkxi3[mu,i]
      temp DAOINT[mu,nu]
      temp Txx[mu,nu]
      temp Txx1[mu,nu]
#
##########################################
#
      proc form_H
#
      pardo i,a,b,j
          Tiaai[i,a,b,j] = 0.0
          prepare Hmat[i,a,b,j] = Tiaai[i,a,b,j]
      endpardo i,a,b,j
      server_barrier
      pardo i,a,b,j
          request Viaai[i,a,b,j] 
          request Vaaii[b,a,i,j] 

         Tiaai[i,a,b,j]  = Viaai[i,a,b,j]
          T1iaai[i,a,b,j] = Vaaii[b,a,i,j]

          Tiaai[i,a,b,j] *= 2.0
          Tiaai[i,a,b,j] -= T1iaai[i,a,b,j]

          T2iaai[i,a,b,j] = 0.0

          if a==b
          if i==j
#
              execute cis_energy_numerator T2iaai[i,a,b,j] Fock_a
#
              T3iaai[i,a,b,j] = Tiaai[i,a,b,j]
              execute cis_energy_numerator T3iaai[i,a,b,j] Fock_a
              T1ai[b,j] = 1.0
              Tai[a,i]  = T3iaai[i,a,b,j]*T1ai[b,j]
              prepare HDiag[a,i] = Tai[a,i]

          endif
          endif

          Tiaai[i,a,b,j] += T2iaai[i,a,b,j]
          prepare Hmat[i,a,b,j] = Tiaai[i,a,b,j]

      endpardo i,a,b,j
#
      server_barrier
#
      endproc form_H
#
      proc form_guess
#
      execute get_my_rank rank
      if rank == 0.0
      do a
          do i
              request HDiag[a,i] 
              Tai[a,i] = HDiag[a,i]
              SHDiag[a,i] = Tai[a,i]
          enddo i
      enddo a
#
      do ksub
          do a
              do i
                  tkai[ksub,a,i] = 0.0
                  SBvec[ksub,a,i] = tkai[ksub,a,i]
              enddo i
          enddo a
      enddo ksub
#
      execute cis_unit_guess SBvec SHDiag
#
      do ksub
          do a
              do i
                  tkai[ksub,a,i] = SBvec[ksub,a,i]
                  prepare Bvec[ksub,a,i] = tkai[ksub,a,i]
              enddo i
          enddo a
      enddo ksub
#
      do kstate
          do a
              do i
                  tkai[kstate,a,i] = SBvec[kstate,a,i]
                  prepare ck1[kstate,a,i] = tkai[kstate,a,i]
              enddo i
          enddo a
      enddo kstate
#
      endif #rank == 0.0
#
      do ksub
          do ksub1
              Tkk[ksub,ksub1] = 0.0
              GSold[ksub,ksub1] = Tkk[ksub,ksub1]
          enddo ksub1
      enddo ksub
#
      server_barrier
#
      endproc form_guess
#
      proc form_G
#
      pardo ksub,a,i
          Tkai[ksub,a,i] = 0.0
          prepare Hb[ksub,a,i] = Tkai[ksub,a,i]
      endpardo ksub,a,i
#
      pardo ksub,ksub1
          Tkk[ksub,ksub1] = 0.0
          prepare Gmat[ksub,ksub1] = Tkk[ksub,ksub1]
      endpardo ksub,ksub1
#
      server_barrier
#
# expensive H*b nv**2o**2 contraction
      do ksub
#
      pardo i,a,b,j
          request Hmat[i,a,b,j] 
          request Bvec[ksub,b,j] 
          Tiaai[i,a,b,j] = Hmat[i,a,b,j]
          T1kai[ksub,b,j] = Bvec[ksub,b,j]

          Tkai[ksub,a,i] = T1kai[ksub,b,j]*Tiaai[i,a,b,j]
          prepare Hb[ksub,a,i] += Tkai[ksub,a,i]
      endpardo i,a,b,j
#
      enddo ksub
#
      server_barrier
#
      pardo ksub,ksub1,a,i
          request Hb[ksub,a,i] 
          request Bvec[ksub1,a,i] 
          T1kai[ksub,a,i] = Hb[ksub,a,i]
          Tkai[ksub1,a,i] = Bvec[ksub1,a,i]

          Tkk[ksub,ksub1] = Tkai[ksub1,a,i]*T1kai[ksub,a,i]
          prepare Gmat[ksub,ksub1] += Tkk[ksub,ksub1]
      endpardo ksub,ksub1,a,i
#
      server_barrier
#
      do ksub
          do ksub1
              request Gmat[ksub,ksub1] 
              #Tkk(ksub,ksub1) = Gmat(ksub,ksub1)
              #GSmat(ksub,ksub1) = Tkk(ksub,ksub1)
              GSmat[ksub,ksub1] = Gmat[ksub,ksub1]
          enddo ksub1
      enddo ksub
#
      execute eigen_calc GSmat SAlpha
##
      execute get_my_rank rank
      if rank == 0.0
      do ksub
          do ksub1
              T1kk[ksub,ksub1] = SAlpha[ksub,ksub1]
              prepare Alpha[ksub,ksub1] = T1kk[ksub,ksub1]
          enddo ksub1
      enddo ksub
      endif #rank == 0.0
##
      rmseconv = 0.0
      etemp = 0.0
      icount2 = 0.0
      do kstate
          do kstate1
              if kstate == kstate1
              execute return_sval GSmat[kstate,kstate1] stemp
              Ek[kstate]     = stemp
              DeltaE[kstate] = stemp
              execute return_sval GSold[kstate,kstate1] stemp
              Tk[kstate] = stemp
              DeltaE[kstate] -= Tk[kstate]
              endif #kstate == kstate1
          enddo kstate1
          #execute return_sval DeltaE[kstate] stemp
	  stemp = DeltaE[kstate]*DeltaE[kstate]
          etemp += stemp
	  icount2 += 1.0
      enddo kstate
      rmseconv = (etemp/icount2)**0.5
#
      do ksub
          do ksub1
              GSold[ksub,ksub1] = GSmat[ksub,ksub1]
          enddo ksub1
      enddo ksub
#
      execute get_my_rank rank
      if rank == 0.0
          print Ek
          print DeltaE
          print rmseconv
      endif #rank == 0.0
#
      server_barrier
      endproc form_G
#
      proc update_vecs
#
      pardo kstate,a,i
          Tkai[kstate,a,i] = 0.0
          prepare ck0[kstate,a,i] = Tkai[kstate,a,i]
          prepare rk[kstate,a,i] = Tkai[kstate,a,i]
      endpardo kstate,a,i
#
      server_barrier
#
      pardo kstate,a,i
          request ck1[kstate,a,i] 
          Tkai[kstate,a,i] = ck1[kstate,a,i]
          prepare ck0[kstate,a,i] = Tkai[kstate,a,i]
      endpardo kstate,a,i
#
      server_barrier
#
      pardo kstate,a,i
          Tkai[kstate,a,i] = 0.0
          do ksub
              request Alpha[ksub,kstate] 
              request Bvec[ksub,a,i] 
              Tkk[kstate,ksub] = Alpha[ksub,kstate]
              T1kai[ksub,a,i] = Bvec[ksub,a,i]
              T2kai[kstate,a,i] = Tkk[kstate,ksub]*T1kai[ksub,a,i]
              Tkai[kstate,a,i] += T2kai[kstate,a,i]
          enddo ksub
          prepare ck1[kstate,a,i] = Tkai[kstate,a,i]
      endpardo kstate,a,i
#
      server_barrier
#
      pardo kstate,a,i
          execute return_sval Ek[kstate] stemp

          Tkai[kstate,a,i] = 0.0

          do ksub
              request Hb[ksub,a,i] 
              T1kai[ksub,a,i] = Hb[ksub,a,i]
              request Bvec[ksub,a,i] 
              T2kai[ksub,a,i] = Bvec[ksub,a,i]
              request Alpha[ksub,kstate] 
              T1kk[kstate,ksub] = Alpha[ksub,kstate]

# a*Hb
              T3kai[kstate,a,i] = T1kk[kstate,ksub]*T1kai[ksub,a,i]

# a*E*b
              T4kai[kstate,a,i]  = T1kk[kstate,ksub]*T2kai[ksub,a,i]
              T4kai[kstate,a,i] *= stemp

              T3kai[kstate,a,i] -= T4kai[kstate,a,i]
              Tkai[kstate,a,i]  += T3kai[kstate,a,i]
          enddo ksub

# tricks to get (H_II - E)**-1
          request HDiag[a,i] 
          Tai[a,i]   = HDiag[a,i]
          Tk[kstate] = 1.0
          T1ai[a,i]  = 1.0
          T1k[kstate] = Ek[kstate]
          T4kai[kstate,a,i]  = Tai[a,i]^Tk[kstate]
          T5kai[kstate,a,i]  = T1k[kstate]^T1ai[a,i]
          T4kai[kstate,a,i] -= T5kai[kstate,a,i]

          execute invert_diagonal Tkai[kstate,a,i] T4kai[kstate,a,i] 
          Tkai[kstate,a,i] *= -1.0
          prepare rk[kstate,a,i] = Tkai[kstate,a,i]

      endpardo kstate,a,i
#
      server_barrier
#
# only need evaluate the B vector update on one proc
      execute get_my_rank rank
      if rank == 0.0
#
          do kstate
              do a
                  do i
                      request ck0[kstate,a,i] 
                      request ck1[kstate,a,i] 
                      request rk[kstate,a,i] 

                      Tkai[kstate,a,i] = ck0[kstate,a,i]
                      Sck0[kstate,a,i] = Tkai[kstate,a,i]
#
                      Tkai[kstate,a,i] = ck1[kstate,a,i]
                      Sck1[kstate,a,i] = Tkai[kstate,a,i]
#
                      Tkai[kstate,a,i] = rk[kstate,a,i]
                      Srk[kstate,a,i] = Tkai[kstate,a,i]
                  enddo i
              enddo a
          enddo kstate
          execute update_cis_bvec SBvec Sck0 Sck1 Srk
          do ksub
              do a
                  do i
                      Tkai[ksub,a,i] = SBvec[ksub,a,i]
                      prepare Bvec[ksub,a,i] = Tkai[ksub,a,i]
                  enddo i
              enddo a
          enddo ksub
#
      endif #rank==0.0
#
      server_barrier

      endproc update_vecs
#
#
      proc transition_moments
#
      icount2 = 1.0
      do cart
	  Scart[cart] = icount2
	  icount2 += 1.0
      enddo cart
      do kstate
#
	  pardo mu,i
	      Tkxi[mu,i] = 0.0
	      prepare Ck_hb[mu,i] = Tkxi[mu,i]
	  endpardo mu,i
	  pardo mu,nu
	      Tkxx[mu,nu] = 0.0
	      prepare Ck_ao[mu,nu] = tkxx[mu,nu]
	  endpardo mu,nu
	  server_barrier
# back transform Cai to ao basis
# first half, V
	  pardo mu,i
	      Tkxi[mu,i] = 0.0
	      do a
	          request ck0[kstate,a,i]
		  Tk[kstate] = 1.0
		  Tai[a,i] = ck0[kstate,a,i]*Tk[kstate]
		  Tkxi1[mu,i] = Tai[a,i]*ca[mu,a]
		  Tkxi[mu,i] += Tkxi1[mu,i]
	      enddo a
   	      prepare Ck_hb[mu,i] = Tkxi[mu,i]
	  endpardo mu,i
	  server_barrier
# second half, O
	  pardo mu,nu
	      Tkxx[mu,nu] = 0.0
	      do i
		  request Ck_hb[mu,i]
		  Tkxx1[mu,nu] = Ck_hb[mu,i]*ca[nu,i]
		  Tkxx[mu,nu] += Tkxx1[mu,nu]
	      enddo i
	      prepare Ck_ao[mu,nu] = Tkxx[mu,nu]
	  endpardo mu,nu
	  server_barrier
#
#	  pardo mu,nu
#	  request Ck_ao[mu,nu]
#	  execute print_block Ck_ao[mu,nu]
#	  endpardo mu,nu
	  do cart
	      icount2 = Scart[cart]
	      esum = 0.0
	      emom = 0.0
	      print icount2
	      pardo mu,nu
		  request Ck_ao[mu,nu]
		  request Ck_ao[nu,mu]
		  #DAOINT[mu,nu] = 0.0
		  execute compute_dipole_integrals DAOINT[mu,nu] icount2
		  Txx[mu,nu]  = Ck_ao[mu,nu]
		  Txx1[mu,nu] = Ck_ao[nu,mu]
		  Txx[mu,nu] += Txx1[mu,nu]
		  etemp = Ck_ao[mu,nu]*DAOINT[mu,nu]
		  esum += etemp
	      endpardo mu,nu
	      server_barrier
	      collective emom += esum
	      server_barrier
	      tmom[cart,kstate] = emom
	  enddo cart
	  server_barrier
#	  pardo mu,nu
#	  request Ck_ao[mu,nu]
#	  print ck_ao[mu,nu]
#	  endpardo mu,nu
      enddo kstate
      print tmom
#
      endproc transition_moments
#
##########################################
# MAIN
##########################################
      sip_barrier
#
print " "
print "-- Parallel CIS program"
print "-- J. Phys. Chem. 1992, 96, 135-149."
print "-- Subspace collapse symmetric davidson update"
print "-- Written by Jason N. Byrd, 2014"
print "  " 

      Mrank = 0
      print eom_tol

#
      restore_persistent ca "ca"
      restore_persistent Fock_a "fock_a"
      server_barrier 
#      CALL TRAN_UHF 
      restore_persistent Viaai "Viaai"
      restore_persistent Vaaii "Vaaii"
      server_barrier 
#
      call form_H
      call form_guess

      icount1 = 1.0
      do kiter
          print icount1
          icount1 += 1.0

          call form_G
          call update_vecs

          if rmseconv > 0.0
              if rmseconv < eom_tol
                  exit
              endif
          endif
          if rmseconv < 0.0
              rmseconv *= -1.0
              if rmseconv < eom_tol
                  exit
              endif
          endif
      enddo kiter
#
      print "Converged CIS spectrum"

      execute get_my_rank rank
      if rank == 0.0
      print Ek
      print DeltaE
      do kstate
	  etemp = Ek[kstate]*27.2113961
	  EkeV[kstate] = etemp
      enddo kstate
      print EkeV
      endif

     # call transition_moments
#
      set_persistent     ca    "ca" 
      set_persistent     Fock_a "fock_a"
      set_persistent ck0 "Ck0"
      set_persistent Ek "CEk"
      set_persistent SBvec "C1_A"
      set_persistent Viaai "Viaai"
      set_persistent Vaaii "Vaaii"
# 
###########################################
                           ENDSIAL CIS_RHF
