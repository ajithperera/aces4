import "reom_rhf_defs.sialx" 

SIAL R_EE_EOM_CCSD_RHF
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# Declare indeces

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
index kiter    = 1: 20 #cc_iter
index kstate   = 1: eom_roots
index kstate1  = 1: eom_roots
index jstate   = 1: eom_roots
index qstate   = 2: eom_roots
index ksub     = 1: eom_subspc
index ksub1    = 1: eom_subspc
index ksub2    = 1: eom_subspc
index qsub     = 2: eom_subspc
index jsub     = 1: eom_subspc
index cart     = 1: 3

aoindex mu     = 1: norb
aoindex nu     = 1: norb
aoindex lambda = 1: norb
aoindex sigma  = 1: norb

moaindex i = baocc: eaocc
moaindex i1= baocc: eaocc
moaindex i2= baocc: eaocc
moaindex i3= baocc: eaocc

moaindex a = bavirt: eavirt
moaindex a1= bavirt: eavirt
moaindex a2= bavirt: eavirt
moaindex a3= bavirt: eavirt

moaindex j = baocc: eaocc
moaindex j1= baocc: eaocc
moaindex j2= baocc: eaocc
moaindex j3= baocc: eaocc

moaindex b = bavirt: eavirt
moaindex b1= bavirt: eavirt
moaindex b2= bavirt: eavirt
moaindex b3= bavirt: eavirt

moaindex p = baocc: eavirt
moaindex p1= baocc: eavirt
moaindex p2= baocc: eavirt
moaindex p3= baocc: eavirt

moaindex q = baocc: eavirt
moaindex q1= baocc: eavirt
moaindex q2= baocc: eavirt
moaindex q3= baocc: eavirt


scalar rank
int myrank
int root
int iguess

static ca[mu,p]
static fock_a[p,p1]
static SEk[ksub]
static SEkold[kstate]
static SEk0[kstate]
distributed Ek[kstate]

static C1_a[ksub2,a,i]

served  R2AA[a,i,a1,i1]
served  R2BB[b,j,b1,j1]
served  R2AB[a,i,b,j]

served  L2AA[i,a,i1,a1]
served  L2BB[j,b,j1,b1]
served  L2AB[i,a,j,b]

served  A2AA[i,a,i1,a1]
served  A2BB[j,b,j1,b1]
served  A2AB[i,a,j,b]

served  R1A[a,i]
served  R1B[b,j]

served  L1A[i,a]
local        LL1A[i,a]
served  L1B[j,b]

served  A1A[i,a]
local        LA1A[i,a]
served  A1B[j,b]

distributed  T1A[a,i]
local        LT1A[a,i]
distributed  T1B[b,j]

served  T2AA[a,i,a1,i1]
served  T2AB[a,i,b,j]
served  T2BB[b,j,b1,j1]

temp  Tk[ksub]
temp  T1k[ksub]
temp  T2k[ksub]
temp  tpipi[p,i,p1,i1]
temp  tiaia[i,a,i1,a1]
temp  tjbjb[j,b,j1,b1]
temp  tiajb[i,a,j ,b ]
temp  taibj[a,i,b ,j ]
temp  taibj1[a,i,b ,j ]
temp  tbjai[b,j,a,i]
temp  taiai[a,i,a1,i1]
temp  taiai1[a,i,a1,i1]
temp  tbjbj[b,j,b1,j1]
temp  tpppp[p,p1,q,q1] 

temp  tia [i,a]
temp  tia1[i,a]
temp  tia2[i,a]
temp  tia3[i,a]
temp  tai [a,i]
temp  tai1[a,i]
temp  tai2[a,i]
temp  tjb [j,b]
temp  tjb1[j,b]
temp  tjb2[j,b]
temp  tjb3[j,b]
temp  tbj [b,j]
temp  tbj2[b,j]
temp  tbj3[b,j]
temp  tii [i1,i]
temp  tjj [j1,j]
temp  taa [a,a1]
temp  taa2[a,a1]
temp  tbb [b,b1]
temp  tbb2[b,b1]

temp  tij[i,j]
temp  tii1[i,i1]
temp  tii2[i,i1]
temp  tjj1[j,j1]
temp  tjj2[j,j1]
temp  taa1[a,a1]
temp  tbb1[b,b1]

local  lai[a,i]
local  lbj[b,j]
local  lia[i,a]
local  ljb[j,b]
local  laa[a,a1]
local  lbb[b,b1]
local  lii[i,i1]
local  ljj[j,j1]
local  lxx[mu,nu]

temp  txx [mu,nu]
temp  txx2[mu,nu]
temp  txx3[mu,nu]
temp  txi [mu,i]
temp  txj [mu,j]
temp  txa [mu,a]
temp  txb [mu,b]

served  Vaaii [a,a1,i,i1]
served  Viaai [i,a,a1,i1]
served  Vaaai [a,a1,a2,i]

served  DENS_VV_A[a,a1]
served  DENS_OO_A[i,i1]
served  DENS_OV_A[i,a]
served  DENS_VO_A[a,i]

served T2L2_VV_A[a,a1] 
served R2L2_VV_A[a,a1] 
served DENS_INT_OV_A[i,a] 
served T1L1_OO_A[i,i1] 
served T2L2_OO_A[i,i1] 
served R2L2_OO_A[i,i1] 

served  AO_DENS[mu,nu]
served  DHF[mu,nu]

local  liaia [i,a,i1,a1]
local  laiai [a,i,a1,i1]
local  laibj [a,i,b, j ]
local  liajb [i,a,j, b ]
local  laiai2[a,i,a1,i1]
local  laibj2[a,i1,b,j ]
local  laiai3[a,i,a1,i2]
local  laiai4[a,i2,a1,i] 
local  laiai5[a,i2,a1,i] 
local  laibj3[a,i1,b, j]
local  laibj4[a,j,b,i] 
local  laibj5[a,j,b,i] 
local  lbiaj [b,i,a,j] 
local  lbiaj2[b,i,a,j] 

local  lbjbj [b,j,b1,j1]
local  lbjbj2[b,j,b1,j1]
local  lbjbj3[b,j,b1,j2]
local  lbjbj4[b,j2,b1,j] 
local  lbjbj5[b,j2,b1,j] 

scalar normcrit
SCALAR  ZERO
SCALAR  ONE
SCALAR  TWO
SCALAR  THREE
SCALAR  ONEHALF
SCALAR  tmpnuc
SCALAR  dipnuc
SCALAR  dipnucx
SCALAR  dipnucy
SCALAR  dipnucz
SCALAR  AMPLTHRESH
SCALAR  OMEGA
SCALAR  OMEGA2
SCALAR  OLD_R0
SCALAR  R0
SCALAR  L0
SCALAR  R0_THRESH
SCALAR  LOGRIGHT
SCALAR  GROUNDSTATE
SCALAR  EXCITESTATE
SCALAR  iroot
SCALAR  imomcount
SCALAR  rootcount
scalar rmsconv
SCALAR  etemp
SCALAR  etemp1
SCALAR  etemp2
SCALAR  etemp3
SCALAR  etemp4
SCALAR  etemp5
SCALAR  etemp6
SCALAR  sum1
SCALAR  sum2
SCALAR  sum3
SCALAR  sum4
SCALAR  sum5
SCALAR  sum6
SCALAR  OSC_STREN
SCALAR  OSC_STREN1
SCALAR  OSC_STREN2
SCALAR  OSC_STREN3
SCALAR  OSC_STREN_X
SCALAR  OSC_STREN_Y
SCALAR  OSC_STREN_Z
SCALAR  DIP_SCF_X
SCALAR  DIP_SCF_Y
SCALAR  DIP_SCF_Z
SCALAR  DIP_EXC_X
SCALAR  DIP_EXC_Y
SCALAR  DIP_EXC_Z
SCALAR  DIP_GRD_X
SCALAR  DIP_GRD_Y
SCALAR  DIP_GRD_Z
SCALAR  DIP_MOM_X
SCALAR  DIP_MOM_Y
SCALAR  DIP_MOM_Z
SCALAR  DIP_MOM_X_L
SCALAR  DIP_MOM_Y_L
SCALAR  DIP_MOM_Z_L
SCALAR  DIP_MOM_X_R
SCALAR  DIP_MOM_Y_R
SCALAR  DIP_MOM_Z_R
SCALAR  DIPXY
SCALAR  DIPXZ
SCALAR  DIPYZ
SCALAR  POLXX
SCALAR  POLYY
SCALAR  POLZZ
SCALAR  POLXY
SCALAR  POLXZ
SCALAR  POLYZ
SCALAR  POLTOTXX
SCALAR  POLTOTYY
SCALAR  POLTOTZZ
SCALAR  POLTOTXY
SCALAR  POLTOTXZ
SCALAR  POLTOTYZ
SCALAR  SECONDMOM
SCALAR  LRNORM  
SCALAR  esum  


# Declare two-electron integral arrays
# ------------------------------------

served VSpipi[p1,i,p,i1]
served VSaaai[a2,a,a1,i]

served VSqjqj[q1,j,q,j1]
served Vjbbj[j,b1,b,j1]
served Vbbjj[b,b1,j,j1]

served Vjbii[j,b,i,i1]
served Vbbii[b,b1,i,i1]
served Vbbai[b,b1,a,i]

served Vpiqj[p,i,q,j]
served Vaajj[a,a1,j,j1]
served Viabj[i,a,b,j]
served Vaabj[a,a1,b,j]

served NIAAI[i,a,a1,i1]
served NJBAI[j,b,a,i]
served NIABJ[i,a,b,j]
served NJJAA[j1,j,a1,a]
served NIIBB[i1,i,b1,b]

# Declare CCSD amplitude arrays
# -----------------------------

static St1a[a,i] 
static St1b[b,j] 

# Arrays for AO routine

temp AOINT[mu,lambda,nu,sigma]
temp Txxxx[mu,nu,lambda,sigma]
temp T1xxxx[mu,nu,lambda,sigma]
local Lxxxj[mu,lambda,nu,j]
local Lxxbj[mu,nu,b,j]
local Lxabj[mu,a,b,j]
local Laabj[a1,a,b,j]
local Lxxxi[mu,lambda,nu,i]
local Lxxai[mu,nu,a,i]
local Lxbai[mu,b,a,i]
local Lbbai[b1,b,a,i]
local Lxaai[mu,a1,a,i]
local Laaai[a2,a1,a,i]
local Lxbbj[mu,b1,b,j]
local Lbbbj[b2,b1,b,j]
local Xbbbj[b,b2,b1,j] 
temp tmxxxj[mu,lambda,nu,j]
temp t1mxxxj[mu,lambda,nu,j]
temp tmxxbj[mu,lambda,b,j]
temp t1mxxbj[mu,lambda,b,j]
temp tmxabj[mu,a,b,j]
temp t1mxabj[mu,a,b,j]
temp tmaabj[a1,a,b,j]
temp t1maabj[a1,a,b,j]

temp tmxbbj[mu,b1,b,j]
temp t1mxbbj[mu,b1,b,j]
temp tmbbbj[b2,b1,b,j]
temp t1mbbbj[b2,b1,b,j]

temp tmxaai[mu,a1,a,i]
temp t1mxaai[mu,a1,a,i]
temp tmaaai[a2,a1,a,i]
temp t1maaai[a2,a1,a,i]

temp tmxxxi[mu,lambda,nu,i]
temp t1mxxxi[mu,lambda,nu,i]
temp tmxxai[mu,lambda,a,i]
temp t1mxxai[mu,lambda,a,i]
temp tmxbai[mu,b,a,i]
temp t1mxbai[mu,b,a,i]
temp tmbbai[b1,b,a,i]
temp t1mbbai[b1,b,a,i]

served Mxxxj[mu,lambda,nu,j]
served Mxxbj[mu,lambda,b,j]
served Mxabj[mu,a,b,j]
served Mxaai[mu,a1,a,i]
served Mxbbj[mu,b1,b,j]

served Mxxxi[mu,lambda,nu,i]
served Mxxai[mu,lambda,a,i]
served Mxbai[mu,b,a,i]

temp t1xj[sigma,j]
distributed Mxj[sigma,j]
temp t1xi[sigma,i]
distributed Mxi[sigma,i]


# Declare HBAR arrays. 
# -------------------- 

distributed HBAR_ia[i,a]
distributed HBAR_jb[j,b]
distributed HBAR_aa[a,a1] 
distributed HBAR_ii[i1,i] 
distributed HBAR_jj[j1,j] 

local LHBAR_ii[i1,i] 
local LHBAR_jj[j,j1] 
local LHBAR_ia[i,a] 
local LHBAR_jb[j,b] 
local LHBAR_aa[a,a1] 

served HBAR_iiii[i,i1,i2,i3] 
served HBAR_iijj[i,i1,j,j1] 

served HBAR_AIBC_aaaa[a,a1,i,a2]
served HBAR_AIBC_aabb[a,a1,j,b2]

served HBAR_JKIA_aaaa[i1,i,i2,a] 
served HBAR_JKIA_aabb[i1,i,j2,b] 

served HBAR_IAJK_aaaa[i,i1,a,i2] 
served HBAR_IAJK_aabb[i,i1,b,j] 

served HBAR_AJIB_aaaa[i1,a1,a,i] 
served HBAR_AJIB_aabb[i,a,b,j] 
served HBAR_AJIB_iibb[i1,i,b,b1] 

served HBAR_ABCI_aaaa[a,a1,a2,i] 
served HBAR_ABCI_aabb[a,a1,b,j] 

served WHIAAI[i,a,a1,i1] 
served WHJBBJ[j,b,b1,j1] 
served WHIABJ[i,a,b1,j1] 
served WHJBAI[j,b,a1,i1] 
served WHIIBB[i,i1,b,b1] 
served WHJJAA[j,j1,a,a1] 

distributed D2aa[a,i,a1,i1] 

served Vxxaa[mu,nu,a1,a] 
served Vaaaa[a3,a2,a1,a] 
temp Txxxp[mu,nu,lambda,p] 
temp Txxpp[mu,nu,p1,p] 
temp Txppp[mu,p2,p1,p] 

temp Txxxq[mu,nu,lambda,q] 
temp Txxqq[mu,nu,q1,q] 
temp Txqqq[mu,q2,q1,q] 

served Gxxbb[mu,nu,b1,b] 
served Vaabb[a3,a2,b1,b] 
temp Txpqq[mu,p2,q1,q] 
temp tba[b,a]     
temp tab[a,b]     

served Ctau[a,i,b,j]

# Declare temporary arrays
# ------------------------

temp T2jbai[j,b,a,i]
temp T3iaai[i,a,a1,i1]
temp T4iaai[i,a,a1,i1]
temp T3jbbj[j,b,b1,j1]
temp T4jbbj[j,b,b1,j1]
temp t1pppp[p,p1,p2,p3] 
temp t2pppp[p,p1,p2,p3] 
temp t3pppp[p,p1,p2,p3] 
temp t4pppp[p,p1,p2,p3] 
temp tSpppp[p,p1,p2,p3] 
temp tqqqq[q,q1,q2,q3] 
temp t1qqqq[q,q1,q2,q3] 
temp t2qqqq[q,q1,q2,q3] 
temp t3qqqq[q,q1,q2,q3] 
temp t4qqqq[q,q1,q2,q3] 
temp tSqqqq[q,q1,q2,q3] 
temp tppqq[p,p1,q,q1] 
temp tqpqp[q,p,q1,p1]
temp t0pqqp[p,q1,q,p2] 
temp t1ppqq[p,p1,q,q1] 
temp t2ppqq[p,p1,q,q1] 
temp t3ppqq[p,p1,q,q1] 
temp tqqpq[q,q1,p,q2] 
temp tqppq[q,p,p1,q1] 
temp tqqpp[q,q1,p,p1] 
temp t1qqpp[q,q1,p,p1] 
temp t2qqpp[q,q1,p,p1] 
temp t3qqpp[q,q1,p,p1] 

temp Tiaai[i,a,a1,i1] 
temp T1iaai[i,a,a1,i1] 
temp T2iaai[i,a,a1,i1] 
temp Tiiai[i,i1,a,i2] 
temp T1iiai[i,i1,a,i2] 
temp T2iiai[i,i1,a,i2] 
temp TSiiai[i,i1,a,i2] 
temp Tjbbj[j,b,b1,j1] 
temp T1jbbj[j,b,b1,j1] 
temp T2jbbj[j,b,b1,j1] 
temp Tjjbj[j,j1,b,j2] 
temp T1jjbj[j,j1,b,j2] 
temp T2jjbj[j,j1,b,j2] 
temp TSjjbj[j,j1,b,j2] 
temp Tiibb[i,i1,b,b1] 
temp Tijab[i,j,a,b]
temp T2iibb[i,i1,b,b1] 
temp T1iibb[i,i1,b,b1] 
temp Tjjaa[j,j1,a,a1] 
temp T2jjaa[j,j1,a,a1] 
temp T1jjaa[j,j1,a,a1] 
temp Tiabj[i,a,b,j] 
temp T2iabj[i,a,b,j] 
temp T1iabj[i,a,b,j] 
temp Tjbai[j,b,a,i] 
temp T1jbai[j,b,a,i] 
temp Tiibj[i,i1,b,j] 
temp T1iibj[i,i1,b,j] 
temp Tjjai[j,j1,a,i] 
temp T1jjai[j,j1,a,i] 
temp T1aiai[a1,i2,a2,i1]  
temp T2aiai[a1,i2,a2,i1]  
temp T1bjbj[b2,j,b,j2] 
temp T2bjbj[b2,j,b,j2] 
temp T1aibj[a1,i,b,j1]  
temp taabb[a,a1,b,b1]
temp taaaa[a,a1,a2,a3]
temp tbbbb[b,b1,b2,b3]

temp tpp[p,p1] 
temp t1pp[p,p1] 
temp t2pp[p,p1] 
temp t1ai[a,i] 
temp tqq[q,q1] 
temp t1qq[q,q1] 
temp t2qq[q,q1] 
temp t1bj[b,j] 

# Declare integral arrays
# ------------------------

# Define scalars
# --------------

scalar icopy
scalar e1
scalar e2
scalar e3
scalar etot 
scalar etot1
scalar etot2
scalar etot3
scalar etot4
scalar etot5
scalar etot6
scalar etot7
scalar etot8
scalar etot9
scalar etot10 
scalar etot11
scalar etot12

scalar scale
scalar normT
scalar normS
scalar norm1
scalar norm2
scalar norml
scalar normr
static Lnorm[ksub]
static Rnorm[ksub]
scalar overlap1
scalar overlap2
scalar overlapT
scalar overlapS
scalar overlapJK
static SBnorm[ksub]
static S1overlap[ksub,ksub1]
static S2aaoverlap[ksub,ksub1]
static S2aboverlap[ksub,ksub1]
distributed DLNia[i,a]
distributed DRNai[a,i]
distributed DLNiaia[i,a,i1,a1]
distributed D2LNiaia[i,a,i1,a1]
distributed DRNaiai[a,i,a1,i1]
distributed D2RNaiai[a,i,a1,i1]
distributed DLNiajb[i,a,j,b]
distributed DRNaibj[a,i,b,j]

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# Declare arrays

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#    served arrays used in EOM

served VCONV2AA[a,i,a1,i1]
served VCONV2AB[a,i,b,j]
served VCONV2BB[b,j,b1,j1]
#
served VCE2AA[a,i,a1,i1]
served VCE2AB[a,i,b,j]
#
served VCACT2AA[a,i,a1,i1]
served VCACT2AB[a,i,b,j]
served VCHACT2AA[a,i,a1,i1]
served VCHACT2AB[a,i,b,j]

distributed Faa[a,a1]
distributed Fab[a,b]

temp Tp[p]

temp Tkk[ksub,ksub1]
temp T1kk[ksub,ksub1]
temp T2kk[ksub,ksub1]

###### Davidson arrays
served Gmat[ksub,ksub1]
local  LGmat[ksub,ksub1]
static GSmat[ksub,ksub1]
served Gold[ksub,ksub1]
static GSold[ksub,ksub1]
static SAlphaL[ksub,ksub1]
static SAlphaR[ksub,ksub1]
static AL[ksub]
static AR[ksub]
static kkmat[ksub,ksub1]
# 3n subspace H.B
served HB2_aa[ksub,a,i,a1,i1]
served HB2_ab[ksub,a,i,b,j]
served HB1_a[ksub,a,i]
# 3n subspace vectors
served RB2_aa[ksub,a,i,a1,i1]
served RB2_ab[ksub,a,i,b,j]
served RB1_a[ksub,a,i]
#served LB2_aa[ksub,i,a,i1,a1]
#served LB2_ab[ksub,i,a,j,b]
#served LB1_a[ksub,i,a]
# partition (1) k vectors
served R1k2_aa[kstate,a,i,a1,i1]
served R1k2_ab[kstate,a,i,b,j]
served R1k1_a[kstate,a,i]
#served L1k2_aa[kstate,i,a,i1,a1]
#served L1k2_ab[kstate,i,a,j,b]
#served L1k1_a[kstate,i,a]
# partition (2) k-1 vectors
served R0k2_aa[kstate,a,i,a1,i1]
served R0k2_ab[kstate,a,i,b,j]
served R0k1_a[kstate,a,i]
#served L0k2_aa[kstate,i,a,i1,a1]
#served L0k2_ab[kstate,i,a,j,b]
#served L0k1_a[kstate,i,a]
# partition (3) correction vectors
served cRk2_aa[kstate,a,i,a1,i1]
served cRk2_ab[kstate,a,i,b,j]
served cRk1_a[kstate,a,i]
#served cLk2_aa[kstate,i,a,i1,a1]
#served cLk2_ab[kstate,i,a,j,b]
#served cLk1_a[kstate,i,a]
# 
local loc_RB2_aa[kstate,a,i,a1,i1]
local loc_R1k2_aa[kstate,a,i,a1,i1]
local loc_R0k2_aa[kstate,a,i,a1,i1]
local loc_cRk2_aa[kstate,a,i,a1,i1]
contiguous local CLRB2_aa[ksub,a,i,a1,i1]
contiguous local CLRB2_ab[ksub,a,i,b,j]
contiguous local CLRB1_a[ksub,a,i]
contiguous local CLLB2_aa[ksub,i,a,i1,a1]
contiguous local CLLB2_ab[ksub,i,a,j,b]
contiguous local CLLB1_a[ksub,i,a]
contiguous local CIS_EE_Energy[kstate]
int roots
int subspc
int kstart
int kend
int as
int at
int a1s
int a1t
int is
int it
int i1s
int i1t

temp Tkai[ksub,a,i]
temp T1kai[ksub,a,i]
temp T2kai[ksub,a,i]
temp T3kai[ksub,a,i]
temp T4kai[ksub,a,i]

temp Tkia[ksub,i,a]
temp T1kia[ksub,i,a]
temp T2kia[ksub,i,a]
temp T3kia[ksub,i,a]

temp Tkaiai[ksub,a,i,a1,i1]
temp T1kaiai[ksub,a,i,a1,i1]
temp T2kaiai[ksub,a,i,a1,i1]
temp T3kaiai[ksub,a,i,a1,i1]
temp T4kaiai[ksub,a,i,a1,i1]

temp Tkaibj[ksub,a,i,b,j]
temp T1kaibj[ksub,a,i,b,j]
temp T2kaibj[ksub,a,i,b,j]
temp T3kaibj[ksub,a,i,b,j]
temp T4kaibj[ksub,a,i,b,j]

temp Tkiaia[ksub,i,a,i1,a1]
temp T1kiaia[ksub,i,a,i1,a1]
temp T2kiaia[ksub,i,a,i1,a1]
temp T3kiaia[ksub,i,a,i1,a1]

temp Tkiajb[ksub,i,a,j,b]
temp T1kiajb[ksub,i,a,j,b]
temp T2kiajb[ksub,i,a,j,b]
temp T3kiajb[ksub,i,a,j,b]


# VFL arrays 
# ---------- 

served VFLAB[a1,b,i,j]  
served VFLAA[a2,a1,i,i2] 
served VFLBB[b2,b1,j,j2] 
temp T1qppq[q1,p1,p,q]    
temp tpqpq[p,q,p1,q1]  
temp T1pqpq[p,q,p1,q1]  
served Njjai[j1,a,i,j]
served Niibj[i1,b,i,j]
served Niiai[i1,a,i,i2]
distributed Niijj[i,i1,j,j1]
distributed Niiii[i,i1,i2,i3]

# Arrays needed for AOLADDER contribution
# ---------------------------------------

local LLaa[a,i,nu,i1] 
local LLbb[b,j,nu,j1] 
local LLab[a,i,nu,j] 
temp Txixj[lambda,i,sigma,j]
temp Txjxj[lambda,j,sigma,j1]
temp Txixi[lambda,i,sigma,i1]
temp Txiai[lambda,i,a1,i1]
temp Txjbj[lambda,j,b1,j1]
temp Txibj[lambda,i,b,j]

temp Zaa[lambda,i,a1,i1]
temp Zbb[lambda,j,b,j1]
temp Zab[lambda,i,b,j]
temp ZZaa[lambda,i,sigma,i1]
temp ZZ1aa[lambda,i,sigma,i1]
temp ZZbb[lambda,j,sigma,j1]
temp ZZ1bb[lambda,j,sigma,j1]
temp ZZab[lambda,i,sigma,j]

temp Yaa[lambda,i,mu,i1]
temp Ybb[lambda,j,mu,j1]
temp Yab[lambda,i,mu,j]
temp Y1aa[lambda,i,mu,i1]
temp Y1bb[lambda,j,mu,j1]
temp Y1ab[lambda,i,mu,j]

temp Taixi[a,i,nu,i1]
temp Tbjxj[b,j,nu,j1]
temp Taixj[a,i,nu,j]

served TAO_aa[lambda,i,sigma,i1]
served TAO_bb[lambda,j,sigma,j1]
served TAO_ab[lambda,i,sigma,j]
served T1AO_aa[lambda,i,a,i1]
served T1AO_bb[lambda,j,b,j1]
served T1AO_ab[lambda,i,b,j]
served T2AO_aa[lambda,i,sigma,i1]
served T2AO_bb[lambda,j,sigma,j1]
served T2AO_ab[lambda,i,sigma,j]

temp  T3iaia[i,a,i1,a1]
temp  T3aiai[a,i,a1,i1]
temp  T4aiai[a,i,a1,i1]
temp  T3bjbj[b,j,b1,j1]
temp  T4bjbj[b,j,b1,j1]
temp  TSaiai[a,i,a1,i1]
temp  TSiaai[i,a,a1,i1]
temp  TS2iaai[i,a,a1,i1]
temp  TSbjbj[b,j,b1,j1]
temp  Taaii[a,a2,i,i2]
temp  Tabij[a,b,i,j]
temp  T1aaii[a,a2,i,i2]
temp  Tbbjj[b,b1,j,j1]
temp  T2bbjj[b,b1,j,j1]
temp  T2aibj[a,i,b,j]
temp  T3aibj[a,i,b,j]
temp  T4aibj[a,i,b,j]
temp  T1ii[i,i1]
temp  T1jj[j,j1]
temp  Tdaa[a,a1]
temp  Tiijj[i,i1,j,j1]
temp  T1iijj[i,i1,j,j1]
temp  Tiiii[i,i1,i2,i3]
temp  T1iiii[i,i1,i2,i3]
temp  Tjjjj[j,j1,j2,j3]
temp  T1jjjj[j,j1,j2,j3]
temp  Taajj[a,a1,j,j1]
temp  T1aajj[a,a1,j,j1]
temp  Tbbii[b,b1,i,i1]
temp  T1bbii[b,b1,i,i1]
temp  R1aiai[a1,i1,a,i]
temp  R2aiai[a1,i,a,i1]
temp  R3aiai[a,i1,a1,i]
temp  R4aiai[a,i1,a1,i]
temp  R1bjbj[b1,j1,b,j]
temp  R2bjbj[b1,j,b,j1]
temp  R3bjbj[b,j1,b1,j]
temp  R4bjbj[b,j1,b1,j]
temp  t11ai[a,i]
temp  t1aa[a,a1]
temp  t11aa[a,a1]
temp  t1bb[b,b1]
temp  t11bb[b,b1]
temp  t111bb[b,b1]
temp  t2ia[i,a]
temp  t2jb[j,b]
temp  t1ia[i,a]
temp  t2ai[a,i]
temp  t3ai[a,i]
temp  t1jb[j,b]
temp  t2bj[b,j]
temp  t3bj[b,j]
temp  t11bj[b,j]
temp  Taaai[a,a2,a1,i]

local L1xixi[mu,i,nu,i1]
local L1xjxj[mu,j,nu,j1]
local L1xixj[mu,i,nu,j]
local Lxibj[lambda,i,b,j]
local Lxjbj[lambda,j,b1,j1]
local LLaiai[a,i,a1,i1]
local LLbjbj[b,j,b1,j1]
local LLaibj[a,i,b,j]
local Lxiai[lambda,i,a1,i1]

local Ljbbj[j2,b2,b1,j1]
local Liaai3[i1,a1,a,i]
local Liiai[i2,i,a,i1]
local L2iiai[i,i2,a,i1]
local L1aibj[a,i,b1,j]
local Ljjai[a,i,j,j1]
local Lbjjj[b1,j2,j,j1]
local Ljjbj[j2,j,b,j1]
local L2jjbj[j,j2,b,j1]
local Laijj[a,i,j1,j]
local Liibj[i1,i,b,j]
local L2iibj[i1,i,b,j]
local L1iibj[i,i1,b,j]
local Laiii[a1,i2,i,i1]
local L2bjbj[b,j,b2,j1]
local L3bjbj[b,j,b2,j2]
#======================================================
local Rai[a,i]
local Rbj[b,j]
local Raiai[a,i,a1,i1]
local Rbjbj[b,j,b1,j1]
local Raibj[a,i,b,j]

distributed DDaa[a,a1]
distributed DDii[i,i1]
distributed DDia[i,a]
distributed DDjj[j,j1]
#served DDjj[j,j1]
served DDjb[j,b]
distributed VCONV1A[a,i]
distributed VCONV1B[b,j]
static SHDiag[a,i]
distributed Fae_a[a,a1]
distributed Fmi_a[i1,i]
distributed Fmi_b[j1,j]
#served Fia_a(i,a)
#served Fia_b(j,b)
served Wmnijab[i,i1,j,j1]
served Wmnijaa[i,i1,i2,i3]
served Wmnijbb[j,j1,j2,j3]

local LFmi_a[i1,i]
local LFmi_b[j1,j]
local LFae_a[a,a1]

#     served arrays used in EOM

served VCE1A[a,i]

distributed VCACT1A[a,i]

distributed VCHACT1A[a,i]

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# Declare scalars

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
scalar maxcycle
scalar imaxc
scalar ncount
scalar aeigtemp
scalar aeigtemp2
scalar rootmax
scalar evfev
scalar eomthresh
scalar sqr
scalar sqr2
scalar egvmax
scalar lcount
scalar icount
scalar xcount
scalar imax
scalar emax
scalar energaa
scalar energbb
scalar energab
scalar esuma
scalar esumb
scalar esumab
scalar ecorraa
scalar ecorrbb
scalar ecorrab
scalar ecorrT
scalar eccsd
scalar eold
scalar etemp0
scalar eetemp
scalar ediff
scalar xcor
scalar xcor0
scalar xcor1
scalar xcor2
scalar xcor3
scalar count_iter

#     eom scalars

scalar ispdim
scalar omega_old
scalar omega_new
scalar residuum
scalar square
scalar squarert
scalar mult
scalar exponent

scalar nsp
scalar proot
scalar xroot

scalar Aeig1
scalar Aeig2
scalar Aeig3
scalar Aeig4
scalar Aeig5
scalar Aeig6
scalar Aeig7
scalar Aeig8
scalar Aeig9

scalar Aeigv1
scalar Aeigv2
scalar Aeigv3
scalar Aeigv4
scalar Aeigv5
scalar Aeigv6
scalar Aeigv7
scalar Aeigv8
scalar Aeigv9

scalar Aeigvm1
scalar Aeigvm2
scalar Aeigvm3
scalar Aeigvm4
scalar Aeigvm5
scalar Aeigvm6
scalar Aeigvm7
scalar Aeigvm8
scalar Aeigvm9

scalar xmax

scalar xtemp
scalar xtemp1

# 
# Declare served arrays 
# ---------------------

served Vxxxi[mu,nu,lambda,i]
served Vxixi[mu,i1,lambda,i]
served Vxxii[mu,nu,i1,i]
served Vixxi[i1,nu,lambda,i]
served Vxipi[mu,i,p,i1]
served Vixai[i,mu,a,i1]
served Vxaii[mu,a,i,i1]
served Vxaai[mu,a1,a,i]
served Vxxai[mu,nu,a,i]

served Vxxxj[mu,nu,lambda,j]
served Vxjxj[mu,j1,lambda,j]
served Vxxjj[mu,nu,j1,j]
served Vjxxj[j1,nu,lambda,j]
served Vxjqj[mu,j,q,j1]
served Vjxbj[j,mu,b,j1]
served Vxbjj[mu,b,j,j1]
served Vxbbj[mu,b1,b,j]
served Vxxbj[mu,nu,b,j] 

served Vxbii[mu,b,i,i1]
served Vxbai[mu,b,a,i]

served Vxixj[mu,i,nu,j]
served Vxiqj[mu,i,q,j]
served Vxajj[mu,a,j,j1]
served Vxabj[mu,a,b,j]
served Vxxij[mu,nu,i,j]
served Vixxj[i,mu,nu,j]
served Vixbj[i,mu,b,j]

# Declare temporary arrays 
# ------------------------ 

temp T1xjxj[mu,j1,lambda,j]
temp Txxjj[mu,nu,j1,j]
temp T1xxjj[mu,nu,j1,j]
temp Tjjxx[j1,nu,lambda,j]
temp Tjxxj[j1,nu,lambda,j]
temp T1jxxj[j1,nu,lambda,j]
temp Txjqj[mu,j,q,j1]
temp T1xjqj[mu,j,q,j1]
temp Tqjqj[q1,j,q,j1]
temp T1qjqj[q1,j,q,j1]
temp Tjxbj[j,mu,b,j1]
temp T1jxbj[j,mu,b,j1]
temp Txbjj[mu,b,j,j1]
temp T1xbjj[mu,b,j,j1]
temp T1bbjj[b,b1,j,j1]
temp Txbbj[mu,b1,b,j]
temp T1xbbj[mu,b1,b,j]
temp Tbbbj[b2,b,b1,j]
temp T1bbbj[b2,b,b1,j]
temp Txxbj[mu,nu,b,j]

temp T1xixj[mu,i,nu,j]
temp Txiqj[mu,i,q,j]
temp T1xiqj[mu,i,q,j]
temp Tpiqj[p,i,q,j]
temp T1piqj[p,i,q,j]
temp Tiixx[i,i1,mu,nu]
temp Tiixb[i,i1,mu,b]
temp Txajj[mu,a,j,j1]
temp T1xajj[mu,a,j,j1]
temp Txabj[mu,a,b,j]
temp T1xabj[mu,a,b,j]
temp Tixxj[i,mu,nu,j]
temp Tixbj[i,mu,b,j]
temp T1ixbj[i,mu,b,j]
temp Taabj[a,a1,b,j]
temp T1aabj[a,a1,b,j]

temp Txbii[mu,b,i,i1]
temp T1xbii[mu,b,i,i1]
temp Tjbii[j,b,i,i1]
temp T1jbii[j,b,i,i1]
temp Txbai[mu,b,a,i]
temp T1xbai[mu,b,a,i]
temp Tbbai[b,b1,a,i]
temp T1bbai[b,b1,a,i]

temp T1aaai[a,a1,a2,i] 
temp Txxai[mu,nu,a,i] 
temp Txaai[mu,a,a1,i] 
temp T1xaai[mu,a,a1,i] 
temp Txaii[mu,a,i,i1] 
temp T1xaii[mu,a,i,i1] 
temp T1xxai[mu,nu,a,i] 
temp Tixai[i,mu,a,i1] 
temp T1ixai[i,mu,a,i1] 
temp Txipi[mu,i,p1,i1] 
temp T1xipi[mu,i,p1,i1] 
temp T1pipi[p,i,p1,i1] 
temp T2pipi[p,i,p1,i1] 
temp T3pipi[p,i,p1,i1] 

temp T1xxbj[mu,nu,b,j] 

temp Txxij[mu,nu,i,j] 
temp T1xxij[mu,nu,i,j] 
temp T1ixxj[i,mu,nu,j] 
local Txxxi[mu,nu,lambda,i]
temp T1xxxi[mu,nu,lambda,i]
local Txxxj[mu,nu,lambda,j]
temp T1xxxj[mu,nu,lambda,j]
temp T1xixi[mu,i,nu,i1]
temp Txxii[mu,nu,i1,i] 
temp T1xxii[mu,nu,i1,i] 
temp Tixxi[i1,mu,nu,i] 
temp T1ixxi[i1,mu,nu,i] 

# Declare integral arrays 
# ------------------------  

local TAOINT[mu,nu,lambda,sigma] 
local L1xxxi[mu,nu,lambda,i] 
local L2xxxi[mu,lambda,nu,i] 
local L3xxxi[lambda,mu,nu,i] 
local L1xxxj[mu,nu,lambda,j] 
local L2xxxj[mu,lambda,nu,j] 
local L3xxxj[lambda,mu,nu,j] 
local Lxixi[mu,i,nu,i1] 
local Lxxii[mu,nu,i,i1] 
local Lixxi[i,mu,nu,i1] 
local Lxjxj[mu,j,nu,j1] 
local Lxxjj[mu,nu,j,j1] 
local Ljxxj[j,mu,nu,j1] 
local Lxixj[mu,i,nu,j] 
local Lixxj[i,mu,nu,j] 
local Lxipi[mu,i,p,i1] 
local Lxaii[mu,a,i,i1] 
local Lixai[i,mu,a,i1] 
local L1xaai[mu,a,a1,i]  
local L2xaai[mu,a,a2,i]  
local Lxjqj[mu,j,q,j1]  
local Lxbjj[mu,b,j,j1] 
local Ljxbj[j,mu,b,j1] 
local Lxbii[mu,b,i,i1] 
local Lxiqj[mu,i,q,j] 
local Lxajj[mu,a,j,j1] 
local Lixbj[i,mu,b,j] 
local L1xbbj[mu,b,b1,j] 
#***********************************************************
#***********************************************************

PROC READ_AMP
#     -------------
print "reading persistent arrays"
#     -------------
restore_persistent ca    "ca"
restore_persistent Fock_a "fock_a"
restore_persistent R1k1_a   "C1_a"
restore_persistent RB1_a    "B1_a"
restore_persistent t1a "t1a_old"
restore_persistent T2aa "T2old_aa"
restore_persistent T2ab "T2old_ab" 
restore_persistent VSpipi "VSpipi"
restore_persistent Vaaii "Vaaii"
restore_persistent Viaai "Viaai"
restore_persistent Vaaai "Vaaai"
restore_persistent VSaaai "VSaaai"
restore_persistent VSqjqj "VSqjqj"
restore_persistent Vbbjj "Vbbjj"
restore_persistent Vjbbj "Vjbbj"
restore_persistent Vbbii "Vbbii"
restore_persistent Vjbii "Vjbii"
restore_persistent Vbbai "Vbbai"
restore_persistent Vpiqj "Vpiqj"
restore_persistent Vaajj "Vaajj"
restore_persistent Viabj "Viabj"
restore_persistent Vaabj "Vaabj"
server_barrier
ecorrab = 0.0
esumab  = 0.0
sip_barrier
PARDO a, b, i, j

   request Vpiqj[a,i,b,j]
   request Vpiqj[a,j,b,i]

   request T2ab[a,i,b,j]
   GET     t1a[a,i]
   GET     t1a[b,j]
   tai[a,i] = t1a[a,i]

   Taibj[a,i,b,j]  = tai[a,i]^t1a[b,j]
   Taibj[a,i,b,j] += T2ab[a,i,b,j]

   T1aibj[a,i,b,j] = Vpiqj[a,i,b,j]
   T2aibj[a,i,b,j] = Vpiqj[a,j,b,i]
   T1aibj[a,i,b,j]*= 2.0
   T1aibj[a,i,b,j]-= T2aibj[a,i,b,j]

   etemp = Taibj[a,i,b,j]*T1aibj[a,i,b,j]
   esumab += etemp

ENDPARDO a, b, i, j

sip_barrier

collective ecorrab += esumab
eccsd = ecorrab
print eccsd
server_barrier
execute get_my_rank rank
myrank = (int)rank
if myrank == root
    do a
    do i
        get t1a[a,i]
        St1a[a,i] = t1a[a,i]
        St1b[a,i] = t1a[a,i]
    enddo i
    enddo a
endif
broadcast_from root St1a
broadcast_from root St1b

# for RHF T2bb=T2aa

pardo a,i,b,j
    request T2aa[a,i,b,j]
    T1aibj[a,i,b,j] = t2aa[a,i,b,j]
    prepare T2bb[a,i,b,j] = T1aibj[a,i,b,j]
endpardo a,i,b,j
server_barrier

ENDPROC READ_AMP

#    ------------------------------------------------------------------------
#    HBAR section
#    ------------------------------------------------------------------------

PROC HBAR_AB

#     alpha-alpha spin component first. 
#     --------------------------------- 

PARDO a, a1 

    tpp[a,a1] = fock_a[a,a1]       

    DO i 
	t1pp[a,a1] = St1a[a,i]*fock_a[i,a1] 
	tpp[a,a1] -= t1pp[a,a1] 
    ENDDO i 

    LHBAR_aa[a,a1] += tpp[a,a1] 

ENDPARDO a, a1 

PARDO a, a1, a2, i  

    request VSaaai[a1,a,a2,i]   
    t1pp[a,a1]         = VSaaai[a1,a,a2,i]*St1a[a2,i] 

    LHBAR_aa[a,a1]                 += t1pp[a,a1] 

    DO i1  
	t3iaai[i1,a2,a,i]         = VSaaai[a1,a,a2,i]*St1a[a1,i1]
	prepare NIAAI[i1,a2,a,i] += t3iaai[i1,a2,a,i]
    ENDDO i1  

ENDPARDO a, a1, a2, i  

PARDO a, a1, b, j  

    request Vaabj[a1,a,b,j]   
    t1pp[a,a1]         = Vaabj[a1,a,b,j]*St1b[b,j] 
    tppqq[a,a1,j,b]    = Vaabj[a1,a,b,j]

    LHBAR_aa[a,a1]                += t1pp[a,a1] 
    prepare HBAR_AIBC_aabb[a,a1,j,b] += tppqq[a,a1,j,b] 

ENDPARDO a, a1, b, j  

PARDO a, i1, a2, i  
    request T2aa[a,i,a2,i1]  
    tai[a2,i1]        = St1a[a2,i1] 
    t1ai[a2,i]        = St1a[a2,i] 

    tpppp[a,i,a2,i1]  = T2aa[a,i,a2,i1] 
    t1pppp[a,i,a2,i1] = St1a[a,i]^tai[a2,i1] 
    t2pppp[a,i,a2,i1] = St1a[a,i1]^t1ai[a2,i] 
    tpppp[a,i,a2,i1] += t1pppp[a,i,a2,i1] 
    tpppp[a,i,a2,i1] -= t2pppp[a,i,a2,i1] 

    DO a1 
	request VSpipi[a2,i1,a1,i]    
	t1pp[a,a1]         = tpppp[a,i,a2,i1]*VSpipi[a2,i1,a1,i] 
	t1pp[a,a1]        *= -0.5  
	LHBAR_aa[a,a1] += t1pp[a,a1] 
    ENDDO a1 

ENDPARDO a, i1, a2, i  

PARDO a, i, b, j  

    request T2ab[a,i,b,j]  
    tppqq[a,i,b,j]  = T2ab[a,i,b,j] 
    t1ppqq[a,i,b,j] = St1a[a,i]^St1b[b,j] 
    tppqq[a,i,b,j] += t1ppqq[a,i,b,j] 

    DO a1  

	request Vpiqj[a1,i,b,j]    
	t1pp[a,a1]         = tppqq[a,i,b,j]*Vpiqj[a1,i,b,j] 
	t1pp[a,a1]        *= -1.0  
	LHBAR_aa[a,a1] += t1pp[a,a1] 

    ENDDO a1  

ENDPARDO a, i, b, j  

#     alpha-alpha spin component done. 
#     -------------------------------- 

#     beta-beta spin component next. 
#     ------------------------------ 

#     beta-beta spin component done. 
#     ------------------------------ 

server_barrier 
DO a 
DO a1 
PUT HBAR_aa[a,a1] += LHBAR_aa[a,a1] 
ENDDO a1 
ENDDO a 
server_barrier 
DO a 
DO a1 
GET HBAR_aa[a,a1] 
LHBAR_aa[a,a1] = HBAR_aa[a,a1] 
ENDDO a1 
ENDDO a 
server_barrier 

ENDPROC HBAR_AB

PROC HBAR_IJ
#     ------------

#     alpha-alpha spin component first. 
#     --------------------------------- 

PARDO i, i1 

    tpp[i1,i] = fock_a[i1,i] 

    DO a 
	t1pp[i1,i] = fock_a[i1,a]*St1a[a,i] 
	tpp[i1,i] += t1pp[i1,i] 
    ENDDO a 

    DO a 
    DO i2 
	request VSpipi[a,i2,i,i1]  
	t1pp[i1,i] = VSpipi[a,i2,i,i1]*St1a[a,i2]  
	tpp[i1,i] += t1pp[i1,i] 
    ENDDO i2 
    ENDDO a 

    DO b 
    DO j 
	request Vpiqj[i,i1,b,j]  
	t1pp[i1,i] = Vpiqj[i,i1,b,j]*St1b[b,j]  
	tpp[i1,i] += t1pp[i1,i] 
    ENDDO j 
    ENDDO b 

    DO a 
    DO a1 
    DO i2 
	request T2aa[a,i,a1,i2]  
	request VSpipi[a,i1,a1,i2]   

	tpp[a1,i2]        = St1a[a1,i2]
	t1pp[a1,i]        = St1a[a1,i] 

	tpppp[a,i,a1,i2]  = T2aa[a,i,a1,i2]
	t1pppp[a,i,a1,i2] = St1a[a,i]^tpp[a1,i2] 
	t2pppp[a,i,a1,i2] = St1a[a,i2]^t1pp[a1,i] 
	tpppp[a,i,a1,i2] += t1pppp[a,i,a1,i2] 
	tpppp[a,i,a1,i2] -= t2pppp[a,i,a1,i2] 

	t1pp[i1,i]        = tpppp[a,i,a1,i2]*VSpipi[a,i1,a1,i2] 
	t1pp[i1,i]       *= 0.5 
	tpp[i1,i]        += t1pp[i1,i] 
    ENDDO i2 
    ENDDO a1 
    ENDDO a 

    DO a 
    DO b 
    DO j 
	request T2ab[a,i,b,j]  
	request Vpiqj[a,i1,b,j]   

	tppqq[a,i,b,j]  = T2ab[a,i,b,j]
	t1ppqq[a,i,b,j] = St1a[a,i]^St1b[b,j] 
	tppqq[a,i,b,j] += t1ppqq[a,i,b,j] 

	t1pp[i1,i]      = tppqq[a,i,b,j]*Vpiqj[a,i1,b,j] 
	tpp[i1,i]      += t1pp[i1,i] 
    ENDDO j 
    ENDDO b 
    ENDDO a 

    LHBAR_ii[i1,i] = tpp[i1,i] 

ENDPARDO i, i1 

#     done alpha-alpha spin component. 
#     -------------------------------- 

#     beta-beta spin component next. 
#     ------------------------------ 

PARDO j, j1 

    tqq[j1,j] = fock_a[j1,j] 

    DO b 
	t1qq[j1,j] = fock_a[j1,b]*St1b[b,j] 
	tqq[j1,j] += t1qq[j1,j] 
    ENDDO b 

    DO b 
    DO j2 
	request VSqjqj[b,j2,j,j1]  
	t1qq[j1,j] = VSqjqj[b,j2,j,j1]*St1b[b,j2]  
	tqq[j1,j] += t1qq[j1,j] 
    ENDDO j2 
    ENDDO b 

    DO a 
    DO i 
	request Vpiqj[a,i,j,j1]  
	t1qq[j1,j] = Vpiqj[a,i,j,j1]*St1a[a,i]  
	tqq[j1,j] += t1qq[j1,j] 
    ENDDO i 
    ENDDO a 

    DO b 
    DO b1 
    DO j2 
	request T2bb[b,j,b1,j2]  
	request VSqjqj[b,j1,b1,j2]   

	tqq[b1,j2]        = St1b[b1,j2]
	t1qq[b1,j]        = St1b[b1,j] 

	tqqqq[b,j,b1,j2]  = T2bb[b,j,b1,j2]
	t1qqqq[b,j,b1,j2] = St1b[b,j]^tqq[b1,j2] 
	t2qqqq[b,j,b1,j2] = St1b[b,j2]^t1qq[b1,j] 
	tqqqq[b,j,b1,j2] += t1qqqq[b,j,b1,j2] 
	tqqqq[b,j,b1,j2] -= t2qqqq[b,j,b1,j2] 

	t1qq[j1,j]        = tqqqq[b,j,b1,j2]*VSqjqj[b,j1,b1,j2] 
	t1qq[j1,j]       *= 0.5 
	tqq[j1,j]        += t1qq[j1,j] 
    ENDDO j2 
    ENDDO b1 
    ENDDO b 

    DO a 
    DO b 
    DO i 
	request T2ab[a,i,b,j]  
	request Vpiqj[a,i,b,j1]   

	tppqq[a,i,b,j]  = T2ab[a,i,b,j]
	t1ppqq[a,i,b,j] = St1a[a,i]^St1b[b,j] 
	tppqq[a,i,b,j] += t1ppqq[a,i,b,j] 

	t1qq[j1,j]      = tppqq[a,i,b,j]*Vpiqj[a,i,b,j1] 
	tqq[j1,j]      += t1qq[j1,j] 
    ENDDO i 
    ENDDO b 
    ENDDO a 

    LHBAR_jj[j1,j] = tqq[j1,j] 

ENDPARDO j, j1 

server_barrier 
DO i 
DO i1 
PUT HBAR_ii[i,i1] += LHBAR_ii[i,i1] 
ENDDO i1 
ENDDO i 
DO j 
DO j1 
PUT HBAR_jj[j,j1] += LHBAR_jj[j,j1] 
ENDDO j1 
ENDDO j 
server_barrier 
DO i 
DO i1 
GET              HBAR_ii[i,i1] 
LHBAR_ii[i,i1] = HBAR_ii[i,i1]  
ENDDO i1 
ENDDO i 
DO j 
DO j1 
GET              HBAR_jj[j,j1] 
LHBAR_jj[j,j1] = HBAR_jj[j,j1]  
ENDDO j1 
ENDDO j 
server_barrier 

#     done beta-beta spin component. 
#     ------------------------------ 

ENDPROC HBAR_IJ

PROC HBAR_IB
#     ------------

#     alpha-alpha spin component first. 
#     --------------------------------- 

PARDO i, a 

    tpp[i,a] = fock_a[i,a] 

    DO a1 
    DO i1 
	request VSpipi[a,i,a1,i1]  
	t1pp[i,a] = VSpipi[a,i,a1,i1]*St1a[a1,i1] 
	tpp[i,a] += t1pp[i,a] 
    ENDDO i1 
    ENDDO a1 

    DO b 
    DO j 
	request Vpiqj[a,i,b,j]  
	t1pp[i,a] = Vpiqj[a,i,b,j]*St1b[b,j] 
	tpp[i,a] += t1pp[i,a] 
    ENDDO j 
    ENDDO b 

    LHBAR_ia[i,a] = tpp[i,a] 

ENDPARDO i, a 

#     done alpha-alpha spin component. 
#     -------------------------------- 

#     beta-beta spin component next. 
#     ------------------------------ 

PARDO j, b 

    tqq[j,b] = fock_a[j,b] 

    DO b1 
    DO j1 
	request VSqjqj[b,j,b1,j1]  
	t1qq[j,b] = VSqjqj[b,j,b1,j1]*St1b[b1,j1] 
	tqq[j,b] += t1qq[j,b] 
    ENDDO j1 
    ENDDO b1 

    DO a 
    DO i 
	request Vpiqj[a,i,b,j]  
	t1qq[j,b] = Vpiqj[a,i,b,j]*St1a[a,i] 
	tqq[j,b] += t1qq[j,b] 
    ENDDO i 
    ENDDO a 

    LHBAR_jb[j,b] = tqq[j,b] 

ENDPARDO j, b 

#     done alpha-alpha spin component. 
#     -------------------------------- 

server_barrier 
DO a 
DO i 
PUT HBAR_ia[i,a] += LHBAR_ia[i,a] 
ENDDO i 
ENDDO a 
DO b 
DO j 
PUT HBAR_jb[j,b] += LHBAR_jb[j,b] 
ENDDO j 
ENDDO b 
server_barrier 
DO a 
DO i 
GET HBAR_ia[i,a] 
LHBAR_ia[i,a] = HBAR_ia[i,a]  
ENDDO i 
ENDDO a 
DO b 
DO j 
GET HBAR_jb[j,b] 
LHBAR_jb[j,b] = HBAR_jb[j,b]  
ENDDO j 
ENDDO b 
server_barrier 

ENDPROC HBAR_IB

PROC HBAR_IJKL  
#     --------------

#     (alpha,alpha,alpha,alpha) spin component. 
#     ----------------------------------------- 

PARDO i, i2, i1, i3 

    request VSpipi[i,i1,i2,i3]  
    tpppp[i,i1,i2,i3] = VSpipi[i,i1,i2,i3] 

    DO a
	request VSpipi[i1,i,a,i2]   
	t1pppp[i,i1,i2,i3] = VSpipi[i1,i,a,i2]*St1a[a,i3] 
	tpppp[i,i1,i2,i3] += t1pppp[i,i1,i2,i3] 
    ENDDO a

    DO a
	request VSpipi[i3,i,a,i2]   
	t1pppp[i,i1,i2,i3] = VSpipi[i3,i,a,i2]*St1a[a,i1] 
	tpppp[i,i1,i2,i3] -= t1pppp[i,i1,i2,i3] 
    ENDDO a

    DO a 
    DO a1 
	request VSpipi[a,i,a1,i2]  
	request T2aa[a,i1,a1,i3]  

	tpp[a1,i3]         = St1a[a1,i3] 
	t1pp[a1,i1]        = St1a[a1,i1] 

	t1pppp[a,i1,a1,i3]  = T2aa[a,i1,a1,i3] 
	t2pppp[a,i1,a1,i3] = St1a[a,i1]^tpp[a1,i3]  
	t3pppp[a,i1,a1,i3] = St1a[a,i3]^t1pp[a1,i1]  
	t1pppp[a,i1,a1,i3] += t2pppp[a,i1,a1,i3] 
	t1pppp[a,i1,a1,i3] -= t3pppp[a,i1,a1,i3] 

	t4pppp[i,i1,i2,i3] = VSpipi[a,i,a1,i2]*t1pppp[a,i1,a1,i3] 
	t4pppp[i,i1,i2,i3] *= 0.5 
	tpppp[i,i1,i2,i3]  += t4pppp[i,i1,i2,i3] 
    ENDDO a1 
    ENDDO a 

    prepare HBAR_iiii[i,i1,i2,i3] = tpppp[i,i1,i2,i3] 

ENDPARDO i, i2, i1, i3 

#     done (alpha,alpha,alpha,alpha) spin component. 
#     ---------------------------------------------- 

#     (beta,beta,beta,beta) spin component. 
#     ------------------------------------- 

#     done (beta,beta,beta,beta) spin component. 
#     ------------------------------------------ 

#     (alpha,alpha,beta,beta) spin component. 
#     --------------------------------------- 

PARDO i, i1, j2, j3 

    request Vpiqj[i,i1,j2,j3]  
    tppqq[i,i1,j2,j3] = Vpiqj[i,i1,j2,j3] 

    DO b
	request Vpiqj[i1,i,b,j2]   
	t1ppqq[i,i1,j2,j3] = Vpiqj[i1,i,b,j2]*St1b[b,j3] 
	tppqq[i,i1,j2,j3] += t1ppqq[i,i1,j2,j3] 
    ENDDO b

    DO a
	request Vpiqj[a,i,j2,j3]   
	t1ppqq[i,i1,j2,j3] = Vpiqj[a,i,j2,j3]*St1a[a,i1] 
	tppqq[i,i1,j2,j3] += t1ppqq[i,i1,j2,j3] 
    ENDDO a

    DO a 
    DO b 
	request Vpiqj[a,i,b,j2]  
	request T2ab[a,i1,b,j3]  

	t1ppqq[a,i1,b,j3]  = T2ab[a,i1,b,j3] 
	t2ppqq[a,i1,b,j3]  = St1a[a,i1]^St1b[b,j3]  
	t1ppqq[a,i1,b,j3] += t2ppqq[a,i1,b,j3] 

	t3ppqq[i,i1,j2,j3] = Vpiqj[a,i,b,j2]*t1ppqq[a,i1,b,j3] 
	tppqq[i,i1,j2,j3] += t3ppqq[i,i1,j2,j3] 
    ENDDO b 
    ENDDO a 

    prepare HBAR_iijj[i,i1,j2,j3] = tppqq[i,i1,j2,j3] 

ENDPARDO i, i1, j2, j3 

#     done (alpha,alpha,beta,beta) spin component. 
#     -------------------------------------------- 

ENDPROC HBAR_IJKL 

PROC HBAR_AIBC   
#     --------------

#     There are four spin cases to compute:
#     1. H^{ai}_{bc) --> HBAR_AIBC_aaaa  
#     2. H^{AI}_{BC) --> HBAR_AIBC_bbbb  
#     3. H^{Ai}_{Bc) --> HBAR_AIBC_bbaa  
#     4. H^{aI}_{bC) --> HBAR_AIBC_aabb  

#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   

#    ------------------------------------------------------------------------

#     AAAA spin combination. 
#     ---------------------- 

#     BBBB spin combination. 
#     ---------------------- 

#     AABB spin combination. 
#     ---------------------- 

PARDO i1, a1, b2, j 

    request Vpiqj[a1,i1,b2,j]  

    DO a 
	t1ppqq[a,a1,j,b2]                  = Vpiqj[a1,i1,b2,j]*St1a[a,i1] 
	t1ppqq[a,a1,j,b2]                 *= -1.0  
	prepare HBAR_AIBC_aabb[a,a1,j,b2] += t1ppqq[a,a1,j,b2] 
    ENDDO a 

ENDPARDO i1, a1, b2, j 

#     BBAA spin combination. 
#     ---------------------- 

ENDPROC HBAR_AIBC   

PROC HBAR_JKIA   
#     --------------

#     There are four spin cases to compute:
#     1. H^{jk}_{ia) --> HBAR_JKIA_aaaa  
#     2. H^{JK}_{IA) --> HBAR_JKIA_bbbb  
#     3. H^{Jk}_{Ia) --> HBAR_JKIA_bbaa  
#     4. H^{jK}_{iA) --> HBAR_JKIA_aabb  

#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   

#    ------------------------------------------------------------------------

#     AAAA spin combination. 
#     ---------------------- 

PARDO i, i1, i2, a 

    request VSpipi[i,i1,a,i2]   
    tpppp[i,i1,a,i2] = VSpipi[i,i1,a,i2] 

    DO a1 
	request VSpipi[a1,i1,a,i2]   
	t1pppp[i,i1,a,i2] = VSpipi[a1,i1,a,i2]*St1a[a1,i] 
	tpppp[i,i1,a,i2] += t1pppp[i,i1,a,i2] 
    ENDDO a1 

    t1pppp[i1,i,i2,a]                 = tpppp[i,i1,a,i2] 
    prepare HBAR_JKIA_aaaa[i1,i,i2,a] = t1pppp[i1,i,i2,a] 

ENDPARDO i, i1, i2, a 

#     BBBB spin combination. 
#     ---------------------- 

#     AABB spin combination. 
#     ---------------------- 

PARDO i, i1, j2, b 

    request Vpiqj[i,i1,b,j2]   
    tppqq[i,i1,b,j2] = Vpiqj[i,i1,b,j2] 

    DO a1 
	request Vpiqj[a1,i1,b,j2]   
	t1ppqq[i,i1,b,j2] = Vpiqj[a1,i1,b,j2]*St1a[a1,i] 
	tppqq[i,i1,b,j2] += t1ppqq[i,i1,b,j2] 
    ENDDO a1 

    t1ppqq[i1,i,j2,b]                 = tppqq[i,i1,b,j2] 
    prepare HBAR_JKIA_aabb[i1,i,j2,b] = t1ppqq[i1,i,j2,b] 

ENDPARDO i, i1, j2, b 

#     BBAA spin combination. 
#     ---------------------- 

ENDPROC HBAR_JKIA   

PROC HBAR_IAJK   
#     --------------

#     There are four spin cases to compute:
#     1. H^{ia)_{jk} --> HBAR_IAJK_aaaa  
#     1. H^{IA)_{JK} --> HBAR_IAJK_bbbb  
#     1. H^{Ia)_{Jk} --> HBAR_IAJK_bbaa  
#     1. H^{iA)_{jK} --> HBAR_IAJK_aabb  

#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   

#    ------------------------------------------------------------------------

#     Form the two-particle intermediates needed. 
#     ------------------------------------------- 

PARDO i1, a1, a, i

    request Viaai[i1,a1,a,i]  # +
    request Vaaii[a,a1,i1,i]  # -
    Tiaai[i1,a1,a,i]  = Vaaii[a,a1,i1,i]
    Tiaai[i1,a1,a,i] -= Viaai[i1,a1,a,i]
    Tiaai[i1,a1,a,i] *= -1.0

    DO i2
    DO a2
	request T2aa[a,i2,a2,i] 
	request VSpipi[a1,i1,a2,i2]  # +

	T1iaai[i1,a1,a,i]   = VSpipi[a1,i1,a2,i2]*T2aa[a,i2,a2,i]
	Tiaai[i1,a1,a,i]   -= T1iaai[i1,a1,a,i]
    ENDDO a2
    ENDDO i2

    DO j
    DO b
	request T2ab[a,i,b,j] 
	request Vpiqj[a1,i1,b,j]   # +

	T1iaai[i1,a1,a,i] = Vpiqj[a1,i1,b,j]*T2ab[a,i,b,j]
	Tiaai[i1,a1,a,i] += T1iaai[i1,a1,a,i]
    ENDDO b
    ENDDO j

    prepare WHIAAI[i1,a1,a,i] = Tiaai[i1,a1,a,i]

ENDPARDO i1, a1, a, i

PARDO j1, b1, b, j

    request Vjbbj[j1,b1,b,j]  # +
    request Vbbjj[b,b1,j1,j]  # -
    Tjbbj[j1,b1,b,j]  = Vbbjj[b,b1,j1,j]
    Tjbbj[j1,b1,b,j] -= Vjbbj[j1,b1,b,j]
    Tjbbj[j1,b1,b,j] *= -1.0

    DO j2
    DO b2
	request T2bb[b,j2,b2,j] 
	request VSqjqj[b1,j1,b2,j2]  # +

	T1jbbj[j1,b1,b,j] = VSqjqj[b1,j1,b2,j2]*T2bb[b,j2,b2,j]
	Tjbbj[j1,b1,b,j] -= T1jbbj[j1,b1,b,j]
    ENDDO b2
    ENDDO j2

    DO i
    DO a
	request T2ab[a,i,b,j] 
	request Vpiqj[a,i,b1,j1]   # +

	T1jbbj[j1,b1,b,j] = Vpiqj[a,i,b1,j1]*T2ab[a,i,b,j]
	Tjbbj[j1,b1,b,j] += T1jbbj[j1,b1,b,j]
    ENDDO a
    ENDDO i

    prepare WHJBBJ[j1,b1,b,j] = Tjbbj[j1,b1,b,j]

ENDPARDO j1, b1, b, j 

PARDO i, i1, b, b1

    request Vbbii[b,b1,i,i1] 
    Tiibb[i,i1,b,b1]  = Vbbii[b,b1,i,i1]
    Tiibb[i,i1,b,b1] *= -1.0

    DO a
    DO j
	request T2ab[a,i1,b,j] 
	request Vpiqj[a,i,b1,j]    

	T1iibb[i,i1,b,b1] = T2ab[a,i1,b,j]*Vpiqj[a,i,b1,j]
	Tiibb[i,i1,b,b1] += T1iibb[i,i1,b,b1]
    ENDDO j
    ENDDO a

    prepare WHIIBB[i,i1,b,b1] = Tiibb[i,i1,b,b1]

ENDPARDO i, i1, b, b1 

PARDO j1, j, a, a1

    request Vaajj[a,a1,j1,j] 
    Tjjaa[j1,j,a,a1]  = Vaajj[a,a1,j1,j]
    Tjjaa[j1,j,a,a1] *= -1.0

    DO b
    DO i
	request T2ab[a,i,b,j] 
	request Vpiqj[a1,i,b,j1]  

	T1jjaa[j1,j,a,a1] = T2ab[a,i,b,j]*Vpiqj[a1,i,b,j1]
	Tjjaa[j1,j,a,a1] += T1jjaa[j1,j,a,a1]
    ENDDO i
    ENDDO b

    prepare WHJJAA[j1,j,a,a1] = Tjjaa[j1,j,a,a1]

ENDPARDO j1, j, a, a1 

PARDO i, a, b, j

    request Viabj[i,a,b,j] 
    Tiabj[i,a,b,j] = Viabj[i,a,b,j]

    DO a1
    DO i1
	request T2ab[a1,i1,b,j] 
	request VSpipi[a,i,a1,i1]    # +

	T1iabj[i,a,b,j]   = VSpipi[a,i,a1,i1]*T2ab[a1,i1,b,j]
	Tiabj[i,a,b,j]   += T1iabj[i,a,b,j]
    ENDDO i1
    ENDDO a1

    DO b1
    DO j1
	request T2bb[b1,j1,b,j] 
	request Vpiqj[a,i,b1,j1]     # +

	T1iabj[i,a,b,j] = Vpiqj[a,i,b1,j1]*T2bb[b1,j1,b,j]
	Tiabj[i,a,b,j] += T1iabj[i,a,b,j]
    ENDDO j1
    ENDDO b1

    prepare WHIABJ[i,a,b,j] = Tiabj[i,a,b,j]

ENDPARDO i, a, b, j 

PARDO j, b, a, i

    request Viabj[i,a,b,j] 
    Tjbai[j,b,a,i] = Viabj[i,a,b,j]

    DO b1
    DO j1
	request T2ab[a,i,b1,j1] 
	request VSqjqj[b,j,b1,j1]    # +

	T1jbai[j,b,a,i] = VSqjqj[b,j,b1,j1]*T2ab[a,i,b1,j1]
	Tjbai[j,b,a,i] += T1jbai[j,b,a,i]
    ENDDO j1
    ENDDO b1

    DO a1
    DO i1
	request T2aa[a1,i1,a,i] 
	request Vpiqj[a1,i1,b,j]     # +

	T1jbai[j,b,a,i] = Vpiqj[a1,i1,b,j]*T2aa[a1,i1,a,i]
	Tjbai[j,b,a,i] += T1jbai[j,b,a,i]
    ENDDO i1
    ENDDO a1

    prepare WHJBAI[j,b,a,i] = Tjbai[j,b,a,i]

ENDPARDO j, b, a, i 

server_barrier 

#     AAAA spin combination. 
#     ---------------------- 

PARDO a, i, i1, i2

    request VSpipi[i,i1,a,i2] 
    Tiiai[i,i1,a,i2]  = VSpipi[i,i1,a,i2]

    DO i3
	request HBAR_iiii[i,i1,i3,i2] 
	T1iiai[i,i1,a,i2] = HBAR_iiii[i,i1,i3,i2]*St1a[a,i3]
	Tiiai[i,i1,a,i2] -= T1iiai[i,i1,a,i2]
    ENDDO i3

    prepare HBAR_IAJK_aaaa[i,i1,a,i2] += Tiiai[i,i1,a,i2]

ENDPARDO a, i, i1, i2

PARDO i, i1, a, i2

    Tiiai[i,i1,a,i2]  = 0.0  
    TSiiai[i,i2,a,i1] = 0.0

    DO a1

	request T2aa[a,i1,a1,i2] 
	request WHIAAI[i,a1,a,i2] 

	T1iiai[i,i1,a,i2]  = T2aa[a,i1,a1,i2]*LHBAR_ia[i,a1]
	Tiiai[i,i1,a,i2]  -= T1iiai[i,i1,a,i2]

	T1iiai[i,i1,a,i2]  = WHIAAI[i,a1,a,i2]*St1a[a1,i1]
	T2iiai[i,i2,a,i1]  = T1iiai[i,i1,a,i2]

	Tiiai[i,i1,a,i2]  += T1iiai[i,i1,a,i2]
	TSiiai[i,i2,a,i1] -= T2iiai[i,i2,a,i1]

    ENDDO a1

    prepare HBAR_IAJK_aaaa[i,i1,a,i2] += Tiiai[i,i1,a,i2]
    prepare HBAR_IAJK_aaaa[i,i2,a,i1] += TSiiai[i,i2,a,i1]

ENDPARDO i, i1, a, i2

PARDO i, a, a1, a2

    request VSaaai[a2,a,a1,i]  # +

    DO i1
    t1pp[a2,i1] = St1a[a2,i1] 
	DO i2

	    request T2aa[a1,i1,a2,i2] 
	    tpp[a2,i2]          = St1a[a2,i2] 

	    tpppp[a1,i1,a2,i2]  = T2aa[a1,i1,a2,i2] 
	    t1pppp[a1,i1,a2,i2] = St1a[a1,i1]^tpp[a2,i2] 
	    t2pppp[a1,i1,a2,i2] = St1a[a1,i2]^t1pp[a2,i1] 
	    tpppp[a1,i1,a2,i2] += t1pppp[a1,i1,a2,i2] 
	    tpppp[a1,i1,a2,i2] -= t2pppp[a1,i1,a2,i2] 

	    T1iiai[i,i1,a,i2]   = tpppp[a1,i1,a2,i2]*VSaaai[a2,a,a1,i]
	    T1iiai[i,i1,a,i2]  *= 0.5
	    prepare HBAR_IAJK_aaaa[i,i1,a,i2] += T1iiai[i,i1,a,i2]

	ENDDO i2
    ENDDO i1

ENDPARDO i, a, a1, a2

PARDO i, i1, a, i2

    Tiiai[i,i1,a,i2]  = 0.0  
    TSiiai[i,i2,a,i1] = 0.0

    DO a1
    DO i3

	request T2aa[a,i2,a1,i3] 
	request VSpipi[i1,i,a1,i3]    # +

	T1iiai[i,i1,a,i2]   = VSpipi[i1,i,a1,i3]*T2aa[a,i2,a1,i3]
	T2iiai[i,i2,a,i1]   = T1iiai[i,i1,a,i2]
	Tiiai[i,i1,a,i2]   += T1iiai[i,i1,a,i2]
	TSiiai[i,i2,a,i1]  -= T2iiai[i,i2,a,i1]

    ENDDO i3
    ENDDO a1

    prepare HBAR_IAJK_aaaa[i,i1,a,i2] += Tiiai[i,i1,a,i2]
    prepare HBAR_IAJK_aaaa[i,i2,a,i1] += TSiiai[i,i2,a,i1]

ENDPARDO i, i1, a, i2

PARDO i, i1, a, i2

    Tiiai[i,i1,a,i2]  = 0.0  
    TSiiai[i,i2,a,i1] = 0.0

    DO b
    DO j

	request T2ab[a,i2,b,j] 
	request Vpiqj[i1,i,b,j]     # +

	T1iiai[i,i1,a,i2]  = Vpiqj[i1,i,b,j]*T2ab[a,i2,b,j]
	Tiiai[i,i1,a,i2]  += T1iiai[i,i1,a,i2]

	T2iiai[i,i2,a,i1]  = T1iiai[i,i1,a,i2]
	TSiiai[i,i2,a,i1] -= T2iiai[i,i2,a,i1]

    ENDDO j
    ENDDO b

    prepare HBAR_IAJK_aaaa[i,i1,a,i2] += Tiiai[i,i1,a,i2]
    prepare HBAR_IAJK_aaaa[i,i2,a,i1] += TSiiai[i,i2,a,i1]

ENDPARDO i, i1, a, i2

#     AABB spin combination. 
#     ---------------------- 

PARDO i, i1, b, j

    request Vpiqj[i,i1,b,j] 
    Tiibj[i,i1,b,j] = Vpiqj[i,i1,b,j]

    DO a

	request T2ab[a,i1,b,j] 
	request WHIABJ[i,a,b,j] 

	T1iibj[i,i1,b,j] = T2ab[a,i1,b,j]*LHBAR_ia[i,a]
	Tiibj[i,i1,b,j] += T1iibj[i,i1,b,j]

	T1iibj[i,i1,b,j] = WHIABJ[i,a,b,j]*St1a[a,i1]
	Tiibj[i,i1,b,j] += T1iibj[i,i1,b,j]

	DO b1

	    request T2ab[a,i1,b1,j] 
	    request Vbbai[b1,b,a,i]   

	    tppqq[a,i1,b1,j]  = T2ab[a,i1,b1,j] 
	    t1ppqq[a,i1,b1,j] = St1a[a,i1]^St1b[b1,j] 
	    tppqq[a,i1,b1,j] += t1ppqq[a,i1,b1,j] 

	    T1iibj[i,i1,b,j]  = Vbbai[b1,b,a,i]*tppqq[a,i1,b1,j]
	    Tiibj[i,i1,b,j]  += T1iibj[i,i1,b,j]

	ENDDO b1

	DO i2

	    request T2ab[a,i2,b,j] 
	    request VSpipi[i1,i,a,i2]   # +

	    T1iibj[i,i1,b,j] = VSpipi[i1,i,a,i2]*T2ab[a,i2,b,j]
	    Tiibj[i,i1,b,j] += T1iibj[i,i1,b,j]

	ENDDO i2

	DO j1

	    request T2ab[a,i1,b,j1] 
	    request Vpiqj[a,i,j,j1]      # +

	    T1iibj[i,i1,b,j] = Vpiqj[a,i,j,j1]*T2ab[a,i1,b,j1]
	    Tiibj[i,i1,b,j] -= T1iibj[i,i1,b,j]

	ENDDO j1

    ENDDO a

    DO j1

	request HBAR_iijj[i,i1,j1,j] 

	T1iibj[i,i1,b,j] = HBAR_iijj[i,i1,j1,j]*St1b[b,j1]
	Tiibj[i,i1,b,j] -= T1iibj[i,i1,b,j]

    ENDDO j1

    DO b1

	request WHIIBB[i,i1,b,b1] 
	T1iibj[i,i1,b,j] = WHIIBB[i,i1,b,b1]*St1b[b1,j]
	Tiibj[i,i1,b,j] -= T1iibj[i,i1,b,j]

	DO j2

	    request T2bb[b1,j2,b,j] 
	    request Vpiqj[i1,i,b1,j2]    # +

	    T1iibj[i,i1,b,j] = Vpiqj[i1,i,b1,j2]*T2bb[b1,j2,b,j]
	    Tiibj[i,i1,b,j] += T1iibj[i,i1,b,j]

	ENDDO j2

    ENDDO b1

    prepare HBAR_IAJK_aabb[i,i1,b,j] = Tiibj[i,i1,b,j]

ENDPARDO i, i1, b, j

#     BBAA spin combination. 
#     ---------------------- 

#     BBBB spin combination. 
#     ---------------------- 

server_barrier 

ENDPROC HBAR_IAJK   

PROC HBAR_AJIB     
#     --------------

#     There are four spin cases to compute:
#     1. H^{aj)_{ib} --> HBAR_AJIB_aaaa  
#     2. H^{AJ)_{IB} --> HBAR_AJIB_bbbb  
#     3. H^{aJ)_{iB} --> HBAR_AJIB_aabb  
#     4. H^{Aj)_{Ib} --> HBAR_AJIB_bbaa  
#     5. H^{Aj)_{iB} --> HBAR_AJIB_iibb   
#     6. H^{aJ)_{Ib} --> HBAR_AJIB_jjaa   

#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   

#    ------------------------------------------------------------------------

#     AAAA spin combination. 
#     ---------------------- 

PARDO i1, a1, a, i

    request Viaai[i1,a1,a,i]  
    request Vaaii[a,a1,i1,i]  
    Tiaai[i1,a1,a,i]                   = Vaaii[a,a1,i1,i]
    Tiaai[i1,a1,a,i]                  -= Viaai[i1,a1,a,i]
    Tiaai[i1,a1,a,i]                  *= -1.0
    prepare HBAR_AJIB_aaaa[i1,a1,a,i] += Tiaai[i1,a1,a,i]

ENDPARDO i1, a1, a, i

PARDO i, i1, a1, i2  

    request VSpipi[a1,i1,i,i2] 

    DO a
	T1iaai[i1,a1,a,i]                  = VSpipi[a1,i1,i,i2]*St1a[a,i2]
	T1iaai[i1,a1,a,i]                 *= -1.0  
	prepare HBAR_AJIB_aaaa[i1,a1,a,i] += T1iaai[i1,a1,a,i]
    ENDDO a

ENDPARDO i, i1, a1, i2

PARDO i1, a1, a, a2  

    request VSaaai[a2,a,a1,i1] 

    DO i 
	T2iaai[i,a,a1,i1]                  = VSaaai[a2,a,a1,i1]*St1a[a2,i]
	T1iaai[i1,a1,a,i]                  = T2iaai[i,a,a1,i1]
	prepare HBAR_AJIB_aaaa[i1,a1,a,i] += T1iaai[i1,a1,a,i]
    ENDDO i

ENDPARDO i1, a1, a, a2  

PARDO i, a, a2, i2  

    request T2aa[a2,i,a,i2]  
    tai[a,i2]           = St1a[a,i2]
    T1aiai[a2,i,a,i2]   = St1a[a2,i]^tai[a,i2]
    T1aiai[a2,i,a,i2]  += T2aa[a2,i,a,i2]

    DO a1 
    DO i1

	request VSpipi[a2,i2,a1,i1]  
	Taiai[a1,i2,a2,i1]                 = VSpipi[a2,i2,a1,i1]
	T1iaai[i1,a1,a,i]                  = T1aiai[a2,i,a,i2]*Taiai[a1,i2,a2,i1]
	T1iaai[i1,a1,a,i]                 *= -1.0  
	prepare HBAR_AJIB_aaaa[i1,a1,a,i] += T1iaai[i1,a1,a,i]

    ENDDO i1
    ENDDO a1

ENDPARDO i, a, a2, i2

PARDO i1, a1, b, j

    request Vpiqj[a1,i1,b,j]  

    DO a
    DO i

	request T2ab[a,i,b,j]  
	T1iaai[i1,a1,a,i]                  = Vpiqj[a1,i1,b,j]*T2ab[a,i,b,j]
	prepare HBAR_AJIB_aaaa[i1,a1,a,i] += T1iaai[i1,a1,a,i]

    ENDDO i
    ENDDO a

ENDPARDO i1, a1, b, j

#     BBBB spin combination. 
#     ---------------------- 

#     AABB spin combination. 
#     ---------------------- 

PARDO i, a, b, j

    request Viabj[i,a,b,j] 
    Tiabj[i,a,b,j]                  = Viabj[i,a,b,j]
    prepare HBAR_AJIB_aabb[i,a,b,j]+= Tiabj[i,a,b,j]

ENDPARDO i, a, b, j 

PARDO i, a, b, b1  

    request Vbbai[b1,b,a,i]  

    DO j

	Tjbai[j,b,a,i]                   = Vbbai[b1,b,a,i]*St1b[b1,j]
	T2jbai[j,b,a,i]                  = Tjbai[j,b,a,i]
	Tiabj[i,a,b,j]                   = Tjbai[j,b,a,i]  
	prepare NJBAI[j,b,a,i]          += T2jbai[j,b,a,i]
	prepare HBAR_AJIB_aabb[i,a,b,j] += Tiabj[i,a,b,j]

    ENDDO j

ENDPARDO i, a, b, b1  

PARDO b, i, a, j

    Tiabj[i,a,b,j]  = 0.0  

    DO j1

	request Vpiqj[a,i,j,j1]  
	T1iabj[i,a,b,j] = Vpiqj[a,i,j,j1]*St1b[b,j1]
	Tiabj[i,a,b,j] -= T1iabj[i,a,b,j]

    ENDDO j1

    prepare HBAR_AJIB_aabb[i,a,b,j] += Tiabj[i,a,b,j]

ENDPARDO b, i, a, j 

PARDO j, b, b1, j1

    request T2bb[b1,j,b,j1]  

    tbj[b,j1]          = St1b[b,j1]
    T2bjbj[b1,j,b,j1]  = St1b[b1,j]^tbj[b,j1]
    T2bjbj[b1,j,b,j1] += T2bb[b1,j,b,j1]

    DO i
    DO a

	request Vpiqj[a,i,b1,j1]  
	Tiabj[i,a,b,j]                   = T2bjbj[b1,j,b,j1]*Vpiqj[a,i,b1,j1]
	Tiabj[i,a,b,j]                  *= -1.0  
	prepare HBAR_AJIB_aabb[i,a,b,j] += Tiabj[i,a,b,j]

    ENDDO a
    ENDDO i

ENDPARDO j, b, b1, j1 

PARDO i1, a1, b, j

    request T2ab[a1,i1,b,j]  

    DO a
    DO i

	request VSpipi[a1,i1,a,i]  
	Tiabj[i,a,b,j]                   = T2ab[a1,i1,b,j]*VSpipi[a1,i1,a,i]
	prepare HBAR_AJIB_aabb[i,a,b,j] += Tiabj[i,a,b,j]

    ENDDO i
    ENDDO a

ENDPARDO i1, a1, b, j 

#     BBAA spin combination. 
#     ---------------------- 

#     ABAB spin combination. 
#     ---------------------- 

PARDO i1, b1, b, i

    request Vbbii[b,b1,i1,i]  
    Tiibb[i1,i,b,b1]                   = Vbbii[b,b1,i1,i]
    Tiibb[i1,i,b,b1]                  *= -1.0
    prepare HBAR_AJIB_iibb[i1,i,b,b1] += Tiibb[i1,i,b,b1]

ENDPARDO i1, b1, b, i

PARDO b1, b, a1, i1  

    request Vbbai[b1,b,a1,i1]  

    DO i
	T1iibb[i1,i,b,b1]                  = Vbbai[b1,b,a1,i1]*St1a[a1,i]
	T2iibb[i1,i,b,b1]                  = T1iibb[i1,i,b,b1]  
	T2iibb[i1,i,b,b1]                 *= -1.0 
	prepare NIIBB[i1,i,b,b1]          += T1iibb[i1,i,b,b1]
	prepare HBAR_AJIB_iibb[i1,i,b,b1] += T2iibb[i1,i,b,b1]
    ENDDO i

ENDPARDO b1, b, a1, i1  

PARDO i1, b1, b, i

    Tiibb[i1,i,b,b1] = 0.0 

    DO j1
	request Vpiqj[i,i1,b1,j1]  
	T1iibb[i1,i,b,b1] = Vpiqj[i,i1,b1,j1]*St1b[b,j1]
	Tiibb[i1,i,b,b1] += T1iibb[i1,i,b,b1] 
    ENDDO j1

    prepare HBAR_AJIB_iibb[i1,i,b,b1] += Tiibb[i1,i,b,b1]

ENDPARDO i1, b1, b, i

PARDO i, b, j1, a1  

    request T2ab[a1,i,b,j1]  
    Taibj[a1,i,b,j1]   = St1a[a1,i]^St1b[b,j1]
    T1aibj[a1,i,b,j1]  = T2ab[a1,i,b,j1]
    T1aibj[a1,i,b,j1] += Taibj[a1,i,b,j1]

    DO i1
    DO b1

	request Vpiqj[a1,i1,b1,j1]  
	T1iibb[i1,i,b,b1]                  = T1aibj[a1,i,b,j1]*Vpiqj[a1,i1,b1,j1]
	prepare HBAR_AJIB_iibb[i1,i,b,b1] += T1iibb[i1,i,b,b1]

    ENDDO b1
    ENDDO i1

ENDPARDO i, b, j1, a1  

#     BABA spin combination. 
#     ---------------------- 

PARDO j1, a1, a, b1  

    request Vaabj[a1,a,b1,j1]  

    DO j
	T2jjaa[j1,j,a,a1]                  = Vaabj[a1,a,b1,j1]*St1b[b1,j]
	prepare NJJAA[j1,j,a,a1]          += T2jjaa[j1,j,a,a1]
    ENDDO j

ENDPARDO j1, a1, a, b1  

ENDPROC HBAR_AJIB     
#     -----------------

#    ------------------------------------------------------------------------

#    ------------------------------------------------------------------------

PROC HBAR_ABCI    
#     --------------

#     There are four spin cases to compute:
#     1. H^{ab)_{ci} --> HBAR_ABCI_aaaa  
#     2. H^{AB)_{CI} --> HBAR_ABCI_bbbb  
#     3. H^{aB)_{cI} --> HBAR_ABCI_aabb  
#     4. H^{Ab)_{Ci} --> HBAR_ABCI_bbaa  

#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   

#    ------------------------------------------------------------------------

#     AAAA spin component. 
#     -------------------- 

#     BBBB spin component. 
#     -------------------- 

#     AABB spin component. 
#     -------------------- 

PARDO a, a1, b, j 

    request Vaabj[a,a1,b,j]   
    prepare HBAR_ABCI_aabb[a,a1,b,j] += Vaabj[a,a1,b,j] 

ENDPARDO a, a1, b, j 

PARDO a, a1, a3, i2

    request VSaaai[a,a1,a3,i2]  

    DO b
    DO j

	request T2ab[a3,i2,b,j] 
	Tppqq[a1,a,b,j]                   = VSaaai[a,a1,a3,i2]*T2ab[a3,i2,b,j]
	prepare HBAR_ABCI_aabb[a1,a,b,j] += Tppqq[a1,a,b,j]

    ENDDO j
    ENDDO b

ENDPARDO a, a1, a3, i2

PARDO a, a1, b, j

    request Vaabj[a,a1,b,j] 

    DO b1
    DO j1

	request T2bb[b1,j1,b,j] 
	Tppqq[a1,a,b1,j1]                   = Vaabj[a,a1,b,j]*T2bb[b1,j1,b,j]
	prepare HBAR_ABCI_aabb[a1,a,b1,j1] += Tppqq[a1,a,b1,j1]

    ENDDO j1
    ENDDO b1

ENDPARDO a, a1, b, j

PARDO a1, a, j, b

    Tppqq[a1,a,b,j] = 0.0

    DO i

	request T2ab[a1,i,b,j] 
	request WHIABJ[i,a,b,j] 
	request NJBAI[j,b,a,i] 

	T1ppqq[a1,a,b,j] = T2ab[a1,i,b,j]*LHBAR_ia[i,a]
	Tppqq[a1,a,b,j] -= T1ppqq[a1,a,b,j]

	T2ppqq[a1,a,b,j] = WHIABJ[i,a,b,j]*St1a[a1,i]
	Tppqq[a1,a,b,j] -= T2ppqq[a1,a,b,j]

	T3ppqq[a1,a,b,j] = NJBAI[j,b,a,i]*St1a[a1,i]
	Tppqq[a1,a,b,j] -= T3ppqq[a1,a,b,j]

    ENDDO i

    prepare HBAR_ABCI_aabb[a1,a,b,j] += Tppqq[a1,a,b,j]

ENDPARDO a1, a, j, b

PARDO a, a1, j, j1

    request WHJJAA[j1,j,a1,a] 
    request NJJAA[j1,j,a1,a] 
    tqqpp[j1,j,a1,a]  = WHJJAA[j1,j,a1,a] 
    tqqpp[j1,j,a1,a] -= NJJAA[j1,j,a1,a] 

    DO b
	Tppqq[a1,a,b,j]                   = tqqpp[j1,j,a1,a]*St1b[b,j1]
	prepare HBAR_ABCI_aabb[a1,a,b,j] += Tppqq[a1,a,b,j]
    ENDDO b

ENDPARDO a, a1, j, j1

PARDO a1, b, j1, i 

    request T2ab[a1,i,b,j1] 
    t1ppqq[a1,i,b,j1]  = St1a[a1,i]^St1b[b,j1]  
    t1ppqq[a1,i,b,j1] += T2ab[a1,i,b,j1]  
    t0pqqp[a1,b,j1,i] = t1ppqq[a1,i,b,j1]

    DO a
    DO j
#   
	request HBAR_JKIA_aabb[j1,j,i,a] 
#####          Tppqq(a1,a,b,j)                   = t1ppqq(a1,i,b,j1)*Vpiqj(a,i,j,j1)
####           Tppqq(a1,a,b,j)                   = t1ppqq(a1,i,b,j1)*HBAR_JKIA_aabb(j1,j,i,a)
	tqpqp[j1,i,j,a]   = HBAR_JKIA_aabb[j1,j,i,a]
	Tppqq[a1,a,b,j] = t0pqqp[a1,b,j1,i]*tqpqp[j1,i,j,a] 
	prepare HBAR_ABCI_aabb[a1,a,b,j] += Tppqq[a1,a,b,j]

    ENDDO j 
    ENDDO a 

ENDPARDO a1, b, j1, i 

PARDO a, b1, b, i

    request Vbbai[b,b1,a,i]   

    DO j
    DO a1
	request T2ab[a1,i,b,j] 
	Tppqq[a1,a,b1,j]                   = T2ab[a1,i,b,j]*Vbbai[b,b1,a,i]
	Tppqq[a1,a,b1,j]                  *= -1.0
	prepare HBAR_ABCI_aabb[a1,a,b1,j] += Tppqq[a1,a,b1,j]
    ENDDO a1
    ENDDO j

ENDPARDO a, b1, b, i

# debug
# debug

#     Done AABB spin component. 
#     ------------------------- 

#     BBAA spin component. 
#     -------------------- 

#     Done AABB spin component. 
#     ------------------------- 

server_barrier

ENDPROC HBAR_ABCI    

PROC AO4VIR

server_barrier

PARDO j,sigma

    t1xj[sigma,j]=0.0

    do b
	txj[sigma,j]=St1b[b,j]*ca[sigma,b]
	t1xj[sigma,j]+=txj[sigma,j]
    enddo b
# 
    put Mxj[sigma,j]=t1xj[sigma,j]

ENDPARDO j, sigma

PARDO i, sigma

    t1xi[sigma,i]=0.0

    do a
	txi[sigma,i]=St1a[a,i]*ca[sigma,a]
	t1xi[sigma,i]+=txi[sigma,i]
    enddo a

    put Mxi[sigma,i]=t1xi[sigma,i]

ENDPARDO i, sigma

server_barrier

#    Contract AOINT with half back transformed Amplitudes
#    ----------------------------------------------------

PARDO mu,lambda,nu

    allocate Lxxxj[mu,lambda,nu,*]
    allocate Lxxxi[mu,lambda,nu,*]

    DO sigma

	execute compute_integral_batch aoint[mu,lambda,nu,sigma]

	DO j

	    get Mxj[sigma,j]

	    tmxxxj[mu,lambda,nu,j]=aoint[mu,lambda,nu,sigma]*Mxj[sigma,j]
	    Lxxxj[mu,lambda,nu,j]+=tmxxxj[mu,lambda,nu,j]

	ENDDO j
###
	DO i

	    get Mxi[sigma,i]

	    tmxxxi[mu,lambda,nu,i]=aoint[mu,lambda,nu,sigma]*Mxi[sigma,i]
	    Lxxxi[mu,lambda,nu,i]+=tmxxxi[mu,lambda,nu,i]

	ENDDO i
###
    enddo sigma

    DO j
	prepare Mxxxj[mu,lambda,nu,j]=Lxxxj[mu,lambda,nu,j]
    ENDDO j
    DO i
	prepare Mxxxi[mu,lambda,nu,i]=Lxxxi[mu,lambda,nu,i]
    ENDDO i

    deallocate Lxxxi[mu,lambda,nu,*]
    deallocate Lxxxj[mu,lambda,nu,*]

ENDPARDO mu,lambda,nu

server_barrier

#  2ND STAGE OF TRANSFORMATION
#  --------------------------- 

PARDO mu, nu, j 

    allocate Lxxbj[mu,nu,*,j]

    DO lambda  

	request Mxxxj[mu,nu,lambda,j] 

	DO b

	    tmxxbj[mu,nu,b,j]=Mxxxj[mu,nu,lambda,j]*ca[lambda,b]
	    lxxbj[mu,nu,b,j]+=tmxxbj[mu,nu,b,j]

	ENDDO b
    ENDDO lambda  

    DO b
	prepare Mxxbj[mu,nu,b,j]=lxxbj[mu,nu,b,j]
    ENDDO b

    deallocate Lxxbj[mu,nu,*,j]

ENDPARDO mu, nu, j 

PARDO mu, nu, i 

    allocate Lxxai[mu,nu,*,i]

    DO lambda  

	request Mxxxi[mu,nu,lambda,i] 

	DO a

	    tmxxai[mu,nu,a,i]=Mxxxi[mu,nu,lambda,i]*ca[lambda,a]
	    lxxai[mu,nu,a,i]+=tmxxai[mu,nu,a,i]

	ENDDO a
    ENDDO lambda  

    DO a
	prepare Mxxai[mu,nu,a,i]=lxxai[mu,nu,a,i]
    ENDDO a

    deallocate Lxxai[mu,nu,*,i]

ENDPARDO mu, nu, i 

server_barrier

#  END 2ND STAGE OF TRANSFORMATION
#  ------------------------------- 

pardo mu, b, j

    allocate Lxabj[mu,*,b,j]

    do lambda

	request Mxxbj[mu,lambda,b,j] 

	do a

	    tmxabj[mu,a,b,j]=Mxxbj[mu,lambda,b,j]*ca[lambda,a]
	    lxabj[mu,a,b,j]+=tmxabj[mu,a,b,j]

	enddo a

    enddo lambda

    do a
	prepare Mxabj[mu,a,b,j]=lxabj[mu,a,b,j]
    enddo a

    deallocate Lxabj[mu,*,b,j]

endpardo mu, b, j

pardo mu, a, i

    allocate Lxbai[mu,*,a,i]

    do lambda

	request Mxxai[mu,lambda,a,i] 

	do b

	    tmxbai[mu,b,a,i]=Mxxai[mu,lambda,a,i]*ca[lambda,b]
	    lxbai[mu,b,a,i]+=tmxbai[mu,b,a,i]

	enddo b

    enddo lambda

    do b
	prepare Mxbai[mu,b,a,i]=lxbai[mu,b,a,i]
    enddo b

    deallocate Lxbai[mu,*,a,i]

endpardo mu, a, i

pardo mu, a, i

    allocate Lxaai[mu,*,a,i]

    do lambda

	request Mxxai[mu,lambda,a,i] 

	do a1

	tmxaai[mu,a1,a,i]=Mxxai[mu,lambda,a,i]*ca[lambda,a1]
	lxaai[mu,a1,a,i]+=tmxaai[mu,a1,a,i]

	enddo a1

    enddo lambda

    do a1
	prepare Mxaai[mu,a1,a,i]=lxaai[mu,a1,a,i]
    enddo a1

    deallocate Lxaai[mu,*,a,i]

endpardo mu, a, i

pardo mu, b, j

    allocate Lxbbj[mu,*,b,j]

    do lambda

	request Mxxbj[mu,lambda,b,j] 

	do b1

	tmxbbj[mu,b1,b,j]=Mxxbj[mu,lambda,b,j]*ca[lambda,b1]
	lxbbj[mu,b1,b,j]+=tmxbbj[mu,b1,b,j]

	enddo b1

    enddo lambda

    do b1
	prepare Mxbbj[mu,b1,b,j]=lxbbj[mu,b1,b,j]
    enddo b1

    deallocate Lxbbj[mu,*,b,j]

endpardo mu, b, j

server_barrier

#  END 3RD STAGE OF TRANSFORMATION
#  ------------------------------- 

pardo a, b, j

    allocate Laabj[*,a,b,j]

    do mu

	request Mxabj[mu,a,b,j] 

	do a1

	    tmaabj[a1,a,b,j]=Mxabj[mu,a,b,j]*ca[mu,a1]
	    Laabj[a1,a,b,j]+=tmaabj[a1,a,b,j]

	enddo a1

    enddo mu

    do a1
	prepare HBAR_ABCI_aabb[a1,a,b,j]+=Laabj[a1,a,b,j]
    enddo a1

    deallocate Laabj[*,a,b,j]

endpardo a, b, j

#    ALPHA-ALPHA spin combination

ENDPROC AO4VIR

# HBAR caller

PROC form_H
#    --------- 
# LHBAR_ii JNB verified A3
# LHBAR_ia JNB verified A3
# LHBAR_jb JNB verified A3
# LHBAR_aa JNB verified A3
# HBAR_iiii JNB verified A3
# HBAR_iijj JNB verified A3
# HBAR_JKIA_aaaa JNB verified A3
# HBAR_JKIA_aabb JNB verified A3
# HBAR_IAJK_aaaa JNB verified A3
# HBAR_IAJK_aabb JNB verified A3
# HBAR_AJIB_aaaa JNB verified A3
# HBAR_AJIB_aabb JNB verified A3
# HBAR_AJIB_iibb JNB verified A3
# HBAR_AIBC_aaaa JNB verified A3
# HBAR_AIBC_aabb JNB verified A3
# HBAR_ABCI_aaaa JNB verified A3
# HBAR_ABCI_aabb JNB verified A3
#    --------- 

server_barrier
allocate LHBAR_ii[*,*]
allocate LHBAR_ia[*,*]
allocate LHBAR_jb[*,*]
allocate LHBAR_aa[*,*]
server_barrier

print "Forming H_ab"
CALL HBAR_AB
print "Forming H_ij"
CALL HBAR_IJ
print "Forming H_ib"
CALL HBAR_IB

delete HBAR_ii
delete HBAR_ia
delete HBAR_jb

print "Forming H_ijkl"
CALL HBAR_IJKL
print "Forming H_jkia"
CALL HBAR_JKIA
print "Forming H_iajk"
CALL HBAR_IAJK

print "Forming H_iabc"
CALL HBAR_AIBC
print "Forming H_ajib"
CALL HBAR_AJIB
print "Forming H_abci"
CALL HBAR_ABCI 

call AO4VIR

server_barrier
pardo a, a1, a2, i
    request                             HBAR_AIBC_aabb[a,a1,i,a2]
    request                             HBAR_AIBC_aabb[a,a2,i,a1]
    tpppp[a,a1,i,a2]                  = HBAR_AIBC_aabb[a,a1,i,a2]
    t1pppp[a,a1,i,a2]                 = HBAR_AIBC_aabb[a,a2,i,a1]
    tpppp[a,a1,i,a2]                 -= t1pppp[a,a1,i,a2]
    prepare HBAR_AIBC_aaaa[a,a1,i,a2] = tpppp[a,a1,i,a2]
endpardo a, a1, a2, i

pardo a, a1, a2, i
    request                             HBAR_ABCI_aabb[a,a1,a2,i]
    request                             HBAR_ABCI_aabb[a2,a1,a,i]
    tpppp[a,a1,a2,i]                  = HBAR_ABCI_aabb[a,a1,a2,i]
    t1pppp[a,a1,a2,i]                 = HBAR_ABCI_aabb[a2,a1,a,i]
    tpppp[a,a1,a2,i]                 -= t1pppp[a,a1,a2,i]
    prepare HBAR_ABCI_aaaa[a,a1,a2,i] = tpppp[a,a1,a2,i]
endpardo a, a1, a2, i
server_barrier

ENDPROC form_H

#------------------------------------------------------------------------

PROC form_diag

# VCONV1A  JNB verified A3
# VCONV2AB JNB verified A3
# VCONV2AA JNB verified A3
#    ----------- 
print "forming diagonals"
server_barrier

PARDO a, a1, i, i1
    taiai[a,i,a1,i1]            = 0.0
    prepare VCONV2AA[a,i,a1,i1] = taiai[a,i,a1,i1]
ENDPARDO a, a1, i, i1

PARDO a, b, i, j
    taibj[a,i,b,j]            = 0.0 
    prepare VCONV2AB[a,i,b,j] = taibj[a,i,b,j]
ENDPARDO a, b, i, j
server_barrier

PARDO mu, nu, lambda, sigma 

    execute compute_integral_batch aoint[mu,nu,lambda,sigma] 

    DO a 
	Txxxp[mu,nu,lambda,a] = aoint[mu,nu,lambda,sigma]*ca[sigma,a] 
	DO a1 
	if a == a1 
	    Txxpp[mu,nu,a1,a] = Txxxp[mu,nu,lambda,a]*ca[lambda,a1] 
	    prepare Vxxaa[mu,nu,a1,a] += Txxpp[mu,nu,a1,a] 
	endif 
	ENDDO a1 
    ENDDO a 

    DO b 
	Txxxq[mu,nu,lambda,b] = aoint[mu,nu,lambda,sigma]*ca[sigma,b] 
	DO b1 
	if b == b1 
	    Txxqq[mu,nu,b1,b] = Txxxq[mu,nu,lambda,b]*ca[lambda,b1] 
	    prepare Gxxbb[mu,nu,b1,b] += Txxqq[mu,nu,b1,b] 
	endif 
	ENDDO b1 
    ENDDO b 

ENDPARDO mu, nu, lambda, sigma 

PARDO mu, nu, lambda, sigma 

    execute compute_integral_batch            aoint[mu,sigma,lambda,nu] 
    txxxx[mu,nu,lambda,sigma]  = aoint[mu,sigma,lambda,nu] 
    txxxx[mu,nu,lambda,sigma] *= -1.0  

    DO a 
	Txxxp[mu,nu,lambda,a] = txxxx[mu,nu,lambda,sigma]*ca[sigma,a] 
	DO a1 
	if a == a1 
	    Txxpp[mu,nu,a1,a] = Txxxp[mu,nu,lambda,a]*ca[lambda,a1] 
	    prepare Vxxaa[mu,nu,a1,a] += Txxpp[mu,nu,a1,a] 
	endif 
	ENDDO a1 
    ENDDO a 

ENDPARDO mu, nu, lambda, sigma 

server_barrier

PARDO mu, nu, a, a1 
WHERE a == a1 
    request Vxxaa[mu,nu,a1,a]             
    DO a2 
	Txppp[mu,a2,a1,a] = Vxxaa[mu,nu,a1,a]*ca[nu,a2] 
	DO a3 
	if a2 == a3 
	    Tpppp[a3,a2,a1,a] = Txppp[mu,a2,a1,a]*ca[mu,a3] 
	    prepare Vaaaa[a3,a2,a1,a] += Tpppp[a3,a2,a1,a] 
	endif 
	ENDDO a3 
    ENDDO a2 
ENDPARDO mu, nu, a, a1 

PARDO mu, nu, b, b1 
WHERE b == b1 
    request Gxxbb[mu,nu,b1,b]             
    DO a2 
	Txpqq[mu,a2,b1,b] = Gxxbb[mu,nu,b1,b]*ca[nu,a2] 
	DO a3 
	if a2 == a3 
	    Tppqq[a3,a2,b1,b] = Txpqq[mu,a2,b1,b]*ca[mu,a3] 
	    prepare Vaabb[a3,a2,b1,b] += Tppqq[a3,a2,b1,b] 
	endif 
	ENDDO a3 
    ENDDO a2 
ENDPARDO mu, nu, b, b1 

server_barrier

# -----prepare f_aa diagonal = Sdaa

PARDO a, a1, a2, a3   
WHERE a  == a1 
WHERE a2 == a3 

    request Vaaaa[a,a1,a2,a3] 
    Tpppp[a,a1,a2,a3]  = Vaaaa[a,a1,a2,a3]
    execute return_diagonal_elements Tpppp[a,a1,a2,a3]
    taa[a3,a1]         = 1.0
    t1aa[a,a2]         = Tpppp[a,a1,a2,a3]*taa[a3,a1]

    PUT Faa[a,a2]     += t1aa[a,a2]

ENDPARDO a, a1, a2, a3  

PARDO a, a1, b2, b3   
WHERE a  == a1 
WHERE b2 == b3 

    request Vaabb[a,a1,b2,b3] 
    Tppqq[a,a1,b2,b3]  = Vaabb[a,a1,b2,b3]
    execute return_diagonal_elements Tppqq[a,a1,b2,b3]
    tba[b3,a1]         = 1.0
    tab[a,b2]          = Tppqq[a,a1,b2,b3]*tba[b3,a1]

    PUT Fab[a,b2]     += tab[a,b2]

ENDPARDO a, a1, b2, b3  

PARDO a, a1
WHERE a==a1 

    taa[a,a1]      = LHBAR_aa[a,a1]
    execute return_diagonal_elements taa[a,a1]
    put DDaa[a,a1] = taa[a,a1]

ENDPARDO a, a1

# -----prepare f_ii diagonal = Sdii

PARDO i, i1
WHERE i==i1 

    tii[i1,i]      = LHBAR_ii[i1,i]
    execute return_diagonal_elements tii[i1,i]
    put DDii[i1,i] = tii[i1,i]

ENDPARDO i, i1

# -----prepare f_jj diagonal = DDjj

#PARDO j, j1
#WHERE j==j1 
#
#    tjj[j1,j]      = LHBAR_ii[j1,j]
#    execute return_diagonal_elements tjj[j1,j]
#    put DDjj[j1,j] = tjj[j1,j]
#
#ENDPARDO j, j1

server_barrier

# -----prepare Hbar_aiai diagonal

PARDO a, i

    tai[a,i]=0.0

    do a1
    do i1

	request HBAR_AJIB_aaaa[i1,a1,a,i] 
	Taaii[a,a1,i,i1] = HBAR_AJIB_aaaa[i1,a1,a,i]
	execute return_diagonal_elements Taaii[a,a1,i,i1]
	tia[i1,a1]       = 1.0
	t1ai[a,i]        = Taaii[a,a1,i,i1]*tia[i1,a1]
	tai[a,i]        += t1ai[a,i]

    enddo i1
    enddo a1

    PUT VCONV1A[a,i] = tai[a,i]

ENDPARDO a, i

# -----prepare Hbar_bjbj diagonal

server_barrier

PARDO a, a1, i, i1

    get                            VCONV1A[a,i1]
    get                            VCONV1A[a1,i]
    tia[i1,a]                    = 1.0
    t1ia[i,a1]                   = 1.0
    tai[a,i1]                    = VCONV1A[a,i1]
    t2ai[a1,i]                   = VCONV1A[a1,i]
    t1aiai[a,i,a1,i1]            = tai[a,i1]^t1ia[i,a1]
    t2aiai[a,i,a1,i1]            = t2ai[a1,i]^tia[i1,a]

    prepare VCONV2AA[a,i,a1,i1] += t1aiai[a,i,a1,i1]
    prepare VCONV2AA[a,i,a1,i1] += t2aiai[a,i,a1,i1]

ENDPARDO a, a1, i, i1

server_barrier

# -------------------------------------------------------------------------------------
# Start of correction ??? 
# -------------------------------------------------------------------------------------

# -----prepare Hbar_aiai diagonal

PARDO a, i

    tai[a,i]=0.0

    do a1
    do i1

	request HBAR_AJIB_aaaa[i1,a1,a,i] 
	Taaii[a,a1,i,i1] = HBAR_AJIB_aaaa[i1,a1,a,i]
	execute return_diagonal_elements Taaii[a,a1,i,i1]
	tia[i1,a1]       = 1.0
	t1ai[a,i]        = Taaii[a,a1,i,i1]*tia[i1,a1]
	tai[a,i]        += t1ai[a,i]

    enddo i1
    enddo a1

    PUT VCONV1A[a,i] = tai[a,i]

ENDPARDO a, i

# -----prepare Hbar_bjbj diagonal

server_barrier

# ---------compute T(a,i)=F(a,a)-f(i,i)-v(a,i,a,i)

PARDO a, i

    tai[a,i]=0.0

    do a1

	get         DDaa[a,a1]
	tia[i,a1] = 1.0
	taa[a1,a] = DDaa[a,a1]

	t2ai[a,i] = tia[i,a1]*taa[a1,a]
	tai[a,i] += t2ai[a,i]

    enddo a1

    do i1

	get          DDii[i1,i]
	t2ia[i1,a] = 1.0
	tii[i,i1]  = DDii[i1,i]

	t2ai[a,i]  = tii[i,i1]*t2ia[i1,a]
	t2ai[a,i] *= -1.0
	tai[a,i]  += t2ai[a,i]

    enddo i1

    PUT VCONV1A[a,i] += tai[a,i]

ENDPARDO a, i

# ---------compute T(b,j)=F(b,b)-f(j,j)

server_barrier

PARDO a, a1, i, i1

    get                 VCONV1A[a,i]
    get                 VCONV1A[a1,i1]
    tia[i,a]          = 1.0
    t1ia[i1,a1]       = 1.0
    tai[a,i]          = VCONV1A[a,i]
    t2ai[a1,i1]       = VCONV1A[a1,i1]
    t1aiai[a,i,a1,i1] = tai[a,i]^t1ia[i1,a1]
    t2aiai[a,i,a1,i1] = t2ai[a1,i1]^tia[i,a]

    taiai[a,i,a1,i1]  = t1aiai[a,i,a1,i1]
    taiai[a,i,a1,i1] += t2aiai[a,i,a1,i1]

    do i2
    do i3

	request             HBAR_iiii[i,i2,i1,i3] 
	tiiii[i,i2,i1,i3] = HBAR_iiii[i,i2,i1,i3]
	execute return_diagonal_elements Tiiii[i,i2,i1,i3]
	t1aiai[a,i2,a1,i3]=1.0
	t2aiai[a,i,a1,i1] = Tiiii[i,i2,i1,i3]*t1aiai[a,i2,a1,i3]
	taiai[a,i,a1,i1] += t2aiai[a,i,a1,i1]

    enddo i3
    enddo i2

    get                 Faa[a,a1]
    tii[i,i1]         = 1.0
    t1aiai[a,i,a1,i1] = Faa[a,a1]^tii[i,i1]
    taiai[a,i,a1,i1] += t1aiai[a,i,a1,i1]

    prepare VCONV2AA[a,i,a1,i1] += taiai[a,i,a1,i1]

ENDPARDO a, a1, i, i1

# alpha/beta contribution 
# ----------------------- 

PARDO a, i, b, j

    get               VCONV1A[b,j]
    get               VCONV1A[a,i]
    t1ai[a,i]       = 1.0
    t1bj[b,j]       = 1.0

    tbj[b,j]        = VCONV1A[b,j]
    tai[a,i]        = VCONV1A[a,i]
    t1aibj[a,i,b,j] = t1ai[a,i]^tbj[b,j]
    t2aibj[a,i,b,j] = tai[a,i]^t1bj[b,j]

    taibj[a,i,b,j]  = 0.0  
    taibj[a,i,b,j]  = t1aibj[a,i,b,j]
    taibj[a,i,b,j] += t2aibj[a,i,b,j]

    do i1
    do j1

	request                   HBAR_iijj[i,i1,j,j1] 
	Tiijj[i,i1,j,j1]        = HBAR_iijj[i,i1,j,j1]
	execute return_diagonal_elements  Tiijj[i,i1,j,j1]
	t2aibj[a,i1,b,j1]       = 1.0
	t1aibj[a,i,b,j]         = Tiijj[i,i1,j,j1]*t2aibj[a,i1,b,j1]
	taibj[a,i,b,j]         += t1aibj[a,i,b,j]

    enddo j1
    enddo i1

    get Fab[a,b]
    tij[i,j]=1.0
    t1aibj[a,i,b,j]=Fab[a,b]^tij[i,j]
    taibj[a,i,b,j]+=t1aibj[a,i,b,j]

    do i1
    do b1

	request HBAR_AJIB_iibb[i1,i,b,b1] 
	Tiibb[i1,i,b,b1]=HBAR_AJIB_iibb[i1,i,b,b1]
	execute return_diagonal_elements Tiibb[i1,i,b,b1]
	t2aibj[a,i1,b1,j]=1.0
	t1aibj[a,i,b,j]=Tiibb[i1,i,b,b1]*t2aibj[a,i1,b1,j]
	taibj[a,i,b,j]+=t1aibj[a,i,b,j]

    enddo b1
    enddo i1

    do j1
    do a1

	request HBAR_AJIB_iibb[j1,j,a,a1] 
	Tjjaa[j1,j,a,a1]=HBAR_AJIB_iibb[j1,j,a,a1]
	execute return_diagonal_elements Tjjaa[j1,j,a,a1]
	t2aibj[a1,i,b,j1]=1.0
	t1aibj[a,i,b,j]=Tjjaa[j1,j,a,a1]*t2aibj[a1,i,b,j1]
	taibj[a,i,b,j]+=t1aibj[a,i,b,j]

    enddo a1
    enddo j1

    prepare VCONV2AB[a,i,b,j] = taibj[a,i,b,j]

ENDPARDO a, i, b, j

server_barrier

delete Faa
delete Fab

server_barrier
## JNB DEBUG
#print "VCONV1A"
#pardo a,i
#    get VCONV1A[a,i]
#    print VCONV1A[a,i]
#endpardo a,i
#
#print "VCONV2AA"
#pardo a,i,a1,i1
#request VCONV2AA[a,i,a1,i1]
#print VCONV2AA[a,i,a1,i1]
#endpardo a,i,a1,i1
#
#print "VCONV2AB"
#pardo a,i,b,j
#request VCONV2AB[a,i,b,j]
#print VCONV2AB[a,i,b,j]
#endpardo a,i,b,j
server_barrier

ENDPROC form_diag

#------------------------------------------------------------------------

PROC HB_zero

pardo a,i,a1,i1
    do ksub
        Tkaiai[ksub,a,i,a1,i1] = 0.0
	prepare HB2_aa[ksub,a,i,a1,i1] = Tkaiai[ksub,a,i,a1,i1]
    enddo ksub
endpardo a,i,a1,i1

pardo a,i,b,j
    do ksub
        Tkaibj[ksub,a,i,b,j] = 0.0
	prepare HB2_ab[ksub,a,i,b,j] = Tkaibj[ksub,a,i,b,j]
    enddo ksub
endpardo a,i,b,j

pardo a,i
    do ksub
        Tkai[ksub,a,i] = 0.0
	prepare HB1_a[ksub,a,i] = Tkai[ksub,a,i]
    enddo ksub
endpardo a,i

server_barrier

ENDPROC HB_zero

PROC VCHACT_ZERO
server_barrier
pardo a,i
    Tai[a,i] = 0.0
    put VCHACT1A[a,i] = Tai[a,i]
endpardo a,i

pardo a,i,a1,i1
    Taiai[a,i,a1,i1] = 0.0
    prepare VCHACT2AA[a,i,a1,i1] = Taiai[a,i,a1,i1]
endpardo a,i,a1,i1

pardo a,i,b,j
    Taibj[a,i,b,j] = 0.0
    prepare VCHACT2AB[a,i,b,j] = Taibj[a,i,b,j]
endpardo a,i,b,j

server_barrier
ENDPROC VCHACT_ZERO

PROC place_VCACT
# in loops taken from ACESIII eom we go over 1 subspace vector at a time in H.B so strip ksub out.
server_barrier
Tk[ksub] = 1.0
pardo a,i,a1,i1
    request RB2_aa[ksub,a,i,a1,i1]
    Taiai[a,i,a1,i1] = Tk[ksub]*RB2_aa[ksub,a,i,a1,i1]
    prepare VCACT2AA[a,i,a1,i1] = Taiai[a,i,a1,i1]
endpardo a,i,a1,i1

pardo a,i,b,j
    request RB2_ab[ksub,a,i,b,j]
    Taibj[a,i,b,j] = Tk[ksub]*RB2_ab[ksub,a,i,b,j]
    prepare VCACT2AB[a,i,b,j] = Taibj[a,i,b,j]
endpardo a,i,b,j

pardo a,i
    request RB1_a[ksub,a,i]
    Tai[a,i] = Tk[ksub]*RB1_a[ksub,a,i]
    put VCACT1A[a,i] = Tai[a,i]
endpardo a,i

server_barrier
ENDPROC place_VCACT

PROC FACTORS_NEW
#     ---------------- 

PARDO i, i1, j, b 
    T1pqpq[i1,b,i,j]        = 0.0 
    prepare Niibj[i1,b,i,j] = T1pqpq[i1,b,i,j]
    prepare Njjai[i1,b,i,j] = T1pqpq[i1,b,i,j]
ENDPARDO i, i1, j, b 

PARDO i, i1, i2, a 
    T1pppp[i1,a,i,i2]        = 0.0 
    prepare Niiai[i1,a,i,i2] = T1pppp[i1,a,i,i2]
ENDPARDO i, i1, i2, a 

PARDO i, i1, j, j1 
    tiijj[i,i1,j,j1] = 0.0 
    put Niijj[i,i1,j,j1] = tiijj[i,i1,j,j1]
ENDPARDO i, i1, j, j1 

PARDO i, i1, i2, i3 
    tiiii[i,i1,i2,i3] = 0.0 
    PUT Niiii[i,i1,i2,i3] = tiiii[i,i1,i2,i3] 
ENDPARDO i, i1, i2, i3 

PARDO a1, i, b, j 
    request VCACT2AB[a1,i,b,j]  
    tpqpq[a1,b,i,j]         = VCACT2AB[a1,i,b,j] 
    prepare VFLAB[a1,b,i,j] = tpqpq[a1,b,i,j]  
ENDPARDO a1,i,b,j 

PARDO a2, i, a1, i2 
    request VCACT2AA[a2,i,a1,i2] 
    tpppp[a2,a1,i,i2]         = VCACT2AA[a2,i,a1,i2]
    prepare VFLAA[a2,a1,i,i2] = tpppp[a2,a1,i,i2]  
ENDPARDO a2,i,a1,i2 

server_barrier 

PARDO a, i1, a2, i
WHERE i < i1
    request VCACT2AA[a,i,a2,i1] 
    DO a1
	request VSpipi[a2,i1,a1,i] 
	taa[a,a1]        = VCACT2AA[a,i,a2,i1]*VSpipi[a2,i1,a1,i]
	taa[a,a1]       *= -1.0
	LFae_a[a,a1] += taa[a,a1]
    ENDDO a1
ENDPARDO a, i1, a2, i

PARDO a, i1, a2, i
WHERE i == i1
    request VCACT2AA[a,i,a2,i1] 
    DO a1
	request VSpipi[a2,i1,a1,i] 
	taa[a,a1]        = VCACT2AA[a,i,a2,i1]*VSpipi[a2,i1,a1,i]
	taa[a,a1]       *= -0.5
	LFae_a[a,a1] += taa[a,a1]
    ENDDO a1
ENDPARDO a, i1, a2, i

PARDO a, i, b, j
request VCACT2AB[a,i,b,j] 
    DO a1  
	request Vpiqj[a1,i,b,j] 
	taa[a,a1]        = VCACT2AB[a,i,b,j]*Vpiqj[a1,i,b,j]
	taa[a,a1]       *= -1.0
	LFae_a[a,a1] += taa[a,a1]
    ENDDO a1  
ENDPARDO a, i, b, j

#    Fmi_a

PARDO i, i1, i2, a
    request VSpipi[a,i2,i,i1] 
    GET                VCACT1A[a,i2]
    tii[i1,i]        = VSpipi[a,i2,i,i1]*VCACT1A[a,i2]
    LFmi_a[i1,i] += tii[i1,i]
ENDPARDO i, i1, i2, a

PARDO i, a1, i2, a
WHERE a == a1
    request VCACT2AA[a,i,a1,i2] 
    do i1
	request VSpipi[a,i1,a1,i2] 
	tii[i1,i]        = VCACT2AA[a,i,a1,i2]*VSpipi[a,i1,a1,i2]
	tii[i1,i]       *= 0.5
	LFmi_a[i1,i] += tii[i1,i]
    enddo i1
ENDPARDO i, a1, i2, a

PARDO i, a1, i2, a
WHERE a < a1
    request VCACT2AA[a,i,a1,i2] 
    do i1
	request VSpipi[a,i1,a1,i2] 
	tii[i1,i]        = VCACT2AA[a,i,a1,i2]*VSpipi[a,i1,a1,i2]
	LFmi_a[i1,i] += tii[i1,i]
    enddo i1
ENDPARDO i, a1, i2, a

PARDO i, i1, j, b
    request Vpiqj[i,i1,b,j] 
    GET                VCACT1A[b,j]
    tii[i1,i]        = Vpiqj[i,i1,b,j]*VCACT1A[b,j]
    LFmi_a[i1,i] += tii[i1,i]
ENDPARDO i, i1, j, b

PARDO i, a, j, b
    request VCACT2AB[a,i,b,j] 
    do i1  
	request Vpiqj[a,i1,b,j] 
	tii[i1,i]        = VCACT2AB[a,i,b,j]*Vpiqj[a,i1,b,j]
	LFmi_a[i1,i] += tii[i1,i]
    enddo i1  
ENDPARDO i, a, j, b

#     Fmi_b

PARDO j, j1, j2, b
    request VSqjqj[b,j2,j,j1] 
    GET                VCACT1A[b,j2]
    tjj[j1,j]        = VSqjqj[b,j2,j,j1]*VCACT1A[b,j2]
    LFmi_b[j1,j] += tjj[j1,j]
ENDPARDO j, j1, j2, b

PARDO j, b1, j2, b
WHERE b < b1
    request VCACT2AA[b,j,b1,j2] 
    do j1
	request VSqjqj[b,j1,b1,j2] 
	tjj[j1,j]        = VCACT2AA[b,j,b1,j2]*VSqjqj[b,j1,b1,j2]
	LFmi_b[j1,j] += tjj[j1,j]
    enddo j1
ENDPARDO j, b1, j2, b

PARDO j, b1, j2, b
WHERE b == b1
    request VCACT2AA[b,j,b1,j2] 
    do j1
	request VSqjqj[b,j1,b1,j2] 
	tjj[j1,j]        = VCACT2AA[b,j,b1,j2]*VSqjqj[b,j1,b1,j2]
	tjj[j1,j]       *= 0.5
	LFmi_b[j1,j] += tjj[j1,j]
    enddo j1
ENDPARDO j, b1, j2, b

PARDO j, j1, i, a
    request Vpiqj[a,i,j,j1] 
    GET                VCACT1A[a,i]
    tjj[j1,j]        = Vpiqj[a,i,j,j1]*VCACT1A[a,i]
    LFmi_b[j1,j] += tjj[j1,j]
ENDPARDO j, j1, i, a

PARDO j, b, i, a
    request VCACT2AB[a,i,b,j] 
    do j1  
	request Vpiqj[a,i,b,j1] 
	tjj[j1,j]        = VCACT2AB[a,i,b,j]*Vpiqj[a,i,b,j1]
	LFmi_b[j1,j] += tjj[j1,j]
    enddo j1  
ENDPARDO j, b, i, a

PARDO j1, a, b, a1

    request Vaabj[a,a1,b,j1] 
    GET             VCACT1A[b,j1]
    tqppq[j1,a,a1,b] = Vaabj[a,a1,b,j1]

    t1aa[a1,a]    = Vaabj[a,a1,b,j1]*VCACT1A[b,j1]
    LFae_a[a1,a] += t1aa[a1,a]

    do i
    do j

	request                    VFLAB[a1,b,i,j] 
	T1qppq[j1,a,i,j]         = tqppq[j1,a,a1,b]*VFLAB[a1,b,i,j]
	prepare Njjai[j1,a,i,j] += T1qppq[j1,a,i,j]

    enddo j
    enddo i

ENDPARDO j1, a, b, a1

PARDO i1, b, a, b1  

    request Vbbai[b,b1,a,i1] 
    tpqpq[i1,b,a,b1] = Vbbai[b,b1,a,i1] 

    do i
    do j
	request                    VFLAB[a,b1,i,j] 
	T1pqpq[i1,b,i,j]         = tpqpq[i1,b,a,b1]*VFLAB[a,b1,i,j]
	prepare Niibj[i1,b,i,j] += T1pqpq[i1,b,i,j]
    enddo j
    enddo i

ENDPARDO i1, b, a, b1  

PARDO i1, a, a1, a2  

    request VSaaai[a1,a,a2,i1] 
    GET                 VCACT1A[a2,i1]
    tpppp[i1,a,a2,a1] = VSaaai[a1,a,a2,i1] 

    t1aa[a,a1]        = VSaaai[a1,a,a2,i1]*VCACT1A[a2,i1]
    LFae_a[a,a1]  += t1aa[a,a1]

    do i
    do i2

	request                     VFLAA[a2,a1,i,i2] 
	T1pppp[i1,a,i,i2]         = tpppp[i1,a,a2,a1]*VFLAA[a2,a1,i,i2]
	T1pppp[i1,a,i,i2]        *= 0.5
	prepare Niiai[i1,a,i,i2] += T1pppp[i1,a,i,i2]

    enddo i2
    enddo i

ENDPARDO i1, a, a1, a2  

PARDO i1, j1, a, b 

    request            Vpiqj[a,i1,b,j1] 
    tpqpq[i1,j1,a,b] = Vpiqj[a,i1,b,j1] 

    do i
    do j
	request                 VFLAB[a,b,i,j] 
	tiijj[i,i1,j,j1]      = tpqpq[i1,j1,a,b]*VFLAB[a,b,i,j]
	put Niijj[i,i1,j,j1] += tiijj[i,i1,j,j1]
    enddo j
    enddo i

ENDPARDO i1, j1, a, b  

PARDO i1, i3, a, a1  

    request             VSpipi[a,i1,a1,i3] 
    tpppp[i1,i3,a,a1] = VSpipi[a,i1,a1,i3]  

    do i  
    do i2  
	request                  VFLAA[a,a1,i,i2] 
	tiiii[i1,i,i3,i2]      = tpppp[i1,i3,a,a1]*VFLAA[a,a1,i,i2]  
	tiiii[i1,i,i3,i2]     *= 0.5
	put Niiii[i1,i,i3,i2] += tiiii[i1,i,i3,i2]
    enddo i2  
    enddo i

ENDPARDO i1, i3, a, a1  

#    Form Half back transformed cluster arrays  
#    -----------------------------------------

PARDO a1, i1, i   

    allocate LLaiai[*,i,a1,i1] 

    DO a  
	request VCACT2AA[a,i,a1,i1]  
	LLaiai[a,i,a1,i1]  = VCACT2AA[a, i,a1,i1] 
	LLaiai[a,i,a1,i1] *= 2.0  
    ENDDO a  

    DO lambda   
	Zaa[lambda,i,a1,i1] = 0.0 
	DO a  
	    Txiai[lambda,i,a1,i1] = LLaiai[a,i,a1,i1]*ca[lambda,a]
	    Zaa[lambda,i,a1,i1]  += Txiai[lambda,i,a1,i1] 
	ENDDO a 
	prepare T1AO_aa[lambda,i,a1,i1] = Zaa[lambda,i,a1,i1] 
    ENDDO lambda  

    deallocate LLaiai[*,i,a1,i1] 

ENDPARDO a1, i1, i   

PARDO b, j, i   

    allocate LLaibj[*,i,b,j] 

    DO a  
	request VCACT2AB[a,i,b,j]  
	LLaibj[a,i,b,j] = VCACT2AB[a,i,b,j] 
    ENDDO a  

    DO lambda   
	Zab[lambda,i,b,j] = 0.0 
	DO a  
	    Txibj[lambda,i,b,j] = LLaibj[a,i,b,j]*ca[lambda,a]
	    Zab[lambda,i,b,j]  += Txibj[lambda,i,b,j] 
	ENDDO a 
	prepare T1AO_ab[lambda,i,b,j] = Zab[lambda,i,b,j] 
    ENDDO lambda  

    deallocate LLaibj[*,i,b,j] 

ENDPARDO b, j, i   

#     form Fia_a 
#     ---------- 

PARDO i, a

    tia[i,a] = 0.0

    DO a1
    DO i1
	request VSpipi[a,i,a1,i1] 
	GET         VCACT1A[a1,i1]
	t1ia[i,a] = VSpipi[a,i,a1,i1]*VCACT1A[a1,i1]
	tia[i,a] += t1ia[i,a]
    ENDDO i1
    ENDDO a1

    DO b
    DO j
	request Vpiqj[a,i,b,j] 
	GET         VCACT1A[b,j]
	t1ia[i,a] = Vpiqj[a,i,b,j]*VCACT1A[b,j]
	tia[i,a] += t1ia[i,a]
    ENDDO j
    ENDDO b

    DO a1  
	taa[a1,a]     = ST1a[a1,i]*tia[i,a]
	LFae_a[a1,a] -= taa[a1,a]
    ENDDO a1  

    DO i1  
	tii[i,i1]     = tia[i,a]*ST1a[a,i1]
	LFmi_a[i,i1] += tii[i,i1]
    ENDDO i1  

ENDPARDO i, a

#     form Fjb_b 
#     ---------- 

PARDO j, b

    tjb[j,b] = 0.0

    DO b1
    DO j1
	request VSqjqj[b,j,b1,j1] 
	GET         VCACT1A[b1,j1]
	t1jb[j,b] = VSqjqj[b,j,b1,j1]*VCACT1A[b1,j1]
	tjb[j,b] += t1jb[j,b]
    ENDDO j1
    ENDDO b1

    DO a
    DO i
	request Vpiqj[a,i,b,j] 
	GET         VCACT1A[a,i]
	t1jb[j,b] = Vpiqj[a,i,b,j]*VCACT1A[a,i]
	tjb[j,b] += t1jb[j,b]
    ENDDO i
    ENDDO a

    DO j1  
	tjj[j,j1]     = tjb[j,b]*ST1A[b,j1]
	LFmi_b[j,j1] += tjj[j,j1]
    ENDDO j1  

ENDPARDO j, b

server_barrier 
DO i 
DO i1 
    tii[i,i1]        = LFmi_a[i,i1] 
    PUT Fmi_a[i,i1] += tii[i,i1] 
ENDDO i1 
ENDDO i 
DO j 
DO j1 
    tjj[j,j1]        = LFmi_b[j,j1] 
    PUT Fmi_b[j,j1] += tjj[j,j1] 
ENDDO j1 
ENDDO j 
DO a 
DO a1 
    taa[a,a1]        = LFae_a[a,a1] 
    PUT Fae_a[a,a1] += taa[a,a1] 
ENDDO a1 
ENDDO a 
server_barrier 
DO a 
DO a1 
    GET            Fae_a[a,a1] 
    taa[a,a1] = Fae_a[a,a1]  
    LFae_a[a,a1] = taa[a,a1] # Fae_a(a,a1) 
ENDDO a1 
ENDDO a 
DO i 
DO i1 
    GET            Fmi_a[i,i1] 
    tii[i,i1] =  Fmi_a[i,i1]    
    LFmi_a[i,i1] = tii[i,i1] # Fmi_a(i,i1) 
ENDDO i1 
ENDDO i 
DO j 
DO j1 
    GET            Fmi_b[j,j1] 
    tjj[j,j1] = Fmi_b[j,j1] 
    LFmi_b[j,j1] = tjj[j,j1] # Fmi_b(j,j1) 
ENDDO j1 
ENDDO j 
server_barrier 

ENDPROC FACTORS_NEW

PROC R2AALIN_NEW 
#    ---------------- 

create D2aa 
server_barrier 

PARDO a, a1, i2, i3
WHERE i2 < i3

    request VCACT2AA[a,i2,a1,i3] 
    request T2AA[a,i2,a1,i3] 

    tpp[a1,i3]          = St1a[a1,i3]
    t1pp[a1,i2]         = St1a[a1,i2]
    T2aiai[a,i2,a1,i3]  = St1a[a,i2]^tpp[a1,i3]
    T3aiai[a,i2,a1,i3]  = St1a[a,i3]^t1pp[a1,i2]
    T2aiai[a,i2,a1,i3] -= T3aiai[a,i2,a1,i3]
    T2aiai[a,i2,a1,i3] += T2AA[a,i2,a1,i3]

    DO i
    DO i1
	request HBAR_iiii[i2,i,i3,i1] 
	GET                             Niiii[i2,i,i3,i1]

	T1aiai[a,i,a1,i1]             = HBAR_iiii[i2,i,i3,i1]*VCACT2AA[a,i2,a1,i3]
	T1aiai[a,i,a1,i1]            *= 0.25
	Taiai[a,i,a1,i1]              = T1aiai[a,i,a1,i1]
#   
	T1aiai[a,i,a1,i1]             = Niiii[i2,i,i3,i1]*T2aiai[a,i2,a1,i3]
	T1aiai[a,i,a1,i1]            *= 0.25
	Taiai[a,i,a1,i1]             += T1aiai[a,i,a1,i1]

	PUT D2aa[a,i,a1,i1] += Taiai[a,i,a1,i1]

    ENDDO i1
    ENDDO i

ENDPARDO a, a1, i2, i3

PARDO a, a1, i2, i3
WHERE i2 == i3

    request VCACT2AA[a,i2,a1,i3] 
    request T2AA[a,i2,a1,i3] 

    tpp[a1,i3]          = St1a[a1,i3]
    t1pp[a1,i2]         = St1a[a1,i2]

    T2aiai[a,i2,a1,i3]  = St1a[a,i2]^tpp[a1,i3]
    T3aiai[a,i2,a1,i3]  = St1a[a,i3]^t1pp[a1,i2]
    T2aiai[a,i2,a1,i3] -= T3aiai[a,i2,a1,i3]
    T2aiai[a,i2,a1,i3] += T2AA[a,i2,a1,i3]

    DO i
    DO i1
	request HBAR_iiii[i2,i,i3,i1] 
	GET                             Niiii[i2,i,i3,i1]

	T1aiai[a,i,a1,i1]             = HBAR_iiii[i2,i,i3,i1]*VCACT2AA[a,i2,a1,i3]
	T1aiai[a,i,a1,i1]            *= 0.125
	Taiai[a,i,a1,i1]              = T1aiai[a,i,a1,i1]
#   
	T1aiai[a,i,a1,i1]             = Niiii[i2,i,i3,i1]*T2aiai[a,i2,a1,i3]
	T1aiai[a,i,a1,i1]            *= 0.125
	Taiai[a,i,a1,i1]             += T1aiai[a,i,a1,i1]

	PUT D2aa[a,i,a1,i1] += Taiai[a,i,a1,i1]

    ENDDO i1
    ENDDO i

ENDPARDO a, a1, i2, i3

PARDO i1, a1, i2, a2  

    request HBAR_AJIB_aaaa[i2,a2,a1,i1] 
    t1aiai[a2,i2,a1,i1] = HBAR_AJIB_aaaa[i2,a2,a1,i1] 

    DO a
    DO i
	request VCACT2AA[a,i,a2,i2] 
	Taiai[a,i,a1,i1] = VCACT2AA[a,i,a2,i2]*t1aiai[a2,i2,a1,i1]

	PUT D2aa[a,i,a1,i1] += Taiai[a,i,a1,i1]

    ENDDO i
    ENDDO a

ENDPARDO i1, a1, i2, a2  

PARDO a1, i1, b, j 

    request HBAR_AJIB_aabb[j,b,a1,i1] 
    tbjai[b,j,a1,i1] = HBAR_AJIB_aabb[j,b,a1,i1] 

    DO a
    DO i
	request VCACT2AB[a,i,b,j] 
	Taiai[a,i,a1,i1] = VCACT2AB[a,i,b,j]*tbjai[b,j,a1,i1]

	PUT D2aa[a,i,a1,i1] += Taiai[a,i,a1,i1]

    ENDDO i
    ENDDO a

ENDPARDO a1, i1, b, j 

PARDO i, i1, a, a2 

    request VCACT2AA[a,i,a2,i1] 
    request T2AA[a,i,a2,i1] 

    do a1

	T1aiai[a,i,a1,i1]             = VCACT2AA[a,i,a2,i1]*LHBAR_aa[a1,a2]
	Taiai[a,i,a1,i1]              = T1aiai[a,i,a1,i1]

	T1aiai[a,i,a1,i1]             = T2AA[a,i,a2,i1]*LFae_a[a1,a2]
	Taiai[a,i,a1,i1]             += T1aiai[a,i,a1,i1]
	Taiai[a,i,a1,i1]             *= 0.5

	PUT D2aa[a,i,a1,i1] += Taiai[a,i,a1,i1]

    enddo a1

ENDPARDO i, i1, a, a2 

PARDO a, a1, i, i2

    request VCACT2AA[a,i,a1,i2] 
    request T2AA[a,i,a1,i2] 

    do i1

	T1aiai[a,i,a1,i1]             = VCACT2AA[a,i,a1,i2]*LHBAR_ii[i2,i1]
	Taiai[a,i,a1,i1]              = T1aiai[a,i,a1,i1]

	T1aiai[a,i,a1,i1]             = T2AA[a,i,a1,i2]*LFmi_a[i2,i1]
	Taiai[a,i,a1,i1]             += T1aiai[a,i,a1,i1]
	Taiai[a,i,a1,i1]             *= -0.5

	PUT D2aa[a,i,a1,i1] += Taiai[a,i,a1,i1]

    enddo i1

ENDPARDO a, a1, i, i2

#  PART       <2|HT1|0>

PARDO a, i, i1

    allocate Liiai[*,i,a,i1]
    allocate L2iiai[i,*,a,i1]

    do i2

	request HBAR_IAJK_aaaa[i2,i,a,i1] 
	request Niiai[i2,a,i,i1]   
	Liiai[i2,i,a,i1]  = HBAR_IAJK_aaaa[i2,i,a,i1]
	L2iiai[i,i2,a,i1] = Niiai[i2,a,i,i1]  

    enddo i2

    do a1
	Taiai[a,i,a1,i1] = 0.0
	do i2
	    get                 VCACT1A[a1,i2]
#get                 T1A(a1,i2)
	    T1aiai[a,i,a1,i1] = Liiai[i2,i,a,i1]*VCACT1A[a1,i2]
	    Taiai[a,i,a1,i1] += T1aiai[a,i,a1,i1]

	    T1aiai[a,i,a1,i1] = L2iiai[i,i2,a,i1]*ST1A[a1,i2]
	    Taiai[a,i,a1,i1] += T1aiai[a,i,a1,i1]
	enddo i2

	T3aiai[a1,i,a,i1]             = Taiai[a,i,a1,i1]
	T3aiai[a1,i,a,i1]            *= -1.0

	prepare VCHACT2AA[a,i,a1,i1] += Taiai[a,i,a1,i1]
	prepare VCHACT2AA[a1,i,a,i1] += T3aiai[a1,i,a,i1]

    enddo a1

    deallocate Liiai[*,i,a,i1]
    deallocate L2iiai[i,*,a,i1]

ENDPARDO a, i, i1

PARDO a, a1, a2, i
WHERE a < a1 

    request HBAR_ABCI_aaaa[a,a2,a1,i] 

    do i1

	GET                            VCACT1A[a2,i1]
	T1aiai[a,i,a1,i1]            = HBAR_ABCI_aaaa[a,a2,a1,i]*VCACT1A[a2,i1]
	T1aiai[a,i,a1,i1]           *= -1.0

	PUT D2aa[a,i,a1,i1] += T1aiai[a,i,a1,i1]

    enddo i1

ENDPARDO a, a1, a2, i

PARDO a, a1, a2, i
WHERE a == a1 

    request HBAR_ABCI_aaaa[a,a2,a1,i] 

    do i1

	GET                             VCACT1A[a2,i1]
	T1aiai[a,i,a1,i1]             = HBAR_ABCI_aaaa[a,a2,a1,i]*VCACT1A[a2,i1]
	T3aiai[a,i1,a1,i]             = T1aiai[a,i,a1,i1]
	T1aiai[a,i,a1,i1]            *= -1.0

	prepare VCHACT2AA[a,i,a1,i1] += T1aiai[a,i,a1,i1]
	prepare VCHACT2AA[a,i1,a1,i] += T3aiai[a,i1,a1,i]

    enddo i1

ENDPARDO a, a1, a2, i

server_barrier 
PARDO a, i, a1, i1 
    GET                 D2aa[a,i,a1,i1] 
    T2aiai[a1,i1,a,i] = D2aa[a,i,a1,i1]  
    T3aiai[a1,i,a,i1] = D2aa[a,i,a1,i1]  
    T4aiai[a,i1,a1,i] = D2aa[a,i,a1,i1]  
    T3aiai[a1,i,a,i1] *= -1.0  
    T4aiai[a,i1,a1,i] *= -1.0  

    prepare VCHACT2AA[a,i,a1,i1] += D2aa[a,i,a1,i1]
    prepare VCHACT2AA[a1,i1,a,i] += T2aiai[a1,i1,a,i]
    prepare VCHACT2AA[a1,i,a,i1] += T3aiai[a1,i,a,i1]
    prepare VCHACT2AA[a,i1,a1,i] += T4aiai[a,i1,a1,i]
ENDPARDO a, i, a1, i1 
server_barrier 
delete D2aa 

ENDPROC R2AALIN_NEW

PROC R2ABLIN_NEW
#    ---------------- 

PARDO i, j, b, a1  

    request VCACT2AB[a1,i,b,j] 
    request T2AB[a1,i,b,j] 

    DO a
	Taibj[a,i,b,j]              = VCACT2AB[a1,i,b,j]*LHBAR_aa[a,a1]
	T1aibj[a,i,b,j]             = T2AB[a1,i,b,j]*LFae_a[a,a1]
	Taibj[a,i,b,j]             += T1aibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    ENDDO a

ENDPARDO i, j, b, a1 

PARDO j, a, a1, j1  

    request HBAR_AJIB_iibb[j1,j,a,a1] 

    DO i
    DO b

    if a < b 
	request VCACT2AB[a1,i,b,j1] 
	Taibj[a,i,b,j]              = HBAR_AJIB_iibb[j1,j,a,a1]*VCACT2AB[a1,i,b,j1]
	T1aibj[b,j,a,i]             = Taibj[a,i,b,j] 
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
	prepare VCHACT2AB[b,j,a,i] += T1aibj[b,j,a,i]
    endif 

    if a == b 
	request VCACT2AB[a1,i,b,j1] 
	Taibj[a,i,b,j]              = HBAR_AJIB_iibb[j1,j,a,a1]*VCACT2AB[a1,i,b,j1]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    endif 

    ENDDO b
    ENDDO i

ENDPARDO j, a, a1, j1  

PARDO j, b, i1, a1  

    request VCACT2AB[a1,i1,b,j] 
    request HBAR_AJIB_aabb[i1,a1,b,j] 

    DO i
    DO a

    if a < b 
	request VCACT2AA[a,i,a1,i1] 
	request HBAR_AJIB_aaaa[i1,a1,a,i] 
	T1aibj[a,i,b,j]             = HBAR_AJIB_aaaa[i1,a1,a,i]*VCACT2AB[a1,i1,b,j]
	T2aibj[a,i,b,j]             = HBAR_AJIB_aabb[i1,a1,b,j]*VCACT2AA[a,i,a1,i1]
	Taibj[a,i,b,j]              = T1aibj[a,i,b,j]
	Taibj[a,i,b,j]             += T2aibj[a,i,b,j]
	T3aibj[b,j,a,i]             = Taibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
	prepare VCHACT2AB[b,j,a,i] += T3aibj[b,j,a,i]
    endif 

    if a == b 
	request VCACT2AA[a,i,a1,i1] 
	request HBAR_AJIB_aaaa[i1,a1,a,i] 
	T1aibj[a,i,b,j]             = HBAR_AJIB_aaaa[i1,a1,a,i]*VCACT2AB[a1,i1,b,j]
	T2aibj[a,i,b,j]             = HBAR_AJIB_aabb[i1,a1,b,j]*VCACT2AA[a,i,a1,i1]
	Taibj[a,i,b,j]              = T1aibj[a,i,b,j]
	Taibj[a,i,b,j]             += T2aibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    endif 

    ENDDO a
    ENDDO i

ENDPARDO j, b, i1, a1  

PARDO i, a, j, b1 

    request VCACT2AB[a,i,b1,j] 
    request T2AB[a,i,b1,j] 

    DO b
	Taibj[a,i,b,j]              = VCACT2AB[a,i,b1,j]*LHBAR_aa[b,b1]
	T1aibj[a,i,b,j]             = T2AB[a,i,b1,j]*LFae_a[b,b1]
	Taibj[a,i,b,j]             += T1aibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    ENDDO  b

ENDPARDO i, a, j, b1 

PARDO i, b, i1, b1 

    request HBAR_AJIB_iibb[i1,i,b,b1] 

    DO j
    DO a

    if a < b 
	request VCACT2AB[a,i1,b1,j] 
	Taibj[a,i,b,j]              = HBAR_AJIB_iibb[i1,i,b,b1]*VCACT2AB[a,i1,b1,j]
	T1aibj[b,j,a,i]             = taibj[a,i,b,j]  
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
	prepare VCHACT2AB[b,j,a,i] += T1aibj[b,j,a,i]
    endif 

    if a == b 
	request VCACT2AB[a,i1,b1,j] 
	Taibj[a,i,b,j]              = HBAR_AJIB_iibb[i1,i,b,b1]*VCACT2AB[a,i1,b1,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    endif 

    ENDDO a
    ENDDO j

ENDPARDO i, b, i1, b1 

PARDO i, a, j1, b1  

    request VCACT2AB[a,i,b1,j1] 
    request HBAR_AJIB_aabb[j1,b1,a,i] 

    DO j
    DO b

    if a < b 
	request VCACT2AA[b,j,b1,j1] 
	request HBAR_AJIB_aaaa[j1,b1,b,j] 
	T1aibj[a,i,b,j]             = HBAR_AJIB_aaaa[j1,b1,b,j]*VCACT2AB[a,i,b1,j1]
	T2aibj[a,i,b,j]             = HBAR_AJIB_aabb[j1,b1,a,i]*VCACT2AA[b,j,b1,j1]
	Taibj[a,i,b,j]              = T1aibj[a,i,b,j]
	Taibj[a,i,b,j]             += T2aibj[a,i,b,j]
	T3aibj[b,j,a,i]             = Taibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
	prepare VCHACT2AB[b,j,a,i] += T3aibj[b,j,a,i]
    endif 

    if a == b 
	request VCACT2AA[b,j,b1,j1] 
	request HBAR_AJIB_aaaa[j1,b1,b,j] 
	T1aibj[a,i,b,j]             = HBAR_AJIB_aaaa[j1,b1,b,j]*VCACT2AB[a,i,b1,j1]
	T2aibj[a,i,b,j]             = HBAR_AJIB_aabb[j1,b1,a,i]*VCACT2AA[b,j,b1,j1]
	Taibj[a,i,b,j]              = T1aibj[a,i,b,j]
	Taibj[a,i,b,j]             += T2aibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    endif 

    enddo b
    enddo j

ENDPARDO i, a, j1, b1 

PARDO j, b, a, i1  

    request VCACT2AB[a,i1,b,j] 
    request T2AB[a,i1,b,j] 

    DO i
	Taibj[a,i,b,j]              = VCACT2AB[a,i1,b,j]*LHBAR_ii[i1,i]
	T1aibj[a,i,b,j]             = T2AB[a,i1,b,j]*LFmi_a[i1,i]
	Taibj[a,i,b,j]             += T1aibj[a,i,b,j]
	Taibj[a,i,b,j]             *= -1.0  
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    ENDDO i

ENDPARDO j, b, a, i1  

PARDO i1, j1, a, b 
WHERE a < b 

    request VCACT2AB[a,i1,b,j1] 
    request T2AB[a,i1,b,j1] 
    t2aibj[a,i1,b,j1]  = T2AB[a,i1,b,j1]
    t3aibj[a,i1,b,j1]  = St1a[a,i1]^St1b[b,j1]
    t2aibj[a,i1,b,j1] += t3aibj[a,i1,b,j1]

    DO i
    DO j
	request HBAR_iijj[i1,i,j1,j] 
	GET                           Niijj[i,i1,j,j1]
	Taibj[a,i,b,j]              = HBAR_iijj[i1,i,j1,j]*VCACT2AB[a,i1,b,j1]
	T1aibj[a,i,b,j]             = Niijj[i,i1,j,j1]*t2aibj[a,i1,b,j1]
	Taibj[a,i,b,j]             += T1aibj[a,i,b,j]
	T3aibj[b,j,a,i]             = Taibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
	prepare VCHACT2AB[b,j,a,i] += T3aibj[b,j,a,i]
    ENDDO j
    ENDDO i

ENDPARDO i1, j1, a, b  

PARDO i1, j1, a, b 
WHERE a == b 

    request VCACT2AB[a,i1,b,j1] 
    request T2AB[a,i1,b,j1] 
    t2aibj[a,i1,b,j1]  = T2AB[a,i1,b,j1]
    t3aibj[a,i1,b,j1]  = St1a[a,i1]^St1b[b,j1]
    t2aibj[a,i1,b,j1] += t3aibj[a,i1,b,j1]

    DO i
    DO j
	request HBAR_iijj[i1,i,j1,j] 
	GET                           Niijj[i,i1,j,j1]
	Taibj[a,i,b,j]              = HBAR_iijj[i1,i,j1,j]*VCACT2AB[a,i1,b,j1]
	T1aibj[a,i,b,j]             = Niijj[i,i1,j,j1]*t2aibj[a,i1,b,j1]
	Taibj[a,i,b,j]             += T1aibj[a,i,b,j]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    ENDDO j
    ENDDO i

ENDPARDO i1, j1, a, b  

PARDO j1, i, a, b  

    request VCACT2AB[a,i,b,j1] 
    request T2AB[a,i,b,j1] 

    DO j
	Taibj[a,i,b,j]              = VCACT2AB[a,i,b,j1]*LHBAR_ii[j1,j]
	T1aibj[a,i,b,j]             = T2AB[a,i,b,j1]*LFmi_b[j1,j]
	Taibj[a,i,b,j]             += T1aibj[a,i,b,j]
	Taibj[a,i,b,j]             *= -1.0  
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    ENDDO j

ENDPARDO j1, i, a, b  

#  PART       <2|HT1|0>

PARDO a, i, j

    allocate Laijj[a,i,*,j]

    DO j1
	request HBAR_IAJK_aabb[j1,j,a,i] 
	Laijj[a,i,j1,j] = HBAR_IAJK_aabb[j1,j,a,i]
    ENDDO j1

    DO b
	Taibj[a,i,b,j]=0.0
	DO j1
	    GET               VCACT1A[b,j1]
	    T1aibj[a,i,b,j] = Laijj[a,i,j1,j]*VCACT1A[b,j1]
	    Taibj[a,i,b,j] -= T1aibj[a,i,b,j]
	ENDDO j1
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    ENDDO b

    deallocate Laijj[a,i,*,j]

ENDPARDO a, i, j

PARDO a, i, j

    allocate Laijj[a,i,*,j]

    DO j1
	request Njjai[j1,a,i,j] 
	Laijj[a,i,j1,j] = Njjai[j1,a,i,j]
    ENDDO j1

    DO b
	Taibj[a,i,b,j]=0.0
	DO j1
	    T1aibj[a,i,b,j] = Laijj[a,i,j1,j]*ST1A[b,j1]
	    Taibj[a,i,b,j] -= T1aibj[a,i,b,j]
	ENDDO j1
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    ENDDO b

    deallocate Laijj[a,i,*,j]

ENDPARDO a, i, j

PARDO i, j, b

    allocate Liibj[*,i,b,j]
    allocate L2iibj[*,i,b,j]

    DO i1
	request HBAR_IAJK_aabb[i1,i,b,j] 
	request Niibj[i1,b,i,j]   
	Liibj[i1,i,b,j]  = HBAR_IAJK_aabb[i1,i,b,j]
	L2iibj[i1,i,b,j] = Niibj[i1,b,i,j]
    ENDDO i1

    DO a
	Taibj[a,i,b,j]=0.0
	DO i1
	    GET               VCACT1A[a,i1]
	    T1aibj[a,i,b,j] = Liibj[i1,i,b,j]*VCACT1A[a,i1]
	    Taibj[a,i,b,j] -= T1aibj[a,i,b,j]
	    T1aibj[a,i,b,j] = L2iibj[i1,i,b,j]*ST1A[a,i1]
	    Taibj[a,i,b,j] -= T1aibj[a,i,b,j]
	ENDDO i1
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j]
    ENDDO a

    deallocate Liibj[*,i,b,j]
    deallocate L2iibj[*,i,b,j]

ENDPARDO i, j, b

PARDO a, b1, i

    allocate Lbbai[b1,*,a,i]

    DO b
	request HBAR_ABCI_aabb[b1,b,a,i] 
	Lbbai[b1,b,a,i] = HBAR_ABCI_aabb[b1,b,a,i]
    ENDDO b

    DO j
	Taibj[a,i,b1,j]=0.0
	DO b
	    GET               VCACT1A[b,j]
	    T1aibj[a,i,b1,j] = Lbbai[b1,b,a,i]*VCACT1A[b,j]
	    Taibj[a,i,b1,j] += T1aibj[a,i,b1,j]
	ENDDO b
	prepare VCHACT2AB[a,i,b1,j] += Taibj[a,i,b1,j]
    ENDDO j

    deallocate Lbbai[b1,*,a,i]

ENDPARDO a, b1, i

PARDO a1, b, j

    allocate Laabj[a1,*,b,j]

    DO a
	request HBAR_ABCI_aabb[a1,a,b,j] 
	Laabj[a1,a,b,j] = HBAR_ABCI_aabb[a1,a,b,j]
    ENDDO a

    DO i
	Taibj[a1,i,b,j] = 0.0
	DO a
	    GET               VCACT1A[a,i]
	    T1aibj[a1,i,b,j] = Laabj[a1,a,b,j]*VCACT1A[a,i]
	    Taibj[a1,i,b,j] += T1aibj[a1,i,b,j]
	ENDDO a
	prepare VCHACT2AB[a1,i,b,j] += Taibj[a1,i,b,j]
    ENDDO i

    deallocate Laabj[a1,*,b,j]

ENDPARDO a1, b, j

ENDPROC R2ABLIN_NEW

PROC AOLADDER_NEW  

#    ------------------------------------------------------------------------ 
#server_barrier 

PARDO lambda, i, i1  

    allocate Lxiai[lambda,i,*,i1] 

    DO a1 
	request T1AO_aa[lambda,i,a1,i1]   
	Lxiai[lambda,i,a1,i1] = T1AO_aa[lambda,i,a1,i1] 
    ENDDO a1 

    DO sigma 
	ZZaa[lambda,i,sigma,i1]  = 0.0 
	prepare T2AO_aa[lambda,i,sigma,i1] = ZZaa[lambda,i,sigma,i1]
	DO a1 
	    Txixi[lambda,i,sigma,i1] = Lxiai[lambda,i,a1,i1]*ca[sigma,a1]
	    ZZaa[lambda,i,sigma,i1] += Txixi[lambda,i,sigma,i1]  
	ENDDO a1 
	prepare TAO_aa[lambda,i,sigma,i1] = ZZaa[lambda,i,sigma,i1]
    ENDDO sigma 

    deallocate Lxiai[lambda,i,*,i1] 

ENDPARDO lambda, i, i1   

PARDO lambda, i, j  

    allocate Lxibj[lambda,i,*,j] 

    DO b 
	request T1AO_ab[lambda,i,b,j]   
	Lxibj[lambda,i,b,j] = T1AO_ab[lambda,i,b,j] 
    ENDDO b 

    DO sigma 
	ZZab[lambda,i,sigma,j]  = 0.0 
	prepare T2AO_ab[lambda,i,sigma,j] = ZZab[lambda,i,sigma,j]
	DO b 
	    Txixj[lambda,i,sigma,j] = Lxibj[lambda,i,b,j]*ca[sigma,b]
	    ZZab[lambda,i,sigma,j] += Txixj[lambda,i,sigma,j]  
	ENDDO b 
	prepare TAO_ab[lambda,i,sigma,j] = ZZab[lambda,i,sigma,j]
    ENDDO sigma 

    deallocate Lxibj[lambda,i,*,j] 

ENDPARDO lambda, i, j   

server_barrier   

#    Contract AOINT with half back transformed Amplitudes 
#    ----------------------------------------------------    

PARDO mu, nu, lambda, sigma

    execute compute_integral_batch aoint[lambda,mu,sigma,nu]

    DO i
    DO i1
    if i < i1 
	request TAO_aa[lambda,i,sigma,i1] 
	Yaa[mu,i,nu,i1]              = aoint[lambda,mu,sigma,nu]*TAO_aa[lambda,i,sigma,i1]
	Y1aa[nu,i1,mu,i]             = Yaa[mu,i,nu,i1]  
	prepare T2AO_aa[mu,i,nu,i1] += Yaa[mu,i,nu,i1]
	prepare T2AO_aa[nu,i1,mu,i] += Y1aa[nu,i1,mu,i]
    endif 
    if i == i1 
	request TAO_aa[lambda,i,sigma,i1] 
	Yaa[mu,i,nu,i1]              = aoint[lambda,mu,sigma,nu]*TAO_aa[lambda,i,sigma,i1]
	prepare T2AO_aa[mu,i,nu,i1] += Yaa[mu,i,nu,i1]
    endif 
    ENDDO i1
    ENDDO i

    DO i
    DO i1
    if i < i1 
	request TAO_ab[lambda,i,sigma,i1] 
	Yaa[mu,i,nu,i1]              = aoint[lambda,mu,sigma,nu]*TAO_ab[lambda,i,sigma,i1]
	Y1aa[nu,i1,mu,i]             = Yaa[mu,i,nu,i1]  
	prepare T2AO_ab[mu,i,nu,i1] += Yaa[mu,i,nu,i1]
	prepare T2AO_ab[nu,i1,mu,i] += Y1aa[nu,i1,mu,i]
    endif 
    if i == i1 
	request TAO_ab[lambda,i,sigma,i1] 
	Yaa[mu,i,nu,i1]              = aoint[lambda,mu,sigma,nu]*TAO_ab[lambda,i,sigma,i1]
	prepare T2AO_ab[mu,i,nu,i1] += Yaa[mu,i,nu,i1]
    endif 
    ENDDO i1
    ENDDO i

ENDPARDO mu, nu, lambda, sigma

server_barrier  

#    Perform final transformation 
#    ---------------------------- 

PARDO nu, i, i1
    allocate LLaa[*,i,nu,i1]
    DO mu
	request T2AO_aa[mu,i,nu,i1] 
	DO a
	    Taixi[a,i,nu,i1] = T2AO_aa[mu,i,nu,i1]*ca[mu,a]
	    LLaa[a,i,nu,i1] += Taixi[a,i,nu,i1]
	ENDDO a
    ENDDO mu
    DO a
	LLaa[a,i,nu,i1] *= 0.5
	DO a1
	    Taiai[a,i,a1,i1]             = LLaa[a,i,nu,i1]*ca[nu,a1]
	    prepare VCHACT2AA[a,i,a1,i1] += Taiai[a,i,a1,i1] 
	ENDDO a1
    ENDDO a
    deallocate LLaa[*,i,nu,i1]
ENDPARDO nu, i, i1

PARDO nu, i, j
    allocate LLab[*,i,nu,j]
    DO mu
	request T2AO_ab[mu,i,nu,j] 
	DO a
	    Taixj[a,i,nu,j] = T2AO_ab[mu,i,nu,j]*ca[mu,a]
	    LLab[a,i,nu,j] += Taixj[a,i,nu,j]
	ENDDO a
    ENDDO mu
    DO a
    DO b
	Taibj[a,i,b,j]             = LLab[a,i,nu,j]*ca[nu,b]
	prepare VCHACT2AB[a,i,b,j] += Taibj[a,i,b,j] 
    ENDDO b
    ENDDO a
    deallocate LLab[*,i,nu,j]
ENDPARDO nu, i, j

#    ------------------------------------------------------------------------ 

ENDPROC AOLADDER_NEW  
#    -------------------- 

#    ------------------------------------------------------------------------ 

PROC R1ANEW
#     ----------- 

PARDO a, i, i1  
#     
    GET                  VCACT1A[a,i1]
    tai[a,i]           = VCACT1A[a,i1]*LHBAR_ii[i1,i]
    tai[a,i]          *= -1.0
    PUT VCHACT1A[a,i] += tai[a,i]

ENDPARDO a, i, i1 

PARDO a, i, b, j  
#     
    request HBAR_AJIB_aabb[j,b,a,i] 
    GET                  VCACT1A[b,j]
    tai[a,i]           = HBAR_AJIB_aabb[j,b,a,i]*VCACT1A[b,j]
    PUT VCHACT1A[a,i] += tai[a,i]

ENDPARDO a, i, b, j 

PARDO a, i, b, j  

    request VCACT2AB[a,i,b,j] 
    tai[a,i]           = VCACT2AB[a,i,b,j]*LHBAR_jb[j,b]
    PUT VCHACT1A[a,i] += tai[a,i]

ENDPARDO a, i, b, j 

PARDO i, a, a1  
#     
    GET                  VCACT1A[a1,i]
    tai[a,i]           = VCACT1A[a1,i]*LHBAR_aa[a,a1]
    PUT VCHACT1A[a,i] += tai[a,i]

ENDPARDO i, a, a1  

PARDO a, i, a1, i1  
#     
    request HBAR_AJIB_aaaa[i1,a1,a,i] 
    GET                  VCACT1A[a1,i1]
    tai[a,i]           = HBAR_AJIB_aaaa[i1,a1,a,i]*VCACT1A[a1,i1]
    PUT VCHACT1A[a,i] += tai[a,i]

ENDPARDO a, i, a1, i1 

PARDO a, i, a1, i1  

    request VCACT2AA[a,i,a1,i1] 
    tai[a,i]           = VCACT2AA[a,i,a1,i1]*LHBAR_ia[i1,a1]
    PUT VCHACT1A[a,i] += tai[a,i]

ENDPARDO a, i, a1, i1 

#     <ai|WT2|0>

PARDO a1, a2, i1

    allocate Laiai[a1,*,a2,i1]

    if a1 == a2

	DO i
	    request VCACT2AA[a1,i,a2,i1] 
	    Laiai[a1,i,a2,i1] = VCACT2AA[a1,i,a2,i1]
	ENDDO i

	DO a
	    request HBAR_AIBC_aaaa[a,a1,i1,a2] 
	    DO i
		tai[a,i]  = HBAR_AIBC_aaaa[a,a1,i1,a2]*Laiai[a1,i,a2,i1]
		tai[a,i] *= 0.5
		PUT VCHACT1A[a,i] += tai[a,i]
	    ENDDO i
	ENDDO a

    endif

    if a1 < a2

    DO i
	request VCACT2AA[a1,i,a2,i1] 
	Laiai[a1,i,a2,i1] = VCACT2AA[a1,i,a2,i1]
    ENDDO i

    DO a
	request HBAR_AIBC_aaaa[a,a1,i1,a2] 
	DO i
	    tai[a,i]  = HBAR_AIBC_aaaa[a,a1,i1,a2]*Laiai[a1,i,a2,i1]
	    PUT VCHACT1A[a,i] += tai[a,i]
	ENDDO i
    ENDDO a

    endif

    deallocate Laiai[a1,*,a2,i1]

ENDPARDO a1, a2, i1


PARDO a1, i1, i2

    allocate Laiii[a1,i2,*,i1]

    if i1 == i2

	DO i
	    request HBAR_JKIA_aaaa[i1,i,i2,a1] 
	    Laiii[a1,i2,i,i1] = HBAR_JKIA_aaaa[i1,i,i2,a1]
	ENDDO i

	DO a
	    request VCACT2AA[a,i1,a1,i2] 
	    DO i
		tai[a,i]  = Laiii[a1,i2,i,i1]*VCACT2AA[a,i1,a1,i2]
		tai[a,i] *= -0.5
		PUT VCHACT1A[a,i] += tai[a,i]
	    ENDDO i
	ENDDO a

    endif

    if i1 < i2

	DO i
	    request HBAR_JKIA_aaaa[i1,i,i2,a1] 
	    Laiii[a1,i2,i,i1] = HBAR_JKIA_aaaa[i1,i,i2,a1]
	ENDDO i

	DO a
	    request VCACT2AA[a,i1,a1,i2] 
	    DO i
		tai[a,i]  = Laiii[a1,i2,i,i1]*VCACT2AA[a,i1,a1,i2]
		tai[a,i] *= -1.0
		PUT VCHACT1A[a,i] += tai[a,i]
	    ENDDO i
	ENDDO a

    endif

    deallocate Laiii[a1,i2,*,i1]

ENDPARDO a1, i1, i2

PARDO a1, b, j

    allocate Laibj[a1,*,b,j]

    DO i
	request VCACT2AB[a1,i,b,j] 
	Laibj[a1,i,b,j] = VCACT2AB[a1,i,b,j]
    ENDDO i

    DO a
	request HBAR_AIBC_aabb[a,a1,j,b] 
	DO i
	    tai[a,i]  = HBAR_AIBC_aabb[a,a1,j,b]*Laibj[a1,i,b,j]
	    PUT VCHACT1A[a,i] += tai[a,i]
	ENDDO i
    ENDDO a

    deallocate Laibj[a1,*,b,j]

ENDPARDO a1, b, j

PARDO b, j, i1

    allocate L1iibj[*,i1,b,j]

    DO i
	request HBAR_JKIA_aabb[i1,i,j,b] 
	L1iibj[i,i1,b,j] = HBAR_JKIA_aabb[i1,i,j,b]
    ENDDO i

    DO a
	request VCACT2AB[a,i1,b,j] 
	DO i
	    tai[a,i]  = L1iibj[i,i1,b,j]*VCACT2AB[a,i1,b,j]
	    tai[a,i] *= -1.0
	    PUT VCHACT1A[a,i] += tai[a,i]
	ENDDO i
    ENDDO a

    deallocate L1iibj[*,i1,b,j]

ENDPARDO b, j, i1

ENDPROC R1ANEW

PROC SYMMETRHC_A
server_barrier
pardo a,i,a1,i1
    Taiai[a,i,a1,i1] = 0.0
    put DRNaiai[a,i,a1,i1] = Taiai[a,i,a1,i1]
    put D2RNaiai[a,i,a1,i1] = Taiai[a,i,a1,i1]
endpardo a,i,a1,i1
server_barrier
pardo a,i,a1,i1
    request HB2_aa[ksub,a,i,a1,i1]
    Tk[ksub] = 1.0
    Taiai[a,i,a1,i1] = Tk[ksub]*HB2_aa[ksub,a,i,a1,i1]
    T3aiai[a1,i,a,i1] = 0.0

    if a == a1
	execute anti_symm_v Taiai[a,i,a1,i1]
    endif
    if a < a1
	T3aiai[a1,i,a,i1]  = Taiai[a,i,a1,i1]
	T3aiai[a1,i,a,i1] *= -1.0
    endif

    put DRNaiai[a,i,a1,i1] += Taiai[a,i,a1,i1]
    put DRNaiai[a1,i,a,i1] += T3aiai[a1,i,a,i1]
endpardo a,i,a1,i1
server_barrier
pardo a,i,a1,i1
    get DRNaiai[a,i,a1,i1]
    Taiai[a,i,a1,i1] = DRNaiai[a,i,a1,i1]
    T3aiai[a,i1,a1,i] = 0.0

    if i == i1
	execute anti_symm_o Taiai[a,i,a1,i1]
    endif
    if i < i1
	T3aiai[a,i1,a1,i]  = Taiai[a,i,a1,i1]
	T3aiai[a,i1,a1,i] *= -1.0
    endif

    put D2RNaiai[a,i,a1,i1] += Taiai[a,i,a1,i1]
    put D2RNaiai[a,i1,a1,i] += T3aiai[a,i1,a1,i]

endpardo a,i,a1,i1
server_barrier
pardo a,i,a1,i1
    get D2RNaiai[a,i,a1,i1]
    Tk[ksub] = 1.0
    Tkaiai[ksub,a,i,a1,i1] = Tk[ksub]*D2RNaiai[a,i,a1,i1]
    prepare HB2_aa[ksub,a,i,a1,i1] = Tkaiai[ksub,a,i,a1,i1]
endpardo a,i,a1,i1
server_barrier
delete DRNaiai
delete D2RNaiai
server_barrier
ENDPROC SYMMETRHC_A

PROC place_HB
server_barrier
Tk[ksub] = 1.0
pardo a,i
    get VCHACT1A[a,i]
    Tkai[ksub,a,i] = Tk[ksub]*VCHACT1A[a,i]
    prepare HB1_a[ksub,a,i] = Tkai[ksub,a,i]
endpardo a,i

pardo a,i,a1,i1
    request VCHACT2AA[a,i,a1,i1]
    Tkaiai[ksub,a,i,a1,i1] = Tk[ksub]*VCHACT2AA[a,i,a1,i1]
    prepare HB2_aa[ksub,a,i,a1,i1] = Tkaiai[ksub,a,i,a1,i1]
endpardo a,i,a1,i1

pardo a,i,b,j
    request VCHACT2AB[a,i,b,j]
    Tkaibj[ksub,a,i,b,j] = Tk[ksub]*VCHACT2AB[a,i,b,j]
    prepare HB2_ab[ksub,a,i,b,j] = Tkaibj[ksub,a,i,b,j]
endpardo a,i,b,j
server_barrier
ENDPROC place_HB

#------------------------------------------------------------------------

PROC HB_mult

print "Starting HB multiplication"
server_barrier

call HB_zero

do ksub

    allocate LFmi_a[*,*]
    allocate LFmi_b[*,*]
    allocate LFae_a[*,*]

    call VCHACT_ZERO
    call place_VCACT

    call FACTORS_NEW
    server_barrier

    call AOLADDER_NEW
    call R2ABLIN_NEW # OK
    call R2AALIN_NEW # OK
    call R1ANEW # OK

    server_barrier

    call SYMMETRHC_A

    call place_HB
    server_barrier
    delete Fae_a
    delete Fmi_a
    delete Fmi_b
    deallocate LFae_a[*,*]
    deallocate LFmi_a[*,*]
    deallocate LFmi_b[*,*]
    server_barrier

enddo ksub

server_barrier

ENDPROC HB_mult

#------------------------------------------------------------------------

PROC BHB_mult
#
allocate LGmat[*,*]
print "Starting BHB mult"
server_barrier
do ksub
do ksub1
    LGmat[ksub,ksub1] = 0.0
enddo ksub1
enddo ksub
pardo ksub,ksub1
    Tkk[ksub,ksub1] = 0.0
    prepare Gmat[ksub,ksub1] = Tkk[ksub,ksub1]
endpardo ksub,ksub1
server_barrier
#
do ksub
    pardo a,i
	request HB1_a[ksub,a,i]
	Tkai[ksub,a,i] = HB1_a[ksub,a,i]
	do ksub1
	    request RB1_a[ksub1,a,i]
	    Tkk[ksub1,ksub] = RB1_a[ksub1,a,i]*Tkai[ksub,a,i]
	    Tkk[ksub1,ksub] *= 2.0
	    LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
	enddo ksub1
    endpardo a,i
#
    pardo a,i,a1,i1
    where a < a1
    where i < i1
	request HB2_aa[ksub,a,i,a1,i1]
	Tkaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]
	do ksub1
	    request RB2_aa[ksub1,a,i,a1,i1]
	    Tkk[ksub1,ksub] = RB2_aa[ksub1,a,i,a1,i1]*Tkaiai[ksub,a,i,a1,i1]
	    Tkk[ksub1,ksub] *= 2.0
	    LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
	enddo ksub1
    endpardo a,i,a1,i1
#
    pardo a,i,a1,i1
    where a < a1
    where i == i1
	request HB2_aa[ksub,a,i,a1,i1]
	Tkaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]
	do ksub1
	    request RB2_aa[ksub1,a,i,a1,i1]
	    Tkk[ksub1,ksub] = RB2_aa[ksub1,a,i,a1,i1]*Tkaiai[ksub,a,i,a1,i1]
	    LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
	enddo ksub1
    endpardo a,i,a1,i1
#
    pardo a,i,a1,i1
    where a == a1
    where i < i1
	request HB2_aa[ksub,a,i,a1,i1]
	Tkaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]
	do ksub1
	    request RB2_aa[ksub1,a,i,a1,i1]
	    Tkk[ksub1,ksub] = RB2_aa[ksub1,a,i,a1,i1]*Tkaiai[ksub,a,i,a1,i1]
	    LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
	enddo ksub1
    endpardo a,i,a1,i1
#
    pardo a,i,a1,i1
    where a == a1
    where i == i1
	request HB2_aa[ksub,a,i,a1,i1]
	Tkaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]
	do ksub1
	    request RB2_aa[ksub1,a,i,a1,i1]
	    Tkk[ksub1,ksub] = RB2_aa[ksub1,a,i,a1,i1]*Tkaiai[ksub,a,i,a1,i1]
	    Tkk[ksub1,ksub] *= 0.5
	    LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
	enddo ksub1
    endpardo a,i,a1,i1
#
#
    pardo a,i,b,j
	request HB2_ab[ksub,a,i,b,j]
	Tkaibj[ksub,a,i,b,j] = HB2_ab[ksub,a,i,b,j]
	do ksub1
	    request RB2_ab[ksub1,a,i,b,j]
	    Tkk[ksub1,ksub] = RB2_ab[ksub1,a,i,b,j]*Tkaibj[ksub,a,i,b,j]
	    LGmat[ksub1,ksub] += Tkk[ksub1,ksub]
	enddo ksub1
    endpardo a,i,b,j
enddo ksub
server_barrier
#
do ksub
do ksub1
    Tkk[ksub1,ksub] = LGmat[ksub1,ksub]
    prepare Gmat[ksub1,ksub] += LGmat[ksub1,ksub]
enddo ksub1
enddo ksub
#
server_barrier
deallocate LGmat
server_barrier
#
ENDPROC BHB_mult

PROC form_G

call HB_mult

call BHB_mult

### JNB debug - norms
#print " "
#print "HB permutational symmetry"
#print "-- P(i/i)"
#do ksub
#    Rnorm[ksub] = 0.0
#    normS = 0.0
#    pardo a,i,a1,i1
#        request HB2_aa[ksub,a,i,a1,i1]
#        request HB2_aa[ksub,a,i1,a1,i]
#	T2kaiai[ksub,a,i,a1,i1] = 1.0
#	Tkaiai[ksub,a,i,a1,i1]  = HB2_aa[ksub,a,i,a1,i1]
#	T1kaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a,i1,a1,i]
#	Tkaiai[ksub,a,i,a1,i1] += T1kaiai[ksub,a,i,a1,i1]
#	normT  = Tkaiai[ksub,a,i,a1,i1]*T2kaiai[ksub,a,i,a1,i1]
#	normS += normT
#    endpardo a,i,a1,i1
#    server_barrier
#    norm2 = 0.0
#    collective norm2 += normS
#    Rnorm[ksub] = norm2
#enddo ksub
#print Rnorm
#print "-- P(a/a)"
#do ksub
#    Rnorm[ksub] = 0.0
#    normS = 0.0
#    pardo a,i,a1,i1
#        request HB2_aa[ksub,a,i,a1,i1]
#        request HB2_aa[ksub,a1,i,a,i1]
#	T2kaiai[ksub,a,i,a1,i1] = 1.0
#	Tkaiai[ksub,a,i,a1,i1]  = HB2_aa[ksub,a,i,a1,i1]
#	T1kaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a1,i,a,i1]
#	Tkaiai[ksub,a,i,a1,i1] += T1kaiai[ksub,a,i,a1,i1]
#	normT  = Tkaiai[ksub,a,i,a1,i1]*T2kaiai[ksub,a,i,a1,i1]
#	normS += normT
#    endpardo a,i,a1,i1
#    server_barrier
#    norm2 = 0.0
#    collective norm2 += normS
#    Rnorm[ksub] = norm2
#enddo ksub
#print Rnorm
#print "-- P(ai/ai)"
#do ksub
#    Rnorm[ksub] = 0.0
#    normS = 0.0
#    pardo a,i,a1,i1
#        request HB2_aa[ksub,a,i,a1,i1]
#        request HB2_aa[ksub,a1,i1,a,i]
#	T2kaiai[ksub,a,i,a1,i1] = 1.0
#	Tkaiai[ksub,a,i,a1,i1]  = HB2_aa[ksub,a,i,a1,i1]
#	T1kaiai[ksub,a,i,a1,i1] = HB2_aa[ksub,a1,i1,a,i]
#	Tkaiai[ksub,a,i,a1,i1] += T1kaiai[ksub,a,i,a1,i1]
#	normT  = Tkaiai[ksub,a,i,a1,i1]*T2kaiai[ksub,a,i,a1,i1]
#	normS += normT
#    endpardo a,i,a1,i1
#    server_barrier
#    norm2 = 0.0
#    collective norm2 += normS
#    Rnorm[ksub] = norm2
#enddo ksub
#print Rnorm

ENDPROC form_G

#------------------------------------------------------------------------

PROC diag_G
#
server_barrier

execute get_my_rank rank
myrank = (int)rank
if myrank == root
do ksub
# for the DGGEV you have GR=lBR so B has to be = the sum of the norms.  in RHF
# eom this is 3... or 3*G equivalently
    do ksub1
    where ksub == ksub1
    etemp  = S1overlap[ksub,ksub1]
    etemp += S2aboverlap[ksub,ksub1]
    etemp += S2aaoverlap[ksub,ksub1]
    scale = (etemp)**(-1.0)
    enddo ksub1
do ksub1
    request Gmat[ksub1,ksub]
    Tkk[ksub1,ksub] = Gmat[ksub1,ksub]
#    Tkk[ksub1,ksub] *= 0.5
    Tkk[ksub1,ksub] *= scale
    GSmat[ksub1,ksub] = Tkk[ksub1,ksub]
enddo ksub1
enddo ksub

#print GSmat

    do ksub
    do ksub1
        SAlphaR[ksub,ksub1] = 0.0
        SAlphaL[ksub,ksub1] = 0.0
    enddo ksub1

        SEk[ksub] = 0.0
    enddo ksub

execute gen_eigen_calc GSmat SAlphaL SAlphaR SEk
#print SalphaR

do ksub
    Sek[ksub] *= 0.5
enddo ksub

do kstate
    SEk0[kstate] = SEk[kstate]
enddo kstate
print "-- EOM-CCSD excited state energies --"
print SEk0

print SEk

endif
broadcast_from root SAlphaL
broadcast_from root SAlphaR
broadcast_from root SEk
broadcast_from root SEk0

server_barrier
#
ENDPROC diag_G

#------------------------------------------------------------------------

PROC move_by_one_RK1
#
server_barrier
pardo a,i
    do kstate
        request R1k1_a[kstate,a,i]
        prepare R0k1_a[kstate,a,i] = R1k1_a[kstate,a,i]
    enddo kstate
endpardo a,i
server_barrier
#
ENDPROC move_by_one_RK1

PROC move_by_one_RK2aa
#
server_barrier
pardo a,i,a1,i1 
    do kstate
        request R1k2_aa[kstate,a,i,a1,i1]
        prepare R0k2_aa[kstate,a,i,a1,i1] = R1k2_aa[kstate,a,i,a1,i1]
    enddo kstate
endpardo a,i,a1,i1
server_barrier
#
ENDPROC move_by_one_RK2aa

PROC move_by_one_RK2ab
#
server_barrier
pardo a,i,b,j 
    do kstate
        request R1k2_ab[kstate,a,i,b,j]
        prepare R0k2_ab[kstate,a,i,b,j] = R1k2_ab[kstate,a,i,b,j]
    enddo kstate
endpardo a,i,b,j
server_barrier
#
ENDPROC move_by_one_RK2ab

PROC form_new_RK1
#
# zero partition 1
server_barrier
pardo a,i
    do kstate
        Tkai[kstate,a,i] = 0.0
        prepare R1k1_a[kstate,a,i] = Tkai[kstate,a,i]
    enddo kstate
endpardo a,i
server_barrier
#
do kstate
    pardo a,i
    Tkai[kstate,a,i] = 0.0
    do ksub
        request RB1_a[ksub,a,i]
        T1kai[kstate,a,i] = RB1_a[ksub,a,i]*SalphaR[ksub,kstate]
        Tkai[kstate,a,i] += T1kai[kstate,a,i]
    enddo ksub
    prepare R1k1_a[kstate,a,i] = Tkai[kstate,a,i]
    endpardo a,i
enddo kstate
#
server_barrier
#
ENDPROC form_new_RK1

PROC form_new_RK2aa
#
# zero partition 1
server_barrier
pardo a,i,a1,i1
    do kstate
        Tkaiai[kstate,a,i,a1,i1] = 0.0
        prepare R1k2_aa[kstate,a,i,a1,i1] = Tkaiai[kstate,a,i,a1,i1]
    enddo kstate
endpardo a,i,a1,i1
server_barrier
#
do kstate
    pardo a,i,a1,i1
    Tkaiai[kstate,a,i,a1,i1] = 0.0
    do ksub
        request RB2_aa[ksub,a,i,a1,i1]
        T1kaiai[kstate,a,i,a1,i1] = RB2_aa[ksub,a,i,a1,i1]*SalphaR[ksub,kstate]
        Tkaiai[kstate,a,i,a1,i1] += T1kaiai[kstate,a,i,a1,i1]
    enddo ksub
    prepare R1k2_aa[kstate,a,i,a1,i1] = Tkaiai[kstate,a,i,a1,i1]
    endpardo a,i,a1,i1
enddo kstate
#
server_barrier
#
ENDPROC form_new_RK2aa

PROC form_new_RK2ab
#
# zero partition 1
server_barrier
pardo a,i,b,j
    do kstate
        Tkaibj[kstate,a,i,b,j] = 0.0
        prepare R1k2_ab[kstate,a,i,b,j] = Tkaibj[kstate,a,i,b,j]
    enddo kstate
endpardo a,i,b,j
server_barrier
#
do kstate
    pardo a,i,b,j
    Tkaibj[kstate,a,i,b,j] = 0.0
    do ksub
        request RB2_ab[ksub,a,i,b,j]
        T1kaibj[kstate,a,i,b,j] = RB2_ab[ksub,a,i,b,j]*SalphaR[ksub,kstate]
        Tkaibj[kstate,a,i,b,j] += T1kaibj[kstate,a,i,b,j]
    enddo ksub
    prepare R1k2_ab[kstate,a,i,b,j] = Tkaibj[kstate,a,i,b,j]
    endpardo a,i,b,j
enddo kstate
#
server_barrier
#
ENDPROC form_new_RK2ab

PROC form_residual_R1
#
server_barrier
pardo a,i

    get VCONV1A[a,i]

do kstate
    etemp = SEk[kstate]
    etemp *= -1.0
    Tkai[kstate,a,i] = 0.0

    do ksub
        request HB1_a[ksub,a,i]
        request RB1_a[ksub,a,i]

# a*HB
        T1kai[kstate,a,i] = HB1_a[ksub,a,i]*SalphaR[ksub,kstate]

        Tkai[kstate,a,i] += T1kai[kstate,a,i]
# a*E*B
        T2kai[kstate,a,i]  = RB1_a[ksub,a,i]*SalphaR[ksub,kstate]
        T2kai[kstate,a,i] *= etemp

        Tkai[kstate,a,i] += T2kai[kstate,a,i]
    enddo ksub

    Tk[kstate] = 1.0
    Tai[a,i]   = 1.0

    T3kai[kstate,a,i] = Tk[kstate]^VCONV1A[a,i]
    T4kai[kstate,a,i] = etemp
    T3kai[kstate,a,i] += T4kai[kstate,a,i]

    execute invert_diagonal Tkai[kstate,a,i] T3kai[kstate,a,i]
    Tkai[kstate,a,i] *= -1.0
    prepare cRk1_a[kstate,a,i] = Tkai[kstate,a,i]

enddo kstate
endpardo a,i
server_barrier
#
ENDPROC form_residual_R1

PROC form_residual_R2aa
#
server_barrier
pardo a,i,a1,i1

    request VCONV2AA[a,i,a1,i1]

do kstate
    etemp = SEk[kstate]
    etemp *= -1.0
    Tkaiai[kstate,a,i,a1,i1] = 0.0

    do ksub
        request HB2_aa[ksub,a,i,a1,i1]
        request RB2_aa[ksub,a,i,a1,i1]

# a*HB
        T1kaiai[kstate,a,i,a1,i1] = HB2_aa[ksub,a,i,a1,i1]*SalphaR[ksub,kstate]

        Tkaiai[kstate,a,i,a1,i1] += T1kaiai[kstate,a,i,a1,i1]
# a*E*B
        T2kaiai[kstate,a,i,a1,i1]  = RB2_aa[ksub,a,i,a1,i1]*SalphaR[ksub,kstate]
        T2kaiai[kstate,a,i,a1,i1] *= etemp

        Tkaiai[kstate,a,i,a1,i1] += T2kaiai[kstate,a,i,a1,i1]
    enddo ksub

    Tk[kstate] = 1.0
    Taiai[a,i,a1,i1]   = 1.0

    T3kaiai[kstate,a,i,a1,i1] = Tk[kstate]^VCONV2AA[a,i,a1,i1]
    T4kaiai[kstate,a,i,a1,i1] = etemp
    T3kaiai[kstate,a,i,a1,i1] += T4kaiai[kstate,a,i,a1,i1]

    execute invert_diagonal_asym Tkaiai[kstate,a,i,a1,i1] T3kaiai[kstate,a,i,a1,i1]
    Tkaiai[kstate,a,i,a1,i1] *= -1.0
    prepare cRk2_aa[kstate,a,i,a1,i1] = Tkaiai[kstate,a,i,a1,i1]

enddo kstate
endpardo a,i,a1,i1
server_barrier
if iguess == 0
if kiter == 1
    do kstate
    pardo a,i,a1,i1
        request cRk2_aa[kstate,a,i,a1,i1]
	Tkaiai[kstate,a,i,a1,i1] = cRk2_aa[kstate,a,i,a1,i1]
	prepare R0k2_aa[kstate,a,i,a1,i1] = Tkaiai[kstate,a,i,a1,i1]
    endpardo a,i,a1,i1
    enddo kstate
endif
endif
server_barrier
#
ENDPROC form_residual_R2aa

PROC form_residual_R2ab
#
server_barrier
pardo a,i,b,j

    request VCONV2AB[a,i,b,j]

do kstate
    etemp = SEk[kstate]
    etemp *= -1.0
    Tkaibj[kstate,a,i,b,j] = 0.0

    do ksub
        request HB2_ab[ksub,a,i,b,j]
        request RB2_ab[ksub,a,i,b,j]

# a*HB
        T1kaibj[kstate,a,i,b,j] = HB2_ab[ksub,a,i,b,j]*SalphaR[ksub,kstate]

        Tkaibj[kstate,a,i,b,j] += T1kaibj[kstate,a,i,b,j]
# a*E*B
        T2kaibj[kstate,a,i,b,j]  = RB2_ab[ksub,a,i,b,j]*SalphaR[ksub,kstate]
        T2kaibj[kstate,a,i,b,j] *= etemp

        Tkaibj[kstate,a,i,b,j] += T2kaibj[kstate,a,i,b,j]
    enddo ksub

    Tk[kstate] = 1.0
    Taibj[a,i,b,j]   = 1.0

    T3kaibj[kstate,a,i,b,j] = Tk[kstate]^VCONV2AB[a,i,b,j]
    T4kaibj[kstate,a,i,b,j] = etemp
    T3kaibj[kstate,a,i,b,j] += T4kaibj[kstate,a,i,b,j]

    execute invert_diagonal Tkaibj[kstate,a,i,b,j] T3kaibj[kstate,a,i,b,j]
    Tkaibj[kstate,a,i,b,j] *= -1.0
    prepare cRk2_ab[kstate,a,i,b,j] = Tkaibj[kstate,a,i,b,j]

enddo kstate
endpardo a,i,b,j
server_barrier
if iguess == 0
if kiter == 1
    do kstate
    pardo a,i,b,j
        request cRk2_ab[kstate,a,i,b,j]
	Tkaibj[kstate,a,i,b,j] = cRk2_ab[kstate,a,i,b,j]
	prepare R0k2_ab[kstate,a,i,b,j] = Tkaibj[kstate,a,i,b,j]
    endpardo a,i,b,j
    enddo kstate
endif
endif
server_barrier
#
ENDPROC form_residual_R2ab

PROC update_RB1
#
#print "updating RB1 vec"
server_barrier
pardo a,i
    allocate contiguous CLRB1_a[1:subspc,a:a,i:i]
    do kstate
        request R1k1_a[kstate,a,i]
        request R0k1_a[kstate,a,i]
        request cRk1_a[kstate,a,i]

# davidson space 1
        kstart = kstate
        CLRB1_a[kstart:kstart,a:a,i:i] = R0k1_a[kstate,a,i]
# davidson space 2
        kstart = kstate + roots
        CLRB1_a[kstart:kstart,a:a,i:i] = R1k1_a[kstate,a,i]
# davidson space 3
        kstart = kstate + 2*roots
        CLRB1_a[kstart:kstart,a:a,i:i] = cRk1_a[kstate,a,i]
    enddo kstate
    do ksub
        Tkai[ksub,a,i] = CLRB1_a[ksub:ksub,a:a,i:i]
        prepare RB1_a[ksub,a,i] = Tkai[ksub,a,i]
    enddo ksub

    deallocate contiguous CLRB1_a[1:subspc,a:a,i:i]
endpardo a,i
server_barrier
#
ENDPROC update_RB1

PROC update_RB2aa
#
#print "updating RB1 vec"
server_barrier
pardo a,i,a1,i1
    allocate contiguous CLRB2_aa[1:subspc,a:a,i:i,a1:a1,i1:i1]
    do kstate
        request R1k2_aa[kstate,a,i,a1,i1]
        request R0k2_aa[kstate,a,i,a1,i1]
        request cRk2_aa[kstate,a,i,a1,i1]

# davidson space 1
        kstart = kstate
        CLRB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = R0k2_aa[kstate,a,i,a1,i1]
# davidson space 2
        kstart = kstate + roots
        CLRB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = R1k2_aa[kstate,a,i,a1,i1]
# davidson space 3
        kstart = kstate + 2*roots
        CLRB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] = cRk2_aa[kstate,a,i,a1,i1]
    enddo kstate
    do ksub
        Tkaiai[ksub,a,i,a1,i1] = CLRB2_aa[ksub:ksub,a:a,i:i,a1:a1,i1:i1]
        prepare RB2_aa[ksub,a,i,a1,i1] = Tkaiai[ksub,a,i,a1,i1]
    enddo ksub

    deallocate contiguous CLRB2_aa[1:subspc,a:a,i:i,a1:a1,i1:i1]
endpardo a,i,a1,i1
server_barrier
#
ENDPROC update_RB2aa

PROC update_RB2ab
#
#print "updating RB1 vec"
server_barrier
pardo a,i,b,j
    allocate contiguous CLRB2_ab[1:subspc,a:a,i:i,b:b,j:j]
    do kstate
        request R1k2_ab[kstate,a,i,b,j]
        request R0k2_ab[kstate,a,i,b,j]
        request cRk2_ab[kstate,a,i,b,j]

# davidson space 1
        kstart = kstate
        CLRB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = R0k2_ab[kstate,a,i,b,j]
# davidson space 2
        kstart = kstate + roots
        CLRB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = R1k2_ab[kstate,a,i,b,j]
# davidson space 3
        kstart = kstate + 2*roots
        CLRB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] = cRk2_ab[kstate,a,i,b,j]
    enddo kstate
    do ksub
        Tkaibj[ksub,a,i,b,j] = CLRB2_ab[ksub:ksub,a:a,i:i,b:b,j:j]
        prepare RB2_ab[ksub,a,i,b,j] = Tkaibj[ksub,a,i,b,j]
    enddo ksub

    deallocate contiguous CLRB2_ab[1:subspc,a:a,i:i,b:b,j:j]
endpardo a,i,b,j
server_barrier
#
ENDPROC update_RB2ab

PROC normalize_RB1
#
server_barrier
do ksub
    normS = 0.0
    pardo a,i
        request RB1_a[ksub,a,i]
        Tkai[ksub,a,i] = RB1_a[ksub,a,i]
        normT  = Tkai[ksub,a,i]*RB1_a[ksub,a,i]
        normS += normT
    endpardo a,i
#
    server_barrier
    norm1 = 0.0
    norm2 = 1.0
    collective norm1 += normS
    if norm1 == 0.0
	norm1 = 1.0
    endif
    norm2 = (norm1)**(-0.5)
    Tk[ksub] = norm2
#
    pardo a,i
        request RB1_a[ksub,a,i]
        Tai[a,i] = Tk[ksub]*RB1_a[ksub,a,i]
        put DRNai[a,i] = Tai[a,i]
    endpardo a,i
    server_barrier
#
    T1k[ksub] = 1.0
    pardo a,i
        get DRNai[a,i]
        Tkai[ksub,a,i] = T1k[ksub]*DRNai[a,i]
        prepare RB1_a[ksub,a,i] = Tkai[ksub,a,i]
    endpardo a,i
#
enddo ksub
server_barrier
delete DRNai
#
ENDPROC normalize_RB1

PROC normalize_RB2aa
#
server_barrier
do ksub
    server_barrier
    pardo a,i,a1,i1
	Taiai[a,i,a1,i1] = 0.0
	put DRNaiai[a,i,a1,i1] = Taiai[a,i,a1,i1]
	put D2RNaiai[a,i,a1,i1] = Taiai[a,i,a1,i1]
    endpardo a,i,a1,i1
    server_barrier
    pardo a,i,a1,i1
	request RB2_aa[ksub,a,i,a1,i1]
	Tk[ksub] = 1.0
	Taiai[a,i,a1,i1] = Tk[ksub]*RB2_aa[ksub,a,i,a1,i1]
	T3aiai[a1,i,a,i1] = 0.0

	if a == a1
	    execute anti_symm_v Taiai[a,i,a1,i1]
	endif
	if a < a1
	    T3aiai[a1,i,a,i1]  = Taiai[a,i,a1,i1]
	    T3aiai[a1,i,a,i1] *= -1.0
	endif

	put DRNaiai[a,i,a1,i1] += Taiai[a,i,a1,i1]
	put DRNaiai[a1,i,a,i1] += T3aiai[a1,i,a,i1]
    endpardo a,i,a1,i1
    server_barrier
    pardo a,i,a1,i1
	get DRNaiai[a,i,a1,i1]
	Taiai[a,i,a1,i1] = DRNaiai[a,i,a1,i1]
	T3aiai[a,i1,a1,i] = 0.0

	if i == i1
	    execute anti_symm_o Taiai[a,i,a1,i1]
	endif
	if i < i1
	    T3aiai[a,i1,a1,i]  = Taiai[a,i,a1,i1]
	    T3aiai[a,i1,a1,i] *= -1.0
	endif

	put D2RNaiai[a,i,a1,i1] += Taiai[a,i,a1,i1]
	put D2RNaiai[a,i1,a1,i] += T3aiai[a,i1,a1,i]

    endpardo a,i,a1,i1
    server_barrier
    pardo a,i,a1,i1
	get D2RNaiai[a,i,a1,i1]
	Tk[ksub] = 1.0
	Tkaiai[ksub,a,i,a1,i1] = Tk[ksub]*D2RNaiai[a,i,a1,i1]
	prepare RB2_aa[ksub,a,i,a1,i1] = Tkaiai[ksub,a,i,a1,i1]
    endpardo a,i,a1,i1
    server_barrier
    delete DRNaiai
    delete D2RNaiai
####
    normS = 0.0
    pardo a,i,a1,i1
        request RB2_aa[ksub,a,i,a1,i1]
        Tkaiai[ksub,a,i,a1,i1] = RB2_aa[ksub,a,i,a1,i1]
        normT  = Tkaiai[ksub,a,i,a1,i1]*RB2_aa[ksub,a,i,a1,i1]
        normS += normT
    endpardo a,i,a1,i1
#
    server_barrier
    norm1 = 0.0
    norm2 = 1.0
    collective norm1 += normS
    if norm1 == 0.0
	norm1 = 1.0
    endif
    norm2 = (norm1)**(-0.5)
    Tk[ksub] = norm2
#
    pardo a,i,a1,i1
        request RB2_aa[ksub,a,i,a1,i1]
        Taiai[a,i,a1,i1] = Tk[ksub]*RB2_aa[ksub,a,i,a1,i1]
        put DRNaiai[a,i,a1,i1] = Taiai[a,i,a1,i1]
    endpardo a,i,a1,i1
    server_barrier
#
    T1k[ksub] = 1.0
    pardo a,i,a1,i1
        get DRNaiai[a,i,a1,i1]
        Tkaiai[ksub,a,i,a1,i1] = T1k[ksub]*DRNaiai[a,i,a1,i1]
        prepare RB2_aa[ksub,a,i,a1,i1] = Tkaiai[ksub,a,i,a1,i1]
    endpardo a,i,a1,i1
#
enddo ksub
server_barrier
delete DRNaiai
#
ENDPROC normalize_RB2aa

PROC normalize_RB2ab
#
server_barrier
do ksub
    normS = 0.0
    pardo a,i,b,j
        request RB2_ab[ksub,a,i,b,j]
        Tkaibj[ksub,a,i,b,j] = RB2_ab[ksub,a,i,b,j]
        normT  = Tkaibj[ksub,a,i,b,j]*RB2_ab[ksub,a,i,b,j]
        normS += normT
    endpardo a,i,b,j
#
    server_barrier
    norm1 = 0.0
    norm2 = 1.0
    collective norm1 += normS
    if norm1 == 0.0
	norm1 = 1.0
    endif
    norm2 = (norm1)**(-0.5)
    Tk[ksub] = norm2
#
    pardo a,i,b,j
        request RB2_ab[ksub,a,i,b,j]
        Taibj[a,i,b,j] = Tk[ksub]*RB2_ab[ksub,a,i,b,j]
        put DRNaibj[a,i,b,j] = Taibj[a,i,b,j]
    endpardo a,i,b,j
    server_barrier
#
    T1k[ksub] = 1.0
    pardo a,i,b,j
        get DRNaibj[a,i,b,j]
        Tkaibj[ksub,a,i,b,j] = T1k[ksub]*DRNaibj[a,i,b,j]
        prepare RB2_ab[ksub,a,i,b,j] = Tkaibj[ksub,a,i,b,j]
    endpardo a,i,b,j
#
enddo ksub
server_barrier
delete DRNaibj
#
ENDPROC normalize_RB2ab

PROC GS_RB1
# -----------------------------
# Gram-Schmidt orthogonalization
#   x(q) = x(q) - x(j)*<x(q)|x(k)>/<x(k)|x(k)>
#   with update done via numerically stable in place update
# -----------------------------
server_barrier
do qsub
do ksub
where ksub < qsub
#
    overlapS = 0.0
    normS    = 0.0
    Tk[qsub] = 1.0
    T1k[ksub] = 1.0
#
# form overlap and norm
#
    pardo a,i
        request RB1_a[qsub,a,i]
        request RB1_a[ksub,a,i]

        T1ai[a,i] = Tk[qsub]*RB1_a[qsub,a,i]
        T2ai[a,i] = T1k[ksub]*RB1_a[ksub,a,i]

        overlapT  = T1ai[a,i]*T2ai[a,i]
        overlapS += overlapT

        normT  = RB1_a[ksub,a,i]*RB1_a[ksub,a,i]
        normS += normT
#
# store x(k) in temporary distributed
#
        put DRNai[a,i] = T2ai[a,i]
    endpardo a,i
    server_barrier
    norm1 = 0.0
    norm2 = 1.0
    overlap1 = 0.0
    collective overlap1 += overlapS
    collective norm1 += normS
    if norm1 == 0.0
	norm1 = 1.0
    endif
    overlap2 = overlap1/norm1
    overlap2 *= -1.0
    T2k[qsub] = overlap2

# update x(q) inplace
    pardo a,i
        get DRNai[a,i]
        Tkai[qsub,a,i] = T2k[qsub]*DRNai[a,i]
        prepare RB1_a[qsub,a,i] += Tkai[qsub,a,i]
    endpardo a,i
#
enddo ksub
enddo qsub
#
server_barrier
#
ENDPROC GS_RB1

PROC GS_RB2aa
# -----------------------------
# Gram-Schmidt orthogonalization
#   x(q) = x(q) - x(j)*<x(q)|x(k)>/<x(k)|x(k)>
#   with update done via numerically stable in place update
# -----------------------------
server_barrier
do qsub
do ksub
where ksub < qsub
#
    overlapS = 0.0
    normS    = 0.0
    Tk[qsub] = 1.0
    T1k[ksub] = 1.0
#
# form overlap and norm
#
    pardo a,i,a1,i1
        request RB2_aa[qsub,a,i,a1,i1]
        request RB2_aa[ksub,a,i,a1,i1]

        T1aiai[a,i,a1,i1] = Tk[qsub]*RB2_aa[qsub,a,i,a1,i1]
        T2aiai[a,i,a1,i1] = T1k[ksub]*RB2_aa[ksub,a,i,a1,i1]

        overlapT  = T1aiai[a,i,a1,i1]*T2aiai[a,i,a1,i1]
        overlapS += overlapT

        normT  = RB2_aa[ksub,a,i,a1,i1]*RB2_aa[ksub,a,i,a1,i1]
        normS += normT
#
# store x(k) in temporary distributed
#
        put DRNaiai[a,i,a1,i1] = T2aiai[a,i,a1,i1]
    endpardo a,i,a1,i1
    server_barrier
    norm1 = 0.0
    norm2 = 1.0
    overlap1 = 0.0
    collective overlap1 += overlapS
    collective norm1 += normS
    if norm1 == 0.0
	norm1 = 1.0
    endif
    overlap2 = overlap1/norm1
    overlap2 *= -1.0
    T2k[qsub] = overlap2

# update x(q) inplace
    pardo a,i,a1,i1
        get DRNaiai[a,i,a1,i1]
        Tkaiai[qsub,a,i,a1,i1] = T2k[qsub]*DRNaiai[a,i,a1,i1]
        prepare RB2_aa[qsub,a,i,a1,i1] += Tkaiai[qsub,a,i,a1,i1]
    endpardo a,i,a1,i1
#
enddo ksub
enddo qsub
#
server_barrier
#
ENDPROC GS_RB2aa

PROC GS_RB2ab
# -----------------------------
# Gram-Schmidt orthogonalization
#   x(q) = x(q) - x(j)*<x(q)|x(k)>/<x(k)|x(k)>
#   with update done via numerically stable in place update
# -----------------------------
server_barrier
do qsub
do ksub
where ksub < qsub
#
    overlapS = 0.0
    normS    = 0.0
    Tk[qsub] = 1.0
    T1k[ksub] = 1.0
#
# form overlap and norm
#
    pardo a,i,b,j
        request RB2_ab[qsub,a,i,b,j]
        request RB2_ab[ksub,a,i,b,j]

        T1aibj[a,i,b,j] = Tk[qsub]*RB2_ab[qsub,a,i,b,j]
        T2aibj[a,i,b,j] = T1k[ksub]*RB2_ab[ksub,a,i,b,j]

        overlapT  = T1aibj[a,i,b,j]*T2aibj[a,i,b,j]
        overlapS += overlapT

        normT  = RB2_ab[ksub,a,i,b,j]*RB2_ab[ksub,a,i,b,j]
        normS += normT
#
# store x(k) in temporary distributed
#
        put DRNaibj[a,i,b,j] = T2aibj[a,i,b,j]
    endpardo a,i,b,j
    server_barrier
    norm1 = 0.0
    norm2 = 1.0
    overlap1 = 0.0
    collective overlap1 += overlapS
    collective norm1 += normS
    if norm1 == 0.0
	norm1 = 1.0
    endif
    overlap2 = overlap1/norm1
    overlap2 *= -1.0
    T2k[qsub] = overlap2

# update x(q) inplace
    pardo a,i,b,j
        get DRNaibj[a,i,b,j]
        Tkaibj[qsub,a,i,b,j] = T2k[qsub]*DRNaibj[a,i,b,j]
        prepare RB2_ab[qsub,a,i,b,j] += Tkaibj[qsub,a,i,b,j]
    endpardo a,i,b,j
#
enddo ksub
enddo qsub
#
server_barrier
#
ENDPROC GS_RB2ab

PROC update_vecs
#
server_barrier

call move_by_one_RK1
call move_by_one_RK2aa
call move_by_one_RK2ab

call form_new_RK1
call form_new_RK2aa
call form_new_RK2ab

call form_residual_R1
call form_residual_R2aa
call form_residual_R2ab

call update_RB1
call update_RB2aa
call update_RB2ab

### JNB debug - vector print
#pardo a ,i
#allocate contiguous CLRB1_a[1:eom_subspc,a:a,i:i]
#do ksub
#request RB1_a[ksub,a,i]
#CLRB1_a[ksub:ksub,a:a,i:i] = RB1_a[ksub,a,i]
#enddo ksub
##print CLRB1_a[1:eom_subspc,a:a,i:i]
#deallocate contiguous CLRB1_a[1:eom_subspc,a:a,i:i]
#endpardo a ,i

call normalize_RB1
call normalize_RB2aa
call normalize_RB2ab

call GS_RB1
call GS_RB2aa
call GS_RB2ab

call normalize_RB1
call normalize_RB2aa
call normalize_RB2ab


# this keeps track of the state by state norm that goes into DGGEV Bmat
do ksub
do ksub1
    Tkk[ksub,ksub1] = 0.0
    pardo a,i
        request RB1_a[ksub,a,i]
        request RB1_a[ksub1,a,i]
       T1kk[ksub,ksub1] = RB1_a[ksub,a,i]*RB1_a[ksub1,a,i]
       Tkk[ksub,ksub1] += T1kk[ksub,ksub1]
    endpardo a,i
    S1overlap[ksub,ksub1] = Tkk[ksub,ksub1]

    Tkk[ksub,ksub1] = 0.0
    pardo a,i,a1,i1
        request RB2_aa[ksub,a,i,a1,i1]
        request RB2_aa[ksub1,a,i,a1,i1]
       T1kk[ksub,ksub1] = RB2_aa[ksub,a,i,a1,i1]*RB2_aa[ksub1,a,i,a1,i1]
       Tkk[ksub,ksub1] += T1kk[ksub,ksub1]
    endpardo a,i,a1,i1
    S2aaoverlap[ksub,ksub1] = Tkk[ksub,ksub1]

    Tkk[ksub,ksub1] = 0.0
    pardo a,i,b,j
        request RB2_ab[ksub,a,i,b,j]
        request RB2_ab[ksub1,a,i,b,j]
       T1kk[ksub,ksub1] = RB2_ab[ksub,a,i,b,j]*RB2_ab[ksub1,a,i,b,j]
       Tkk[ksub,ksub1] += T1kk[ksub,ksub1]
    endpardo a,i,b,j
    S2aboverlap[ksub,ksub1] = Tkk[ksub,ksub1]
enddo ksub1
enddo ksub

### JNB debug - norms
#print " "
#print "VECTOR permutational symmetry"
#print "-- P(i/i)"
#do ksub
#    Rnorm[ksub] = 0.0
#    normS = 0.0
#    pardo a,i,a1,i1
#        request RB2_aa[ksub,a,i,a1,i1]
#        request RB2_aa[ksub,a,i1,a1,i]
#	T2kaiai[ksub,a,i,a1,i1] = 1.0
#	Tkaiai[ksub,a,i,a1,i1]  = RB2_aa[ksub,a,i,a1,i1]
#	T1kaiai[ksub,a,i,a1,i1] = RB2_aa[ksub,a,i1,a1,i]
#	Tkaiai[ksub,a,i,a1,i1] += T1kaiai[ksub,a,i,a1,i1]
#	normT  = Tkaiai[ksub,a,i,a1,i1]*T2kaiai[ksub,a,i,a1,i1]
#	normS += normT
#    endpardo a,i,a1,i1
#    server_barrier
#    norm2 = 0.0
#    collective norm2 += normS
#    Rnorm[ksub] = norm2
#enddo ksub
#print Rnorm
#print "-- P(a/a)"
#do ksub
#    Rnorm[ksub] = 0.0
#    normS = 0.0
#    pardo a,i,a1,i1
#        request RB2_aa[ksub,a,i,a1,i1]
#        request RB2_aa[ksub,a1,i,a,i1]
#	T2kaiai[ksub,a,i,a1,i1] = 1.0
#	Tkaiai[ksub,a,i,a1,i1]  = RB2_aa[ksub,a,i,a1,i1]
#	T1kaiai[ksub,a,i,a1,i1] = RB2_aa[ksub,a1,i,a,i1]
#	Tkaiai[ksub,a,i,a1,i1] += T1kaiai[ksub,a,i,a1,i1]
#	normT  = Tkaiai[ksub,a,i,a1,i1]*T2kaiai[ksub,a,i,a1,i1]
#	normS += normT
#    endpardo a,i,a1,i1
#    server_barrier
#    norm2 = 0.0
#    collective norm2 += normS
#    Rnorm[ksub] = norm2
#enddo ksub
#print Rnorm
#print "-- P(ai/ai)"
#do ksub
#    Rnorm[ksub] = 0.0
#    normS = 0.0
#    pardo a,i,a1,i1
#        request RB2_aa[ksub,a,i,a1,i1]
#        request RB2_aa[ksub,a1,i1,a,i]
#	T2kaiai[ksub,a,i,a1,i1] = 1.0
#	Tkaiai[ksub,a,i,a1,i1]  = RB2_aa[ksub,a,i,a1,i1]
#	T1kaiai[ksub,a,i,a1,i1] = RB2_aa[ksub,a1,i1,a,i]
#	Tkaiai[ksub,a,i,a1,i1] += T1kaiai[ksub,a,i,a1,i1]
#	normT  = Tkaiai[ksub,a,i,a1,i1]*T2kaiai[ksub,a,i,a1,i1]
#	normS += normT
#    endpardo a,i,a1,i1
#    server_barrier
#    norm2 = 0.0
#    collective norm2 += normS
#    Rnorm[ksub] = norm2
#enddo ksub
#print Rnorm

### JNB debug - overlap print
print " "
print "** overlap print"
print S1overlap
print S2aboverlap
print S2aaoverlap

server_barrier
#
ENDPROC update_vecs

#------------------------------------------------------------------------

PROC form_guess

print "Using CIS B space vectors for initial guess"

server_barrier

pardo a,i
    do kstate
        T1kai[kstate,a,i] = 0.0
        prepare R0k1_a[kstate,a,i] = T1kai[kstate,a,i]
        prepare cRk1_a[kstate,a,i] = T1kai[kstate,a,i]
    enddo kstate
endpardo a,i

pardo a,i,a1,i1
    do ksub
	Tkaiai[ksub,a,i,a1,i1] = 0.0
	prepare RB2_aa[ksub,a,i,a1,i1] = Tkaiai[ksub,a,i,a1,i1]
    enddo ksub
    do kstate
	Tkaiai[kstate,a,i,a1,i1] = 0.0
	prepare R0k2_aa[kstate,a,i,a1,i1] = Tkaiai[kstate,a,i,a1,i1]
	prepare R1k2_aa[kstate,a,i,a1,i1] = Tkaiai[kstate,a,i,a1,i1]
	prepare cRk2_aa[kstate,a,i,a1,i1] = Tkaiai[kstate,a,i,a1,i1]
    enddo kstate
endpardo a,i,a1,i1

pardo a,i,b,j
    do ksub
	Tkaibj[ksub,a,i,b,j] = 0.0
	prepare RB2_ab[ksub,a,i,b,j] = Tkaibj[ksub,a,i,b,j]
    enddo ksub
    do kstate
	Tkaibj[kstate,a,i,b,j] = 0.0
	prepare R0k2_ab[kstate,a,i,b,j] = Tkaibj[kstate,a,i,b,j]
	prepare R1k2_ab[kstate,a,i,b,j] = Tkaibj[kstate,a,i,b,j]
	prepare cRk2_ab[kstate,a,i,b,j] = Tkaibj[kstate,a,i,b,j]
    enddo kstate
endpardo a,i,b,j

### JNB debug
### alternative guesses
server_barrier
if iguess == 1
### HBAR S/D guess
do ksub
    pardo a,i,a2,i2
	Tkaiai[ksub,a,i,a2,i2] = 0.0
	do i1
	    request HBAR_IAJK_aaaa[i1,i,a2,i2]
	    request RB1_a[ksub,a,i1]
	    T1kaiai[ksub,a,i,a2,i2] = RB1_a[ksub,a,i1]*HBAR_IAJK_aaaa[i1,i,a2,i2]
	    T1kaiai[ksub,a,i,a2,i2] *= -1.0
	    Tkaiai[ksub,a,i,a2,i2] += T1kaiai[ksub,a,i,a2,i2]
	enddo i1

        do a1
	    request HBAR_ABCI_aaaa[a,a1,a2,i2]
	    request RB1_a[ksub,a1,i]
	    T1kaiai[ksub,a,i,a2,i2] = RB1_a[ksub,a1,i]*HBAR_ABCI_aaaa[a,a1,a2,i2]
	    Tkaiai[ksub,a,i,a2,i2] += T1kaiai[ksub,a,i,a2,i2]
        enddo a1

	Tk[ksub] = 1.0
	Taiai[a,i,a2,i2] = Tk[ksub]*Tkaiai[ksub,a,i,a2,i2]

	execute energy_denominator_rhf Taiai[a,i,a2,i2] fock_a

	T2kaiai[ksub,a,i,a2,i2] = Tk[ksub]*Taiai[a,i,a2,i2]

	prepare RB2_aa[ksub,a,i,a2,i2] += T2kaiai[ksub,a,i,a2,i2]
    endpardo a,i,a2,i2
    pardo a,i,b,j
	Tkaibj[ksub,a,i,b,j] = 0.0
	do i1
	    request HBAR_IAJK_aabb[i1,i,b,j]
	    request RB1_a[ksub,a,i1]
	    T1kaibj[ksub,a,i,b,j] = RB1_a[ksub,a,i1]*HBAR_IAJK_aabb[i1,i,b,j]
	    T1kaibj[ksub,a,i,b,j] *= -1.0
	    Tkaibj[ksub,a,i,b,j] += T1kaibj[ksub,a,i,b,j]
	enddo i1

        do a1
	    request HBAR_ABCI_aabb[a,a1,b,j]
	    request RB1_a[ksub,a1,i]
	    T1kaibj[ksub,a,i,b,j] = RB1_a[ksub,a1,i]*HBAR_ABCI_aabb[a,a1,b,j]
	    Tkaibj[ksub,a,i,b,j] += T1kaibj[ksub,a,i,b,j]
        enddo a1

	Tk[ksub] = 1.0
	Taibj[a,i,b,j] = Tk[ksub]*Tkaibj[ksub,a,i,b,j]

	execute energy_denominator_rhf Taibj[a,i,b,j] fock_a

	T2kaibj[ksub,a,i,b,j] = Tk[ksub]*Taibj[a,i,b,j]

	prepare RB2_ab[ksub,a,i,b,j] += T2kaibj[ksub,a,i,b,j]
    endpardo a,i,b,j
    server_barrier
    if ksub <= roots
	do kstate
        if kstate == ksub
	kstart = kstate
	pardo a,i,b,j
            allocate contiguous CLRB2_ab[1:subspc,a:a,i:i,b:b,j:j]
	    request RB2_ab[ksub,a,i,b,j]
	    CLRB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] =  RB2_ab[ksub,a,i,b,j]
	    Tkaibj[kstate,a,i,b,j] = CLRB2_ab[kstart:kstart,a:a,i:i,b:b,j:j]
	    prepare R1k2_ab[kstate,a,i,b,j] += Tkaibj[kstate,a,i,b,j]
            deallocate contiguous CLRB2_ab[1:subspc,a:a,i:i,b:b,j:j]
	endpardo a,i,b,j
	pardo a,i,a1,i1
            allocate contiguous CLRB2_aa[1:subspc,a:a,i:i,a1:a1,i1:i1]
	    request RB2_aa[ksub,a,i,a1,i1]
	    CLRB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] =  RB2_aa[ksub,a,i,a,i1]
	    Tkaiai[kstate,a,i,a1,i1] = CLRB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1]
	    prepare R1k2_aa[kstate,a,i,a1,i1] += Tkaiai[kstate,a,i,a1,i1]
            deallocate contiguous CLRB2_aa[1:subspc,a:a,i:i,a1:a1,i1:i1]
	endpardo a,i,a1,i1
        endif
        enddo kstate
    endif
enddo ksub
endif
if iguess == 2
###### CISPT2 guess
do ksub
    pardo a,i,b,j
	Tkaibj[ksub,a,i,b,j] = 0.0
	do i1
	    request Vpiqj[i1,i,b,j]
	    request RB1_a[ksub,a,i1]
	    T1kaibj[ksub,a,i,b,j] = RB1_a[ksub,a,i1]*Vpiqj[i1,i,b,j]
	    T1kaibj[ksub,a,i,b,j] *= -1.0
	    Tkaibj[ksub,a,i,b,j] += T1kaibj[ksub,a,i,b,j]
	enddo i1

        do a1
	    request Vaabj[a,a1,b,j]
	    request RB1_a[ksub,a1,i]
	    T1kaibj[ksub,a,i,b,j] = RB1_a[ksub,a1,i]*Vaabj[a,a1,b,j]
	    Tkaibj[ksub,a,i,b,j] += T1kaibj[ksub,a,i,b,j]
        enddo a1

	Tk[ksub] = 1.0
	Taibj[a,i,b,j] = Tk[ksub]*Tkaibj[ksub,a,i,b,j]

	execute energy_denominator_rhf Taibj[a,i,b,j] fock_a

	T2kaibj[ksub,a,i,b,j] = Tk[ksub]*Taibj[a,i,b,j]

	prepare RB2_ab[ksub,a,i,b,j] += T2kaibj[ksub,a,i,b,j]
    endpardo a,i,b,j
    server_barrier
    pardo a,i,a1,i1
        request RB2_ab[ksub,a,i,a1,i1]
        request RB2_ab[ksub,a,i1,a1,i]
	Tkaiai[ksub,a,i,a1,i1]  = RB2_ab[ksub,a,i,a1,i1]
	T1kaiai[ksub,a,i,a1,i1] = RB2_ab[ksub,a,i1,a1,i]
	Tkaiai[ksub,a,i,a1,i1] -= T1kaiai[ksub,a,i,a1,i1]
	prepare RB2_aa[ksub,a,i,a1,i1] += Tkaiai[ksub,a,i,a1,i1]
    endpardo a,i,a1,i1
    server_barrier
    if ksub <= roots
	do kstate
        if kstate == ksub
	kstart = kstate
	pardo a,i,b,j
            allocate contiguous CLRB2_ab[1:subspc,a:a,i:i,b:b,j:j]
	    request RB2_ab[ksub,a,i,b,j]
	    CLRB2_ab[kstart:kstart,a:a,i:i,b:b,j:j] =  RB2_ab[ksub,a,i,b,j]
	    Tkaibj[kstate,a,i,b,j] = CLRB2_ab[kstart:kstart,a:a,i:i,b:b,j:j]
	    prepare R1k2_ab[kstate,a,i,b,j] += Tkaibj[kstate,a,i,b,j]
            deallocate contiguous CLRB2_ab[1:subspc,a:a,i:i,b:b,j:j]
	endpardo a,i,b,j
	pardo a,i,a1,i1
            allocate contiguous CLRB2_aa[1:subspc,a:a,i:i,a1:a1,i1:i1]
	    request RB2_aa[ksub,a,i,a1,i1]
	    CLRB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1] =  RB2_aa[ksub,a,i,a,i1]
	    Tkaiai[kstate,a,i,a1,i1] = CLRB2_aa[kstart:kstart,a:a,i:i,a1:a1,i1:i1]
	    prepare R1k2_aa[kstate,a,i,a1,i1] += Tkaiai[kstate,a,i,a1,i1]
            deallocate contiguous CLRB2_aa[1:subspc,a:a,i:i,a1:a1,i1:i1]
	endpardo a,i,a1,i1
        endif
        enddo kstate
    endif
    server_barrier
enddo ksub
endif

call normalize_RB1
call normalize_RB2aa
call normalize_RB2ab

call GS_RB1
call GS_RB2aa
call GS_RB2ab

call normalize_RB1
call normalize_RB2aa
call normalize_RB2ab

do ksub
do ksub1
    Tkk[ksub,ksub1] = 0.0
    pardo a,i
        request RB1_a[ksub,a,i]
        request RB1_a[ksub1,a,i]
       T1kk[ksub,ksub1] = RB1_a[ksub,a,i]*RB1_a[ksub1,a,i]
       Tkk[ksub,ksub1] += T1kk[ksub,ksub1]
    endpardo a,i
    S1overlap[ksub,ksub1] = Tkk[ksub,ksub1]

    Tkk[ksub,ksub1] = 0.0
    pardo a,i,a1,i1
        request RB2_aa[ksub,a,i,a1,i1]
        request RB2_aa[ksub1,a,i,a1,i1]
       T1kk[ksub,ksub1] = RB2_aa[ksub,a,i,a1,i1]*RB2_aa[ksub1,a,i,a1,i1]
       Tkk[ksub,ksub1] += T1kk[ksub,ksub1]
    endpardo a,i,a1,i1
    S2aaoverlap[ksub,ksub1] = Tkk[ksub,ksub1]

    Tkk[ksub,ksub1] = 0.0
    pardo a,i,b,j
        request RB2_ab[ksub,a,i,b,j]
        request RB2_ab[ksub1,a,i,b,j]
       T1kk[ksub,ksub1] = RB2_ab[ksub,a,i,b,j]*RB2_ab[ksub1,a,i,b,j]
       Tkk[ksub,ksub1] += T1kk[ksub,ksub1]
    endpardo a,i,b,j
    S2aboverlap[ksub,ksub1] = Tkk[ksub,ksub1]
enddo ksub1
enddo ksub

server_barrier

ENDPROC form_guess
# -----------------
#  MAIN
# -----------------
normcrit = 0.0000000000001
ZERO = 0.0
root = 0
subspc = eom_subspc
roots = eom_roots

# iguess = 0 : zero start with crk slow update
# iguess = 1 : HBAR S/D start
# iguess = 2 : CISPT2 start

iguess=0

if iguess==0
print "Assuming 0.0 for initial R2 vectors"
endif
if iguess==1
print "Assuming HBAR S/D for initial R2 vectors"
endif
if iguess==2
print "Assuming CISPT(2) for initial R2 vectors"
endif

print " "
print "-- Parallel right EE-EOM-CCSD program"
print "-- Subspace collapse quasi-symmetric davidson update"
print "-- J. Comp. Phys. 1992, 103, 382-389 | J. Comp. Chem. 2001, 22, 1574-1589"
print "-- Written by Jason N. Byrd, 2015"
print " "
server_barrier
CALL READ_AMP
call form_H

call form_diag

call form_guess

do kstate
    SEkold[kstate] = 0.0
enddo kstate

do kiter

    print " "
    print kiter

    call form_G
    call diag_G
    call update_vecs

    etemp = 0.0
    etemp2 = 0.0
    do kstate
        etemp1 = SEk0[kstate]
        etemp2 = SEkold[kstate]
        etemp1 -= etemp2
        etemp2 = etemp1**2.0
        etemp += etemp2
        etemp3 += 1.0
    enddo kstate
    rmsconv = (etemp/etemp3)**0.5
    do kstate
        SEkold[kstate] = SEk0[kstate]
    enddo kstate
    print rmsconv
    server_barrier
    if rmsconv < eom_tol
        exit
    endif

enddo kiter

server_barrier

ENDSIAL R_EE_EOM_CCSD_RHF
