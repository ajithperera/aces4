#  Copyright (c) 2003-2010 University of Florida
import "scf_frag_defs.sialx"
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
#
                           SIAL SCF_FRAGMENT 
#
# ----------------------------------------------------------------------------
#
# Declare indeces 
# --------------- 
#
      index   kiter  = 1: scf_iter  
      index   katom  = 1: nfrags # Nfrags  
      index   jatom  = 1: nfrags # Nfrags  

      index   jfrag  = 1: nfrags # Nfragments   
      index  jjfrag  = 1: nfrags # Nfragments   
      index   kfrag  = 1: nfrags # Nfragments   
      index  kkfrag  = 1: nfrags # Nfragments 

      aoindex mu = 1: norb 
      aoindex nu = 1: norb 
      aoindex lambda = 1: norb 
      aoindex sigma  = 1: norb 
#
      moaindex i = baocc: eaocc  
      moaindex i1= baocc: eaocc  
#
      mobindex j = bbocc: ebocc  
      mobindex j1= bbocc: ebocc  
#
      moaindex a = bavirt: eavirt   
      moaindex a1= bavirt: eavirt   
# 
      mobindex b = bavirt: eavirt   
      mobindex b1= bavirt: eavirt   
#
      moaindex p = baocc: eavirt
      moaindex p1= baocc: eavirt
#
      mobindex q = bbocc: ebvirt
      mobindex q1= bbocc: ebvirt
#
      temp Txx[mu,nu] 
      temp txp[mu,p]  
      temp txq[mu,q]  
      temp tpp[p,p1]  
      temp tqq[q,q1]  
      distributed Da[mu,nu] 
      distributed Db[mu,nu] 
      distributed Nai_d[mu,nu] 
      static atom[katom,jatom] 
      temp tatom[katom,jatom] 
      distributed DCa[mu,p] 
      distributed DCb[mu,q] 
      distributed Dfock_a[p,p1] 
      distributed Dfock_b[q,q1] 

      static Ca[mu,p] 
      static Cb[mu,q] 
      static Fock_a[p, p1] 
      static Fock_b[q, q1] 
      static oed_ovl[mu,nu] 
      distributed Doed_ovl[mu,nu] 

      local wAO_frag[mu]
      local wOccA_frag[i]
      local wOccB_frag[j]
      local wVirtA_frag[a]
      local wVirtB_frag[b]
      temp x1[mu]
      temp x2[nu]
      temp x3[lambda]
      temp x4[sigma]
      temp xi[i]
      temp xi1[i]
      temp xi2[i]
      temp xj[j]
      temp xj1[j]
      temp xa[a]
      temp xa1[a]
      temp xa2[a]
      temp xb[b]
      temp xb1[b]

#
# Declare scalars 
# --------------- 
#
      scalar etemp 
      scalar one 
      scalar two 
      scalar rank 
      scalar imax  
      scalar zmax  
      scalar esum 
      scalar n_frags 
      scalar fcount 
      scalar icount 
      scalar jcount 
      scalar pcount 
      scalar i_aostart  
      scalar i_aoend   
      scalar j_aostart  
      scalar j_aoend   
      scalar i_vstart 
      scalar i_vend  
      scalar j_vstart 
      scalar j_vend  
      scalar a_vstart 
      scalar a_vend  
      scalar b_vstart 
      scalar b_vend  
      scalar m  
      scalar m1 
      scalar n  
      scalar n1 
      scalar n2 
      scalar l  
      scalar s  

#
# ---------------------------------------------------------------------------- 
#
      PROC SET_FRAG_PARMS    
#     ------------------- 
#
#     Determine the number of fragments  
#     --------------------------------- 
      execute set_frag n_frags
     #print_scalar nfrags
      allocate wAO_frag[*] 
      allocate wOccA_frag[*] 
      allocate wOccB_frag[*] 
      allocate wVirtA_frag[*] 
      allocate wVirtB_frag[*] 

      icount = 0.0  

      DO jfrag 

         icount   += 1.0  

         i_aostart = icount 
         i_aoend   = 1.0  
         execute frag_index_range i_aostart i_aoend 
#
        #print_scalar i_aostart 
        #print_scalar i_aoend  
         m = 0.0  
         DO mu   
            m += 1.0  
            if m >= i_aostart 
            if m <= i_aoend 
               wAO_frag[mu] = icount 
            endif 
            endif 
         ENDDO mu   
#
      ENDDO jfrag 

      icount = 0.0

      DO jfrag

         icount   += 1.0

         i_vstart  = icount
         i_vend    = 6.0
         execute frag_index_range i_vstart i_vend
         a_vstart  = icount
         a_vend    = 7.0
         execute frag_index_range a_vstart a_vend
#
         DO i
            m = 0.0
            do i1
               m += 1.0
               if i == i1
                  exit
               endif
            enddo i1
            if m >= i_vstart
            if m <= i_vend
               wOccA_frag[i] = icount
            endif
            endif
         ENDDO i
#
         DO a
            m = 0.0
            do a1
               m += 1.0
               if a == a1
                  exit
               endif
            enddo a1
            if m >= a_vstart
            if m <= a_vend
               wVirtA_frag[a] = icount
            endif
            endif
         ENDDO a

        #ENDIF # icount <= nfrags 

      ENDDO jfrag

     #DO mu
     #   execute return_sval wAO_frag(mu) m
     #   print_scalar m
     #ENDDO mu

     #DO a
     #   execute return_sval wVirtA_frag(a) m
     #   print_scalar m
     #ENDDO a

     #DO i
     #   execute return_sval wOccA_frag(i) m
     #   print_scalar m
     #ENDDO i

      icount = 0.0

      DO jfrag

         icount   += 1.0
        #IF icount > nfrags 
        #   exit 
        #ENDIF 

        #IF icount <= nfrags 

         i_vstart  = icount
         i_vend    = 9.0
         execute frag_index_range i_vstart i_vend
         a_vstart  = icount
         a_vend    = 10.0
         execute frag_index_range a_vstart a_vend
#
         DO j
            m = 0.0
            do j1
               m += 1.0
               if j == j1
                  exit
               endif
            enddo j1
            if m >= i_vstart
            if m <= i_vend
               wOccB_frag[j] = icount
            endif
            endif
         ENDDO j
#
         DO b
            m = 0.0
            do b1
               m += 1.0
               if b == b1
                  exit
               endif
            enddo b1
            if m >= a_vstart
            if m <= a_vend
               wVirtB_frag[b] = icount
            endif
            endif
         ENDDO b
        #ENDIF # icount <= nfrags 

      ENDDO jfrag

     #DO b
     #   execute return_sval wVirtB_frag(b) m
     #   print_scalar m
     #ENDDO b

     #DO j
     #   execute return_sval wOccB_frag(j) m
     #   print_scalar m
     #ENDDO j
#
      ENDPROC SET_FRAG_PARMS
#     ---------------------- 
#
# ---------------------------------------------------------------------------- 
#


#
# ---------------------------------------------------------------------------- 
#
      PROC IGUESS   
#     ----------- 
#
#     Determine the number of fragments  
#     --------------------------------- 
####      execute set_frag nfrags

      #etemp = 0.0 
      #DO katom 
      #DO jatom 
      #  IF katom == jatom 
      #   etemp             = etemp + 1.0  
      #   atom(katom,jatom) = etemp 
      #  endif 
      #ENDDO jatom 
      #ENDDO katom 
     #print_scalar etemp  

#     Get memory requirements from integral calculation 
#     ------------------------------------------------- 
      println "Starting scratch memory calculation" 
      imax = 0.0  
      zmax = 0.0  
     #DO mu 
     #DO nu 
     #   txx(mu,nu) = 0.0
     #   execute compute_int_scratchmem txx(mu,nu) zmax imax 
         execute compute_int_scratchmem oed_ovl zmax imax 
     #ENDDO nu 
     #ENDDO mu 
      sip_barrier 
      println "Done computing scratch memory" 

# Compute the overlap matrix 
       PARDO mu, nu 
             x1[mu] = wAO_frag[mu] 
             execute return_sval x1[mu]  m 
             x2[nu] = wAO_frag[nu] 
             execute return_sval x2[nu]  n 
             if m == n 
                execute return_ovl txx[mu,nu] 
                PUT Doed_ovl[mu,nu] = txx[mu,nu]  
             endif 
       ENDPARDO mu, nu 
      sip_barrier 

       DO mu 
       DO nu 
             x1[mu] = wAO_frag[mu] 
             execute return_sval x1[mu]  m 
             x2[nu] = wAO_frag[nu] 
             execute return_sval x2[nu]  n 
             if m == n 
                GET              Doed_ovl[mu,nu] 
                oed_ovl[mu,nu] = Doed_ovl[mu,nu]  
             endif 
       ENDDO nu 
       ENDDO mu
      println "Done computing overlap integrals" 

#      do p 
#      do mu 
#         ca(mu,p) = 0.0
#      enddo mu
#      enddo p 
#      do p 
#      do p1  
#         Fock_a(p,p1) = 0.0 
#      enddo p1  
#      enddo p
#      do q 
#      do mu 
#         cb(mu,q) = 0.0
#      enddo mu
#      enddo q 
#      do q 
#      do q1  
#         Fock_b(q,q1) = 0.0 
#      enddo q1  
#      enddo q

#
      sip_barrier 

      PARDO katom  
            icount = 0.0 
            DO jatom 
               icount += 1.0
               IF katom == jatom  
                  exit 
               ENDIF
            ENDDO jatom 

                 #tatom(katom,jatom) = atom(katom,jatom) 
                 #execute return_sval tatom(katom,jatom) etemp   
                  print icount # etemp 
                 #do p 
                 #do mu 
                 #   ca(mu,p) = 0.0
                 #enddo mu
                 #enddo p 
                 #do p 
                 #do p1  
                 #   Fock_a(p,p1) = 0.0 
                 #enddo p1  
                 #enddo p
                 #do q 
                 #do mu 
                 #   cb(mu,q) = 0.0
                 #enddo mu
                 #enddo q 
                 #do q 
                 #do q1  
                 #   Fock_b(q,q1) = 0.0 
                 #enddo q1  
                 #enddo q

                  println "Starting computing fragment scf" 
                  execute scf_atom icount Ca Cb Fock_a Fock_b oed_ovl  
                  println "Done computing fragment scf" 

                  DO a  
                     xa[a]      = wVirtA_frag[a]
                     execute return_sval xa[a]  l 
                     if l == icount 
                  DO a1
                     xa1[a1]      = wVirtA_frag[a1]
                     execute return_sval xa1[a1]  m 
                     if m == icount 
                        tpp[a,a1]          = fock_a[a,a1] 
                        PUT Dfock_a[a,a1] += tpp[a,a1] 
                     endif 
                  ENDDO a1
                  DO i1
                     xi1[i1]      = wOccA_frag[i1]
                     execute return_sval xi1[i1]  m 
                     if m == icount 
                        tpp[a,i1]          = fock_a[a,i1] 
                        PUT Dfock_a[a,i1] += tpp[a,i1] 
                     endif 
                  ENDDO i1
                     endif 
                  ENDDO a  

                  DO i  
                     xi[i]      = wOccA_frag[i]
                     execute return_sval xi[i]  l 
                     if l == icount 
                  DO i1
                     xi1[i1]      = wOccA_frag[i1]
                     execute return_sval xi1[i1]  m 
                     if m == icount 
                        tpp[i,i1]          = fock_a[i,i1] 
                        PUT Dfock_a[i,i1] += tpp[i,i1] 
                     endif 
                  ENDDO i1
                  DO a1
                     xa1[a1]      = wVirtA_frag[a1]
                     execute return_sval xa1[a1]  m 
                     if m == icount 
                        tpp[i,a1]          = fock_a[i,a1] 
                        PUT Dfock_a[i,a1] += tpp[i,a1] 
                     endif 
                  ENDDO a1
                     endif 
                  ENDDO i  
                  println "Done placing fock_matrix" 

                  DO mu  
                     x1[mu] = wAO_frag[mu] 
                     execute return_sval x1[mu]  m 
                     if m == icount 
                  DO a 
                     xa[a]      = wVirtA_frag[a]
                     execute return_sval xa[a]  l 
                     if l == icount 
                        txp[mu,a]      = ca[mu,a] 
                        PUT DCa[mu,a] += txp[mu,a] 
                     endif 
                  ENDDO a 
                  DO i 
                     xi[i]      = wOccA_frag[i] 
                     execute return_sval xi[i]  s    
                     if s == icount  
                        txp[mu,i]      = ca[mu,i] 
                        PUT DCa[mu,i] += txp[mu,i] 
                     endif 
                  ENDDO i 
                     endif 
                  ENDDO mu  
                  println "Done placing coefficients" 

      ENDPARDO katom   
#
      ENDPROC IGUESS   
#     -------------- 
#
# -----------------------------------------------------------------------------
#
#     Compute the fragment SCF  
#     ------------------------- 
#
      execute disable_debug_print 
      println "Setting fragment parameters" 
      CALL SET_FRAG_PARMS    
      println "Done Setting fragment parameters" 
      sip_barrier 
      CALL IGUESS  
      sip_barrier

      set_persistent Dca "ca" 
      set_persistent DFock_a "fock_a"
      
#      set_persistent ca "ca" 
#      set_persistent Fock_a "fock_a"

# -----------------------------------------------------------------------------
#
                           ENDSIAL SCF_FRAGMENT 
#
###############################################################################
