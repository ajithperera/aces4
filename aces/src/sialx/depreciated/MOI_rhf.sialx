import "MOI_rhf_defs.sialx"
#
                           SIAL SCF_RHF_COREH          
#
# Declare indices 
# --------------- 
#
      index   kiter  = 1: scf_iter  
      index   kbeg   = 1: scf_beg
      index   korder = 1: scf_hist
      index   kptr1  = 1: 2
      index   kptr2  = 1: 2
      index   kone   = 1: 1
      index   kdiis  = 1: 30 
      index   d1     = 1: 30 
      index   d2     = 1: 30 
      index   d3     = 1: 30 
      index   d4     = 1: 30 
      index   iiter1 = 1: 1
      index   jjter1 = 1: 1
      index   jjter2 = 2: 2
      index   g51    = 1: 5000 
      index   g52    = 1: 5000 
      index   ixyz   = 1: 3
#
      aoindex mu     = 1: frag1_norb
      aoindex nu     = 1: frag1_norb
      aoindex lambda = 1: frag1_norb
      aoindex sigma  = 1: frag1_norb
#
      moaindex i = 1: frag1_eaocc
      moaindex i1= 1: frag1_eaocc
      moaindex i2= 1: frag1_eaocc
      moaindex i3= 1: frag1_eaocc
#
      moaindex a = frag1_bavirt: frag1_eavirt
      moaindex a1= frag1_bavirt: frag1_eavirt
      moaindex a2= frag1_bavirt: frag1_eavirt
      moaindex a3= frag1_bavirt: frag1_eavirt
#
      moaindex j = 1: frag1_eaocc
      moaindex j1= 1: frag1_eaocc
      moaindex j2= 1: frag1_eaocc
      moaindex j3= 1: frag1_eaocc
#
      moaindex b = frag1_bavirt: frag1_eavirt
      moaindex b1= frag1_bavirt: frag1_eavirt
      moaindex b2= frag1_bavirt: frag1_eavirt
      moaindex b3= frag1_bavirt: frag1_eavirt
#
      moaindex p = 1: frag1_eavirt
      moaindex p1= 1: frag1_eavirt
      moaindex p2= 1: frag1_eavirt
      moaindex p3= 1: frag1_eavirt
#
      moaindex q = 1: frag1_eavirt
      moaindex q1= 1: frag1_eavirt
      moaindex q2= 1: frag1_eavirt
      moaindex q3= 1: frag1_eavirt

      index   ao_scratch = 1: max_aoseg   

    contiguous local clca[ao_scratch,ao_scratch] 
    scalar stype

# 
# Declare one-particle density arrays 
# ----------------------------------- 
#
      distributed Dhfa[mu,nu] 
      distributed Dhfb[mu,nu] 
      distributed Dhfa_old[mu,nu] 
      distributed Dhfb_old[mu,nu] 
#
      distributed Fpq_a[mu,nu] 
      distributed Fpq_b[mu,nu] 
      distributed FTpq_a[mu,nu] 
      distributed FTpq_b[mu,nu] 
      distributed CBT_a[mu,p] 
      distributed CBT_b[mu,q] 
      distributed Dca[mu,p]  

      static dflags11[iiter1,jjter1]
      static dflags12[iiter1,jjter2]
      static screen_array[g51,g52] 
#
# Declare temporary arrays 
# ------------------------ 
#
      temp Tpq[mu,nu] 
      temp T1pq[mu,nu] 
      temp Txi[mu,i] 
      temp T1xi[mu,i] 
      temp Txj[mu,j] 
      temp Txx[mu,nu] 
      temp TAxx[mu,nu] 
      temp TBxx[mu,nu] 
      temp T1xx[mu,nu] 
      temp T2xx[mu,nu] 
      temp Tii[i,i1] 
      temp Tjj[j,j1] 
      temp Txp[mu,p] 
      temp T1xp[mu,p] 
      temp Tpp[p,p1] 
      temp T1pp[p,p1] 
      temp Txq[mu,q] 
      temp T1xq[mu,q] 
      temp Tqq[q,q1] 
      temp T1qq[q,q1] 
#
# Declare served arrays 
# --------------------- 
#
      temp aoint[mu,nu,lambda,sigma]
#
# Declare static arrays 
# --------------------- 
#
      static FSpq_a[mu,nu] 
      static FSpq_b[mu,nu] 
      distributed Qxx[mu,nu] 
      distributed FTa[p,p1] 
      distributed FTb[q,q1] 
      static X1[mu,nu] 
      local LDHFa[mu,nu] 
      local LDHFb[mu,nu] 
      local LFpq_b[mu,nu] 
      local LFpq_a[mu,nu] 
#
# Arrays used in DIIS procedure 
# ----------------------------- 
#  
      distributed FFai[a,i] 
      distributed FFbj[b,j] 
      temp tai[a,i] 
      temp t1ai[a,i] 
      temp tbj[b,j] 
      temp t1bj[b,j] 
      scalar dens_check 
      scalar pcount 
      scalar zmax 
      scalar imax 
      scalar repulsion
#
# Declare scalars 
# --------------- 
#
      scalar num_lindep
      scalar e_a     
      scalar e_b     
      scalar escf_a 
      scalar escf_b 
      scalar etemp 
      scalar esum 
      scalar esum1
      scalar energy 
      scalar energy1 
      scalar energy2 
      scalar ecrit 
      scalar ediff  
#     scalar damp 
      scalar damp1 
      scalar done 
      scalar donea 
      scalar doneb 
   
      scalar zero 
      scalar mone 
      scalar one
      scalar two
      scalar three
      scalar four
      scalar ncount1 
      scalar rank 
#
# Parameters needed for DIIS 

      scalar diis_start  
      scalar diis_end   
      scalar diis_order   
      scalar diis_max_order # same as kdiis   
      scalar diis_count 
      scalar temp_order   
      scalar worder  
      scalar n1 
      scalar n2 

      distributed Fa[mu,nu,kdiis] 
      distributed Fb[mu,nu,kdiis] 
      distributed Fbj[b,j,kdiis] 
      distributed Fai[a,i,kdiis] 
      temp tpqx[mu,nu,d2]   
      temp tdd[d1,d2] 
      temp t1dd[d1,d2] 
      static BB[d1,d2] 
#
# ---------------------------------------------------------------------------- 
#
# -----------------------------------------------------------------------------
#
      PROC HFDENS
#     -----------
#
#     The HF density is computed. Davidson damping is incorporated thus
#     knowledge of the previous iteration is needed. 
#     ----------------------------------------------------------------- 
#
      PARDO mu, nu 
#
#           alpha component first 
#           --------------------- 
#
            GET           DHFa_old[mu,nu] 
            GET           DHFb_old[mu,nu] 
            Tpq[mu,nu]  = DHFa_old[mu,nu]   
            Tpq[mu,nu] *= damp  
#
            DO i 
#
	       get DCa[nu,i]
	       get DCa[mu,i]

               Txi[nu,i]   = DCa[nu,i]
               T1pq[mu,nu] = Txi[nu,i]*DCa[mu,i]
               Tpq[mu,nu] += T1pq[mu,nu] 
#
            ENDDO i 
#
            Tpq[mu,nu]     *= damp1   
            PUT Dhfa[mu,nu] = Tpq[mu,nu]
#
#           beta component next  
#           ------------------- 
#
            Tpq[mu,nu]  = DHFb_old[mu,nu]   
            Tpq[mu,nu] *= damp  
#
            DO j 
#
	       get DCa[nu,j]
	       get DCa[mu,j]
               Txj[nu,j]   = Dca[nu,j]
               T1pq[mu,nu] = Dca[mu,j]*Txj[nu,j]
               Tpq[mu,nu] += T1pq[mu,nu] 
#
            ENDDO j 
#
            Tpq[mu,nu]     *= damp1   
            PUT Dhfb[mu,nu] = Tpq[mu,nu]
#
      ENDPARDO mu, nu 
#
      ENDPROC HFDENS
#     --------------
#
# ---------------------------------------------------------------------------- 
#
# -----------------------------------------------------------------------------
#
      PROC HFIDENS
#     ------------
#
#     Procedure which computes the HF density without Davidson damping. 
#     ----------------------------------------------------------------- 
#
      PARDO mu, nu 
#
#           alpha component 
#           --------------- 
#
            Tpq[mu,nu] = 0.0 
#
            DO i 
#
	       get DCa[nu,i]
	       get DCa[mu,i]
               Txi[nu,i]   = DCa[nu,i]
               T1pq[mu,nu] = Txi[nu,i]*DCa[mu,i]
               Tpq[mu,nu] += T1pq[mu,nu] 
#
            ENDDO i 
# 
            PUT Dhfa[mu,nu] = Tpq[mu,nu]
#
#           beta component 
#           -------------- 
#
            Tpq[mu,nu] = 0.0 
#
            DO j 
#
	       get DCa[nu,j]
	       get DCa[mu,j]
               Txj[nu,j]   = Dca[nu,j]
               T1pq[mu,nu] = Dca[mu,j]*Txj[nu,j]
               Tpq[mu,nu] += T1pq[mu,nu] 
#
            ENDDO j 
#
            PUT Dhfb[mu,nu] = Tpq[mu,nu]
#
      ENDPARDO mu, nu 
#
      ENDPROC HFIDENS
#
# ---------------------------------------------------------------------------- 
#
       PROC FOCK_MATRIX_FAST   
#      --------------------- 
#
#      The complete Fock matrix is constructed. Eight fold symmetry of the
#      two-electron integrals is incorporated. 
#      ------------------------------------------------------------------
#
#      Put the density into local arrays 
#      --------------------------------- 
#
#      Initialize the Fock matrix to the bare 1-electron hamiltonian.
#      -------------------------------------------------------------- 
#
       sip_barrier
       DO mu
       DO nu
#
          Txx[mu,nu]        = 0.0
          Fockrohf_a[mu,nu] = Txx[mu,nu]
          Fockrohf_b[mu,nu] = Txx[mu,nu]
       ENDDO nu
       ENDDO mu 

       sip_barrier
#
#      Add contributions containing two-particle integral contributions.
#      -----------------------------------------------------------------
#
############# CLASS 6  ############
##  Do four-center part (mu nu |la si)->(mu nu |si la ),(nu mu|la si),(nu mu|si la)
##                      (la si |mu nu),(si la |mu nu),(la si |nu mu),(si la |nu mu)
##
        PARDO mu, nu, lambda, sigma
##
                 WHERE mu      < nu
                 WHERE lambda  < sigma
                 WHERE mu     < lambda
                 WHERE nu     != sigma
                 WHERE nu     != lambda
                 WHERE mu     != sigma
##
                    execute compute_ubatch1 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
##
        ENDPARDO mu, nu, lambda, sigma
##
#
############ CLASS 3  ############
#  Do two-center part (mu mu |mu nu)->(mu nu |mu mu ),(mu mu|nu mu),(nu mu|mu mu)
#  Do three-center part (mu mu |nu lambda)->(mu mu |lambda nu ),(nu lambda|mu mu),(lambda nu|mu mu)
#
       PARDO mu, nu, lambda, sigma 
#
          WHERE mu == nu
          WHERE lambda  < sigma
#
                execute compute_ubatch2 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
#
       ENDPARDO mu, nu, lambda, sigma 
#
############ CLASS 5  ############
###################  CLASS A ##############
#  Do three-center part (mu nu |mu la)->(mu nu |la mu ),(nu mu|mu la),(nu mu|la mu)
#                       (mu la |mu nu),(la mu |mu nu ),(mu la |nu mu),(la mu |nu mu)
#
#
       PARDO mu, nu, lambda, sigma
                WHERE nu < sigma
                WHERE mu < nu
                WHERE lambda < sigma
                WHERE mu==lambda
#
                   execute compute_ubatch4 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
#
       ENDPARDO mu, nu, lambda, sigma

###################  CLASS B ##############
#  Do three-center part (mu nu |mu la)->(mu nu |la mu ),(nu mu|mu la),(nu mu|la mu)
#                       (mu la |mu nu),(la mu |mu nu ),(mu la |nu mu),(la mu |nu mu)
# 
      PARDO mu, nu, lambda, sigma 
                WHERE mu < nu
                WHERE lambda < sigma
                WHERE mu < sigma
                WHERE nu == lambda
#
                   execute compute_ubatch4 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
#
       ENDPARDO mu, nu, lambda, sigma
#
# 
###################  CLASS C ##############
#  Do three-center part (mu nu |mu la)->(mu nu |la mu ),(nu mu|mu la),(nu mu|la mu)
#                       (mu la |mu nu),(la mu |mu nu ),(mu la |nu mu),(la mu |nu mu)
#
       PARDO mu, nu, lambda, sigma
                WHERE mu < nu
                WHERE lambda < sigma
                WHERE mu < lambda
                WHERE nu == sigma
#
                   execute compute_ubatch4 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
#
       ENDPARDO mu, nu, lambda, sigma
#
############ CLASS 4  ############
#  Do two-center part (mu nu |mu nu)->(mu nu |nu mu ),(nu mu|mu nu),(nu mu|nu mu)
#
       PARDO mu, nu, lambda, sigma
                WHERE mu < nu
                WHERE lambda < sigma 
                WHERE nu == sigma
                WHERE mu == lambda
#
                   execute compute_ubatch8 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
#
       ENDPARDO mu, nu, lambda, sigma
#
#          
############ CLASS 2  ############
#  Do two-center part (mu mu |nu nu)->(nu nu |mu mu )
#
       PARDO mu, nu, lambda, sigma
#
             WHERE mu < lambda
             WHERE mu == nu
             WHERE lambda == sigma
#
                   execute compute_ubatch7 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
#
       ENDPARDO mu, nu, lambda, sigma 
#
############ END CLASS 2  ############
#
#
############ CLASS 1  ############
#  Do one-center part (mu mu |mu mu)
#
       PARDO mu, nu, lambda, sigma
             WHERE nu == mu
             WHERE sigma == mu
             WHERE lambda == mu 
#
                   execute compute_ubatch6 aoint[mu,nu,lambda,sigma] oed_kin oed_ovl fockrohf_a fockrohf_b
#
       ENDPARDO mu, nu, lambda, sigma
#
############ END CLASS 1  ############
#
       sip_barrier
#      
       DO mu
       DO nu
#         
          Txx[mu,nu]        = Fockrohf_a[mu,nu]
          PUT Fpq_a[mu,nu] += Txx[mu,nu]
#      
       ENDDO nu
       ENDDO mu 
#      
       DO mu
       DO nu
#         
          Txx[mu,nu]        = Fockrohf_b[mu,nu]
          PUT Fpq_b[mu,nu] += Txx[mu,nu]
#      
       ENDDO nu
       ENDDO mu 
#
       sip_barrier
#
       execute get_my_rank rank  
       if rank == 0.0 
       DO mu    
       DO nu   
#
            execute return_h1_moi txx[mu,nu] one
#
            PUT Fpq_a[mu,nu] += Txx[mu,nu] 
            PUT Fpq_b[mu,nu] += Txx[mu,nu] 
#
       ENDDO nu   
       ENDDO mu    
       endif 
#
       ENDPROC FOCK_MATRIX_FAST   
#      ------------------------ 
#
# ---------------------------------------------------------------------------- 
#
#
       PROC HF_ENERGY  
#      -------------- 
#
#      The HF energy is computed from the HF density (DHFa(b)) and the 
#      Fock matrix (Fpq_a(b)). 
#      --------------------------------------------------------------- 
#
       energy = 0.0
       esum = 0.0 

       execute get_my_rank rank 
       if rank == 0.0 

          DO mu  
          DO nu 
#
             GET Fpq_a[mu,nu]
             GET Fpq_b[mu,nu]
             GET DHFa[mu,nu] 
             GET DHFb[mu,nu] 
#
             Txx[mu,nu]   = 0.0 
             execute return_h1_moi txx[mu,nu]  one
#
             T1xx[mu,nu]  = Txx[mu,nu] 
             T1xx[mu,nu] += Fpq_a[mu,nu] 
#
             etemp        = T1xx[mu,nu]*DHFa[mu,nu]  
             esum        += etemp 
#
             T1xx[mu,nu]  = Txx[mu,nu] 
             T1xx[mu,nu] += Fpq_b[mu,nu] 
#
             etemp        = T1xx[mu,nu]*DHFb[mu,nu]  
             esum        += etemp 
#
          ENDDO nu 
          ENDDO mu 

       endif 


       sip_barrier 

       esum *= 0.5 
       collective energy += esum 
       energy += repulsion 
#
        assert_same energy
        print energy 
#
       ENDPROC HF_ENERGY   
#      ----------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC OVER_HALF 
#      -------------- 
#
#      Diagonalize the overlap matrix, invert and take the square
#      root of the diagonal elements. 
#      -------------------------------------------------------------- 
#
       DO mu 
       DO nu 
          execute return_ovl_moi txx[mu,nu] one
          oed_ovl[mu,nu] = txx[mu,nu]  
       ENDDO nu 
       ENDDO mu 
       sip_barrier 
       execute eigen_calc_sqr_inv oed_ovl x1 num_lindep
       print "number of dropped linear dependencies"
       print num_lindep
       print " "
#
       DO mu 
       DO nu 
          txx[mu,nu] = oed_ovl[mu,nu]  
       ENDDO nu 
       ENDDO mu 
#
#      Form the Q-matrix --> U s**{-1/2) 
#      --------------------------------- 
#
       PARDO mu, nu  
#
          Txx[mu,nu] = 0.0 
#
          DO lambda 
             T1xx[mu,nu] = x1[mu,lambda]*oed_ovl[lambda,nu] 
             Txx[mu,nu] += T1xx[mu,nu] 
          ENDDO lambda  
#
          PUT Qxx[mu,nu] = Txx[mu,nu]  
#
       ENDPARDO mu, nu  
#
      #execute print_scalar scf_energy
       ENDPROC OVER_HALF 
#      ----------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC FOCK_TRANSPOSE 
#      ------------------- 
#
#      Form the transposed Fock matrix --> Q+ F Q 
#      ------------------------------------------ 
#
       PARDO mu, sigma   
#
             TAxx[mu,sigma] = 0.0 
             TBxx[mu,sigma] = 0.0 
#
             DO lambda 
#
                GET Fpq_a[lambda,sigma] 
                GET Fpq_b[lambda,sigma] 
                GET Qxx[lambda,mu] 
#
                T1xx[mu,sigma]  = Qxx[lambda,mu]*Fpq_a[lambda,sigma]  
                TAxx[mu,sigma] += T1xx[mu,sigma] 
#
                T1xx[mu,sigma]  = Qxx[lambda,mu]*Fpq_b[lambda,sigma]  
                TBxx[mu,sigma] += T1xx[mu,sigma] 
#
             ENDDO lambda 
#
             DO nu 
#
                GET Qxx[sigma,nu] 
#
                T1xx[mu,nu] =        TAxx[mu,sigma]*Qxx[sigma,nu] 
                PUT FTpq_a[mu,nu] += T1xx[mu,nu] 
#
                T2xx[mu,nu]        = TBxx[mu,sigma]*Qxx[sigma,nu] 
                PUT FTpq_b[mu,nu] += T2xx[mu,nu] 
#
             ENDDO nu 
#
       ENDPARDO mu, sigma   
#
       ENDPROC FOCK_TRANSPOSE 
#      ---------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC FOCK_DIAG  
#      -------------- 
#
#      First put the transposed Fock arrays into static arrays 
#      ------------------------------------------------------- 
#
       pardo mu, a
           put DCa[mu,a] = 0.0
       endpardo mu, a
       pardo mu, i
           put DCa[mu,i] = 0.0
       endpardo mu, i
       server_barrier
       execute get_my_rank rank
       if rank == 0.0
       DO mu   
       DO nu  
#
          GET             FTpq_a[mu,nu] 
          GET             FTpq_b[mu,nu]
#
          FSpq_a[mu,nu] = FTpq_a[mu,nu]
          FSpq_b[mu,nu] = FTpq_b[mu,nu]
#
       ENDDO nu  
       ENDDO mu   
#
       execute eigen_calc FSpq_a clca[1:max_aoseg,1:max_aoseg]

       stype = 1.0
       do mu
	   do a
	       Txp[mu,a] = 0.0
	       execute place_scratch txp[mu,a] clca[1:max_aoseg,1:max_aoseg] stype one
	       put DCa[mu,a] += txp[mu,a]
	   enddo a
	   do i
	       Txp[mu,i] = 0.0
	       execute place_scratch txp[mu,i] clca[1:max_aoseg,1:max_aoseg] stype one
	       put DCa[mu,i] += txp[mu,i]
	   enddo i
       enddo mu

       endif

#
       ENDPROC FOCK_DIAG 
#      ----------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC C_BTRAN 
#      ------------ 
#
#      Transform the coefficient array back to the original basis 
#      ---------------------------------------------------------- 
#
       PARDO mu, a  
#
          Txp[mu,a] = 0.0 
#
          DO nu 
#
             GET          Qxx[mu,nu] 
	     get          DCa[nu,a]
#
             T1xp[mu,a] = Qxx[mu,nu]*DCa[nu,a]   
             Txp[mu,a] += T1xp[mu,a] 
#
          ENDDO nu 
#
          PUT CBT_a[mu,a] = Txp[mu,a] 
#
       ENDPARDO mu, a  
       PARDO mu, i  
#
          Txp[mu,i] = 0.0 
#
          DO nu 
#
             GET          Qxx[mu,nu] 
	     get          DCa[nu,i]
#
             T1xi[mu,i] = Qxx[mu,nu]*DCa[nu,i]   
             Txp[mu,i] += T1xi[mu,i] 
#
          ENDDO nu 
#
          PUT CBT_a[mu,i] = Txp[mu,i] 
#
       ENDPARDO mu, i  
#
       PARDO mu, a
# 
          Txp[mu,a] = 0.0 
#
          DO nu 
#
             GET          Qxx[mu,nu] 
	     get          DCa[nu,a]
#
             T1xp[mu,a] = Qxx[mu,nu]*DCa[nu,a]   
             Txp[mu,a] += T1xp[mu,a] 
#
          ENDDO nu 
#
          PUT CBT_b[mu,a] = Txp[mu,a] 
#
       ENDPARDO mu, a
       PARDO mu, i
# 
          Txp[mu,i] = 0.0 
#
          DO nu 
#
             GET          Qxx[mu,nu] 
	     get          DCa[nu,i]
#
             T1xi[mu,i] = Qxx[mu,nu]*DCa[nu,i]   
             Txp[mu,i] += T1xi[mu,i] 
#
          ENDDO nu 
#
          PUT CBT_b[mu,i] = Txp[mu,i] 
#
       ENDPARDO mu, i
       sip_barrier 
#
#      Put the transformed coefficients into static arrays 
#      --------------------------------------------------- 
#
       pardo mu,a
           get CBT_a[mu,a]
	   put DCa[mu,a] = CBT_a[mu,a]
       endpardo mu,a
       pardo mu,i
           get CBT_a[mu,i]
	   put DCa[mu,i] = CBT_a[mu,i]
       endpardo mu,i
#
       ENDPROC C_BTRAN 
#      --------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC HFDENS_ZERO   
#      ----------------  
#  
#      Zero out the n-1'th density array. 
#      ---------------------------------- 
#
       PARDO mu, nu 
#
             Txx[mu,nu]   = 0.0   
             PUT DHFa_old[mu,nu] = Txx[mu,nu]  
             PUT DHFb_old[mu,nu] = Txx[mu,nu]  
#
       ENDPARDO mu, nu 
#
       ENDPROC HFDENS_ZERO   
#      ------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC HFDENS_REPLACE    
#      -------------------   
#
#      Replace the 'old' HF density by the 'new' HF density. 
#      ----------------------------------------------------- 
#
       PARDO mu, nu 
#
             GET DHFa[mu,nu] 
             GET DHFb[mu,nu] 
             PUT DHFa_old[mu,nu] = DHFa[mu,nu]  
             PUT DHFb_old[mu,nu] = DHFb[mu,nu]  
#
       ENDPARDO mu, nu 
#
       ENDPROC HFDENS_REPLACE    
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_6HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai[a,i] = 0.0 
             PUT FFai[a,i] = tai[a,i] 
       ENDPARDO a, i 
       PARDO b, j 
             tbj[b,j] = 0.0 
             PUT FFbj[b,j] = tbj[b,j] 
       ENDPARDO b, j 
       sip_barrier 
#  
       PARDO mu, nu  
             GET Fpq_a[mu,nu]  
             GET Fpq_b[mu,nu]  
             DO i 
	     get DCa[nu,i]
                txi[mu,i] = Fpq_a[mu,nu]*Dca[nu,i] 
                DO a 
		   get DCa[mu,a]
                   tai[a,i]      = txi[mu,i]*Dca[mu,a] 
                   PUT FFai[a,i] += tai[a,i] 
                ENDDO a 
             ENDDO i 
#
             DO j 
	        get DCa[nu,j]
                txj[mu,j] = Fpq_b[mu,nu]*Dca[nu,j] 
                DO b 
		   get DCa[mu,b]
                   tbj[b,j]      = txj[mu,j]*Dca[mu,b] 
                   PUT FFbj[b,j] += tbj[b,j] 
                ENDDO b 
             ENDDO j 
       ENDPARDO mu, nu  
       sip_barrier 
#
       n1 = diis_start
       n1-= 1.0
       DO d1
          n1 += 1.0
          if n1 == worder
                server_barrier

                PARDO mu, nu
                   GET              Fpq_a[mu,nu]
                   txx[mu,nu]     = Fpq_a[mu,nu]
                   PUT Fa[mu,nu,d1] = txx[mu,nu]
                ENDPARDO mu, nu
                PARDO mu, nu
                   GET              Fpq_b[mu,nu]
                   txx[mu,nu]     = Fpq_b[mu,nu]
                   PUT Fb[mu,nu,d1] = txx[mu,nu]
                ENDPARDO mu, nu
                PARDO a, i
                   GET FFai[a,i]
                   PUT Fai[a,i,d1] = FFai[a,i]
                ENDPARDO a, i
                PARDO b, j
                   GET FFbj[b,j]
                   PUT Fbj[b,j,d1] = FFbj[b,j]
                ENDPARDO b, j
                server_barrier

                exit

          endif # d1 = kiter
#
       ENDDO d1
#
       sip_barrier
#
       ENDPROC GEN_6HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
       PROC MOVE6    
#      ----------  
#
#      Move histories 
#      -------------- 
#

      DO d1 
      DO d2 
      where d1 == d2 + 1
       sip_barrier 
	  PARDO mu, nu 
		 GET          Fa[mu,nu,d1] 
		 tpq[mu,nu] = Fa[mu,nu,d1] 
		 PUT Fa[mu,nu,d2] = tpq[mu,nu] 
	  ENDPARDO mu, nu 
#
	  PARDO a, i 
		 GET        Fai[a,i,d1] 
		 tai[a,i] = Fai[a,i,d1] 
		 PUT Fai[a,i,d2] = tai[a,i] 
	  ENDPARDO a,i  
#
	  PARDO mu, nu 
		 GET          Fb[mu,nu,d1] 
		 tpq[mu,nu] = Fb[mu,nu,d1] 
		 PUT Fb[mu,nu,d2] = tpq[mu,nu] 
	   ENDPARDO mu, nu 
#
	   PARDO b, j 
		 GET        Fbj[b,j,d1] 
		 tbj[b,j] = Fbj[b,j,d1] 
		 PUT Fbj[b,j,d2] = tbj[b,j] 
	  ENDPARDO b,j  
       sip_barrier 
      ENDDO d2 
      ENDDO d1 
       sip_barrier 
#
       ENDPROC MOVE6    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
       PROC DIISN   
#      ----------  
#
# The DIIS expansion coefficients are computed using the <= worder  previous iterations.
#
       sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 

       temp_order = worder
          
#
       DO d1 
       where d1 <= (int)temp_order # worder 
       DO d2 
       where d2 <= (int)temp_order # worder 
          tdd[d1,d2] = 0.0 
          DO a  
          DO i 
             GET           Fai[a,i,d1] 
             GET           Fai[a,i,d2] 
             tai[a,i]    = Fai[a,i,d1] 
             t1ai[a,i]   = Fai[a,i,d2] 
             etemp       = tai[a,i]*t1ai[a,i] 
             t1dd[d1,d2] = etemp 
             tdd[d1,d2] += t1dd[d1,d2]  
          ENDDO i 
          ENDDO a  
          DO b  
          DO j 
             GET           Fbj[b,j,d1] 
             GET           Fbj[b,j,d2] 
             tbj[b,j]    = Fbj[b,j,d1] 
             t1bj[b,j]   = Fbj[b,j,d2] 
             etemp       = tbj[b,j]*t1bj[b,j] 
             t1dd[d1,d2] = etemp 
             tdd[d1,d2] += t1dd[d1,d2]  
          ENDDO j 
          ENDDO b  
          BB[d1,d2] = tdd[d1,d2] 

       ENDDO d2 
       ENDDO d1 
#
       execute compute_diis BB 
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
       sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           txx[mu,nu] = 0.0 
#
           DO d1   
           where d1 <= (int)temp_order # worder 
              GET            Fa[mu,nu,d1] 
              t1xx[mu,nu]  = Fa[mu,nu,d1] 
              execute return_sval BB[d1,d1] etemp 
              t1xx[mu,nu] *= etemp   
              txx[mu,nu]  += t1xx[mu,nu] 
           ENDDO d1   
#
           PUT Fpq_a[mu,nu] = txx[mu,nu] 
#
           txx[mu,nu] = 0.0 
#
           DO d1   
	   where d1 <= (int)temp_order
              GET            Fb[mu,nu,d1] 
              t1xx[mu,nu]  = Fb[mu,nu,d1] 
              execute return_sval BB[d1,d1] etemp 
              t1xx[mu,nu] *= etemp   
              txx[mu,nu]  += t1xx[mu,nu] 
           ENDDO d1   
#
           PUT Fpq_b[mu,nu] = txx[mu,nu] 
#
       ENDPARDO mu, nu 
#
       sip_barrier 
#
       ENDPROC DIISN   
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
      PROC IGUESS
        execute get_my_rank rank 
       if rank == 0.0 
         DO mu  
         DO nu 
            Txx[mu,nu]      = 0.0
            execute return_h1_moi Txx[mu,nu] one
            PUT Fpq_a[mu,nu] = Txx[mu,nu]
            PUT Fpq_b[mu,nu] = Txx[mu,nu]
         ENDDO nu 
         ENDDO mu  
       endif 
      ENDPROC IGUESS

############################################################################## 
#
#                         START OF MAIN PROGRAM 
#
############################################################################## 
#
      print "Monomer-Of-Interest fragment parallel SCF program"
      print "Written by Jason N. Byrd, December 2015"
#
      ecrit  = scf_conv 
      etemp  = 1.0 
      etemp += damp  
      damp1  = 1.0/etemp         # 1/(1+damp)  
      pcount = 0.0 
      print damp 
      print damp1

      zero = 0.0 
      mone = -1.0 
      one = 1.0 
      two = 2.0 
      three = 3.0 
      four = 4.0 
      diis_count = 0.0  
      diis_start = 2.0 
      diis_end = 5000.0 
      diis_order = 8.0 
      diis_max_order = 10.0 
      diis_start = (scalar)scf_beg
      diis_order = (scalar)scf_hist
      print diis_start
      print diis_order
#
#     Compute the nuclear-nuclear repulsion energy  
#     -------------------------------------------- 
      execute moi_nn_repulsion repulsion one
      print repulsion 
#
#     New HF density 
#     -------------- 
#
      sip_barrier 
      PARDO mu, nu 
            PUT Dhfa[mu,nu] = 0.0
            PUT Dhfb[mu,nu] = 0.0
      ENDPARDO mu, nu 

#     Get memory requirements from integral calculation 
#     ------------------------------------------------- 
      imax = 0.0 
      zmax = 0.0 
      execute compute_int_scratchmem_lowmem oed_ovl zmax imax 
      server_barrier 

#
# Zero out the DIIS vectors 
# 

      PARDO a, i, d1
	   PUT Fai[a,i,d1] = 0.0
      ENDPARDO a, i, d1

      PARDO b, j, d1
	   PUT Fbj[b,j,d1] = 0.0
      ENDPARDO b, j, d1

      PARDO mu, nu, d1
	   PUT Fa[mu,nu,d1] = 0.0
	   PUT Fb[mu,nu,d1] = 0.0
      ENDPARDO mu, nu, d1
#
#     Orthonormalizing transformation coefficient
#     ------------------------------------------- 
#
      allocate contiguous clca[1:max_aoseg,1:max_aoseg]
      sip_barrier 
#
#     Construct the initial guess of the Fock matrix.
#     -----------------------------------------------
#    
      esum = 0.0
      esum1= 0.0
      sip_barrier

      CALL IGUESS 

#     Construct the array S**(-1/2) 
#     ----------------------------- 
#
      CALL OVER_HALF 
      sip_barrier 

      DO mu
      DO nu
         GET              DHFa[mu,nu]
         GET              DHFb[mu,nu]
         oed_ovl[mu,nu] = DHFa[mu,nu] # 13
         oed_kin[mu,nu] = DHFb[mu,nu] # 12
      ENDDO nu
      ENDDO mu

      CALL FOCK_MATRIX_FAST 
#
#     Construct S^(-1/2) F S^(-1/2) 
#     ----------------------------- 
#
      sip_barrier 
      CALL FOCK_TRANSPOSE 
      sip_barrier 
#
#     -------------------------------------- 
#
      CALL FOCK_DIAG 
#
#     Back transform the coefficient array 
#     ------------------------------------ 
#
      sip_barrier
      CALL   C_BTRAN 
      sip_barrier
#
#     Zero out the 'old' HF density 
#     ----------------------------- 
#
      CALL HFDENS_ZERO 
      sip_barrier
#
#     Compute the HF density 
#     ---------------------- 
#
      CALL HFIDENS

      DO mu 
      DO nu 
         txx[mu,nu] = 0.0 
         Fockrohf_a[mu,nu] = txx[mu,nu]  
         Fockrohf_b[mu,nu] = txx[mu,nu]  
         txx[mu,nu] = oed_ovl[mu,nu]  
      ENDDO nu 
      ENDDO mu 
      
      sip_barrier
#
#     Compute the energy 
#     ------------------ 
#
      CALL HF_ENERGY 
      energy1 = energy 
      sip_barrier
#
#     Replace 'old' HF density by 'new' HF density 
#     -------------------------------------------- 
#
      CALL HFDENS_REPLACE 
#
      sip_barrier
#
	pardo mu,nu
	    put Fpq_a[mu,nu] = 0.0
	endpardo mu,nu
	pardo mu,nu
	    put Fpq_b[mu,nu] = 0.0
	endpardo mu,nu
	 pardo mu,nu
	     put FTpq_a[mu,nu] = 0.0
	 endpardo mu,nu
	 pardo mu,nu
	     put FTpq_b[mu,nu] = 0.0
	 endpardo mu,nu
	 pardo mu,a
	     put CBT_a[mu,a] = 0.0
	 endpardo mu,a
	 pardo mu,i
	     put CBT_a[mu,i] = 0.0
	 endpardo mu,i
	 pardo mu,a
	     put CBT_b[mu,a] = 0.0
	 endpardo mu,a
	 pardo mu,i
	     put CBT_b[mu,i] = 0.0
	 endpardo mu,i
         server_barrier
#
# Start iterations 
# ---------------- 
#
      DO kiter 
         print " "
	 print kiter
         diis_count += 1.0 
#
#        Create 1-particle arrays 
#        ------------------------ 
#
         sip_barrier
#
#        Construct the new Fock matrix 
#        -----------------------------

         DO mu
         DO nu
            GET              DHFa[mu,nu]
            GET              DHFb[mu,nu]
            oed_ovl[mu,nu] = DHFa[mu,nu] # 13
            oed_kin[mu,nu] = DHFb[mu,nu] # 12
         ENDDO nu
         ENDDO mu

         CALL FOCK_MATRIX_FAST 
         sip_barrier 
#
         CALL HF_ENERGY 
         energy2 = energy 
         sip_barrier
#
#        DONE Compute the DIIS  
#        --------------------- 

         if diis_count < diis_end 

         etemp = diis_start 
         etemp-= 1.0  
         etemp+= diis_order   

         worder = 0.0  
         n2 = diis_start 
         n2-= 1.0  
         if diis_count >= n2 
         if diis_count <= etemp 
            worder = diis_count  
            worder+= 1.0    
         endif  
         endif  

         if diis_count > etemp 
            worder = etemp  
         endif  
#
         if worder > 0.0  
            CALL GEN_6HISTORY 
         endif 
         sip_barrier 
#

         if diis_count >= diis_start
             damp   = 0.0
             etemp  = 1.0
             etemp += damp
             damp1  = 1.0/etemp         # 1/(1+damp)  
         if diis_count <= diis_end
            worder -= diis_start
            worder += 1.0
            damp  = 0.0
            damp1 = 1.0
            CALL DIISN
            etemp = diis_start
            etemp-= 1.0
            etemp+= diis_order
            if diis_count >= etemp
               CALL MOVE6
            endif
         endif
         endif

         endif # diis_end 

#
#        Transpose the new Fock matrix 
#        -----------------------------
#
         CALL FOCK_TRANSPOSE 
         sip_barrier
#
#        Diagonalize the transposed Fock matrix 
#        -------------------------------------- 
#
         CALL FOCK_DIAG 
         sip_barrier
#
#        Back transform the coefficient array 
#        ------------------------------------ 
#
         CALL C_BTRAN 
#
         done = 0.0 
         sip_barrier
#
#        Check on convergence --> largest HF density difference. 
#        ------------------------------------------------------- 
#
         DO mu 
         DO nu 
#
#           Alpha component 
#           --------------- 
#
            GET           DHFa_old[mu,nu] 
            GET           DHFa[mu,nu] 
#
            T1xx[mu,nu]  = DHFa[mu,nu] 
            T1xx[mu,nu] -= DHFa_old[mu,nu] 
            execute check_dconf T1xx[mu,nu] donea  
            if donea > done 
               done = donea 
            endif 
#
#           Beta component 
#           -------------- 
#
            GET           DHFb_old[mu,nu] 
            GET           DHFb[mu,nu] 
#
            Txx[mu,nu]  = DHFb[mu,nu] 
            Txx[mu,nu] -= DHFb_old[mu,nu] 
            execute check_dconf Txx[mu,nu] doneb  
            if doneb > done 
               done = doneb 
            endif 
#
         ENDDO nu 
         ENDDO mu 
         print done 
	 assert_same done
#
#        Check on convergence using density difference. 
#        ---------------------------------------------- 
#
         IF 1 < kiter # > 1
           #print_scalar diis_count 
            IF done < ecrit
           #print_scalar diis_count 
               exit
            ENDIF
         ENDIF
#
#        Replace 'old' HF density by 'new' HF density 
#        -------------------------------------------- 
#
         sip_barrier
         CALL HFDENS_REPLACE 
         sip_barrier
#
#        Reset eold --> enew
#        -------------------
#
         energy1 = energy2  
#
#        Compute the HF density 
#        ---------------------- 
#
         CALL HFDENS
         sip_barrier
#
#        clear one-particle arrays to be used in the next iteration. 
#        ------------------------------------------------------------ 
#
         if kiter < scf_iter
	    pardo mu,nu
	        put Fpq_a[mu,nu] = 0.0
	    endpardo mu,nu
	    pardo mu,nu
	        put Fpq_b[mu,nu] = 0.0
	    endpardo mu,nu
         endif

         server_barrier
	 pardo mu,nu
	     put FTpq_a[mu,nu] = 0.0
	 endpardo mu,nu
	 pardo mu,nu
	     put FTpq_b[mu,nu] = 0.0
	 endpardo mu,nu
	 pardo mu,a
	     put CBT_a[mu,a] = 0.0
	 endpardo mu,a
	 pardo mu,i
	     put CBT_a[mu,i] = 0.0
	 endpardo mu,i
	 pardo mu,a
	     put CBT_b[mu,a] = 0.0
	 endpardo mu,a
	 pardo mu,i
	     put CBT_b[mu,i] = 0.0
	 endpardo mu,i
         server_barrier
#
      ENDDO kiter 
#
      sip_barrier 
      PARDO mu, nu 
            GET Fpq_a[mu,nu] 
            DO a 
	       get DCa[nu,a]
               Txp[mu,a] = Fpq_a[mu,nu]*Dca[nu,a] 
               DO a1 
	          get DCa[mu,a1]
                  Tpp[a1,a] = Txp[mu,a]*Dca[mu,a1] 
                  PUT FTa[a1,a] += Tpp[a1,a] 
               ENDDO a1  
               DO i1 
	          get DCa[mu,i1]
                  Tpp[i1,a] = Txp[mu,a]*Dca[mu,i1] 
                  PUT FTa[i1,a] += Tpp[i1,a] 
               ENDDO i1  
            ENDDO a
            DO i 
	       get DCa[nu,i]
               Txp[mu,i] = Fpq_a[mu,nu]*Dca[nu,i] 
               DO a1 
	          get DCa[mu,a1]
                  Tpp[a1,i] = Txp[mu,i]*Dca[mu,a1] 
                  PUT FTa[a1,i] += Tpp[a1,i] 
               ENDDO a1  
               DO i1 
	          get DCa[mu,i1]
                  Tpp[i1,i] = Txp[mu,i]*Dca[mu,i1] 
                  PUT FTa[i1,i] += Tpp[i1,i] 
               ENDDO i1  
            ENDDO i
      ENDPARDO mu, nu  
      sip_barrier 

      deallocate contiguous clca[1:max_aoseg,1:max_aoseg]
      sip_barrier

      set_persistent Dca "MOI_ca" 
      set_persistent FTa "MOI_focka" 

      scf_energy  = energy2
      totenerg = scf_energy
      print scf_energy

      sip_barrier
#                         
#
                           ENDSIAL SCF_RHF_COREH          
#
###############################################################################
#
